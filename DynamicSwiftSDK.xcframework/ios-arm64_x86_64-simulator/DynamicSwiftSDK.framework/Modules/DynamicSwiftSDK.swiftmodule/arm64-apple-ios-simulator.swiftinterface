// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios18.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name DynamicSwiftSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import AuthenticationServices
@_exported import BigIntModule
import Combine
import CommonCrypto
import Foundation
import Foundation/*.Data*/
import Foundation/*.Date*/
import Foundation/*.URL*/
@_exported import HTTPTypes
@_exported import OpenAPIRuntime
import SafariServices
import Security
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class ABIFunctionEncoder {
  public func encode(_ value: any DynamicSwiftSDK.ABIType, staticSize: Swift.Int? = nil) throws
  public func encode<T>(_ values: [T], staticSize: Swift.Int? = nil) throws where T : DynamicSwiftSDK.ABIType
  public init(_ name: Swift.String)
  public func encoded() throws -> Foundation.Data
  @objc deinit
}
public func sign(environmentId: Swift.String, token: Swift.String, walletId: Swift.String, message: Swift.String, clientKeyShares: [Swift.String]) async throws -> Swift.String
@_Concurrency.MainActor public func addEthereumConnector(to client: DynamicSwiftSDK.DynamicClient, networkConfigProvider: (any DynamicSwiftSDK.NetworkConfigurationProvider)? = nil, initialChainId: Swift.Int? = nil) async throws
@_hasMissingDesignatedInitializers public actor SettingsNetworkConfigurationProvider : DynamicSwiftSDK.NetworkConfigurationProvider {
  public func getNetwork(for chainId: Swift.Int) async throws -> DynamicSwiftSDK.EvmNetwork
  public func getAllSupportedNetworks() async -> [DynamicSwiftSDK.EvmNetwork]
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public func getPrimaryWallet(client: DynamicSwiftSDK.DynamicClient) throws -> DynamicSwiftSDK.EthereumWallet?
public struct OTPVerification {
  public let email: Swift.String?
  public let phoneNumber: Swift.String?
  public let phoneCountryCode: Swift.String?
  public let isoCountryCode: Swift.String?
  public let verificationUUID: Swift.String
}
@_Concurrency.MainActor public func getEnabledSocialProviders(client: DynamicSwiftSDK.DynamicClient) async throws -> [DynamicSwiftSDK.Provider]
@_Concurrency.MainActor public func sendEmailOtp(client: DynamicSwiftSDK.DynamicClient, email: Swift.String) async throws -> DynamicSwiftSDK.OTPVerification
public typealias ProjectSettings = DynamicSwiftSDK.Components.Schemas.ProjectSettings
public typealias SdkUser = DynamicSwiftSDK.Components.Schemas.SdkUser
public typealias ChainEnum = DynamicSwiftSDK.Components.Schemas.ChainEnum
public typealias Currency = DynamicSwiftSDK.Components.Schemas.Currency
public typealias NativeCurrency = DynamicSwiftSDK.Components.Schemas.NativeCurrency
public typealias JwtVerifiedCredential = DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential
public typealias NetworkConfigurationResponse = DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse
public typealias Provider = DynamicSwiftSDK.Components.Schemas.Provider
public typealias ProviderType = DynamicSwiftSDK.Components.Schemas.ProviderEnum
public typealias WalletKeyshares = DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo
public typealias Uuid = DynamicSwiftSDK.Components.Schemas.Uuid
public typealias KeyshareLocations = DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum
public func verifyOtp(otpVerification: DynamicSwiftSDK.OTPVerification, verificationToken: Swift.String) async throws -> DynamicSwiftSDK.SdkUser
public func waitForInit(client: DynamicSwiftSDK.DynamicClient) async throws
@_Concurrency.MainActor public func createWalletAccount(client: DynamicSwiftSDK.DynamicClient) async throws -> Swift.String
public func getWalletIdFromAddress(client: DynamicSwiftSDK.DynamicClient, address: Swift.String) -> Swift.String?
@_Concurrency.MainActor public func logout(client: DynamicSwiftSDK.DynamicClient) async throws
public func bindSessionState(_ state: DynamicSwiftSDK.DynamicSessionState, to client: DynamicSwiftSDK.DynamicClient)
public func sign(client: DynamicSwiftSDK.DynamicClient, accountAddress: Swift.String, message: Swift.String) async throws -> Swift.String
@_Concurrency.MainActor public func presentSafariAuth(url: Foundation.URL, callbackUrlScheme: Swift.String, onDismiss: @escaping () -> Swift.Void, onCallback: @escaping (Foundation.URL) -> Swift.Void) throws
@_Concurrency.MainActor public func dismissSafariAuth()
public struct DynamicLogger {
}
public struct Logger {
}
final public class DynamicSessionState : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($isLoggedIn) final public var isLoggedIn: Swift.Bool {
    get
  }
  final public var $isLoggedIn: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  @Combine.Published @_projectedValueProperty($isInitialized) final public var isInitialized: Swift.Bool {
    get
  }
  final public var $isInitialized: Combine.Published<Swift.Bool>.Publisher {
    get
  }
  public init()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct BaseError : Swift.Error {
  public let name: Swift.String
  public let shortMessage: Swift.String
  public let cause: (any Swift.Error)?
  public let docsURL: Foundation.URL?
  public init(name: Swift.String = "BaseError", shortMessage: Swift.String, cause: (any Swift.Error)? = nil, docsURL: Foundation.URL? = nil)
}
public struct WalletAccount {
  public let walletId: Swift.String
  public let accountAddress: Swift.String
}
public struct DynamicCoreConfig {
  public var apiBaseUrl: Swift.String?
  public var keyshareUrl: Swift.String?
  public init(apiBaseUrl: Swift.String? = nil, keyshareUrl: Swift.String? = nil)
}
@_Concurrency.MainActor public func sendSmsOtp(client: DynamicSwiftSDK.DynamicClient, phoneNumber: Swift.String, phoneCountryCode: Swift.String, isoCountryCode: Swift.String) async throws -> DynamicSwiftSDK.OTPVerification
public struct DynamicCoreState {
  public enum InitStatus {
    case uninitialized
    case inProgress
    case finished
    case failed
    public static func == (a: DynamicSwiftSDK.DynamicCoreState.InitStatus, b: DynamicSwiftSDK.DynamicCoreState.InitStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var initStatus: DynamicSwiftSDK.DynamicCoreState.InitStatus
  public var loaded: Swift.Bool
  public var token: Swift.String?
  public var walletAccounts: [DynamicSwiftSDK.WalletAccount]
  public var isLoggedIn: Swift.Bool
}
@_Concurrency.MainActor public func initializeClient(client: DynamicSwiftSDK.DynamicClient) async throws
@_Concurrency.MainActor public func socialLogin(client: DynamicSwiftSDK.DynamicClient, with provider: DynamicSwiftSDK.ProviderType, deepLinkUrl: Swift.String) async throws -> DynamicSwiftSDK.SdkUser
public struct DynamicCore {
}
public func verifySmsOtp(otpVerification: DynamicSwiftSDK.OTPVerification, verificationToken: Swift.String) async throws -> DynamicSwiftSDK.SdkUser
public func getCore(client: DynamicSwiftSDK.DynamicClient) -> DynamicSwiftSDK.DynamicCore
public func createDynamicClient(config: DynamicSwiftSDK.DynamicClientConfig) -> DynamicSwiftSDK.DynamicClient
public enum ProjectSettingsError : Swift.Error {
  case badRequest(Swift.String)
  case unprocessable(Swift.String)
  case serverError(Swift.String)
  case unexpectedStatus(Swift.Int)
}
public func fetchProjectSettings(client: DynamicSwiftSDK.DynamicClient) async throws -> DynamicSwiftSDK.ProjectSettings
public func randomURLSafeString(length: Swift.Int) -> Swift.String
public func generateOAuthState() -> Swift.String
public func loadKeyShares(client: DynamicSwiftSDK.DynamicClient, accountAddress: Swift.String) -> [Swift.String]?
public func subscribeToSelector<Slice>(_ client: DynamicSwiftSDK.DynamicClient, selector: @escaping (DynamicSwiftSDK.DynamicCoreState) -> Slice, onChange: @escaping (Slice) -> Swift.Void) -> () -> Swift.Void where Slice : Swift.Equatable
public struct DynamicClient {
  public init(core: DynamicSwiftSDK.DynamicCore)
  public var initStatus: DynamicSwiftSDK.DynamicCoreState.InitStatus {
    get
  }
  public var projectSettings: DynamicSwiftSDK.ProjectSettings? {
    get
  }
  public var token: Swift.String? {
    get
  }
  public var user: DynamicSwiftSDK.SdkUser? {
    get
  }
  public var walletAccounts: [DynamicSwiftSDK.WalletAccount] {
    get
  }
  public var isLoggedIn: Swift.Bool? {
    get
  }
  public var clientSessionKey: DynamicSwiftSDK.ClientSessionKey? {
    get
  }
}
extension DynamicSwiftSDK.DynamicClient : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension Swift.Array where Element == DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential {
  public func sortedByLastSelected() -> [DynamicSwiftSDK.JwtVerifiedCredential]
}
public struct DynamicClientConfig {
  public let environmentId: Swift.String
  public let coreConfig: DynamicSwiftSDK.DynamicCoreConfig?
  public init(environmentId: Swift.String, coreConfig: DynamicSwiftSDK.DynamicCoreConfig? = nil)
}
public struct JWK : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SessionKeys : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct P256KeyPair {
}
public struct ClientSessionKey : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public func buf2hex(_ buffer: Foundation.Data) -> Swift.String
public func base64urlDecode(_ s: Swift.String?) -> Foundation.Data?
public func compressRawPublicKey(_ rawPublicKey: Foundation.Data) -> Foundation.Data
public func toEncodedFormat(publicKey: Swift.String, privateKey: Swift.String, privateKeyJwk: DynamicSwiftSDK.JWK, registered: Swift.Bool, expirationDate: Foundation.Date? = nil) -> Swift.String
public func p256Keygen() -> DynamicSwiftSDK.P256KeyPair
public func p256Sign(privateKeyJwk: DynamicSwiftSDK.JWK, message: Swift.String) -> Swift.String
public func generateClientSessionKey() -> DynamicSwiftSDK.ClientSessionKey
public func generateSessionSignature(privateKeyJwk: DynamicSwiftSDK.JWK, sessionId: Swift.String) -> Swift.String
public func generateSessionSignature(privateKeyData: Foundation.Data, sessionId: Swift.String) -> Swift.String
public typealias HexString = Swift.String
extension Foundation.Data {
  public func toHexString(shouldPrefix: Swift.Bool = true) -> DynamicSwiftSDK.HexString
}
extension Swift.String {
  public func toHexData() throws -> Foundation.Data
}
public enum EthereumConnectorError : Swift.Error {
  case noChainId
  public static func == (a: DynamicSwiftSDK.EthereumConnectorError, b: DynamicSwiftSDK.EthereumConnectorError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ABIEncoder {
  public enum EncodedValue {
    case value(bytes: [Swift.UInt8], isDynamic: Swift.Bool, staticLength: Swift.Int)
    indirect case container(values: [DynamicSwiftSDK.ABIEncoder.EncodedValue], isDynamic: Swift.Bool, size: Swift.Int?)
    public var bytes: [Swift.UInt8] {
      get
    }
    public var hexString: Swift.String {
      get
    }
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ABIDecoder {
  @objc deinit
}
public func formatEvmMessage(_ message: Swift.String) throws -> Foundation.Data
public func formatEvmMessage(message: Foundation.Data) throws -> Foundation.Data
public protocol EthereumTransactionProtocol {
  init(from: DynamicSwiftSDK.EthereumAddress?, to: DynamicSwiftSDK.EthereumAddress, value: BigIntModule.BigUInt?, data: Foundation.Data?, nonce: Swift.Int?, gasPrice: BigIntModule.BigUInt?, gasLimit: BigIntModule.BigUInt?, chainId: Swift.Int?)
  init(from: DynamicSwiftSDK.EthereumAddress?, to: DynamicSwiftSDK.EthereumAddress, data: Foundation.Data, gasPrice: BigIntModule.BigUInt, gasLimit: BigIntModule.BigUInt)
  init(to: DynamicSwiftSDK.EthereumAddress, data: Foundation.Data)
  var raw: Foundation.Data? { get }
  var hash: Foundation.Data? { get }
}
public struct EthereumTransaction : DynamicSwiftSDK.EthereumTransactionProtocol, Swift.Equatable, Swift.Codable {
  public let from: DynamicSwiftSDK.EthereumAddress?
  public let to: DynamicSwiftSDK.EthereumAddress
  public let value: BigIntModule.BigUInt?
  public let data: Foundation.Data?
  public var nonce: Swift.Int?
  public let gasPrice: BigIntModule.BigUInt?
  public let gasLimit: BigIntModule.BigUInt?
  public let gas: BigIntModule.BigUInt?
  public let blockNumber: DynamicSwiftSDK.EthereumBlock?
  public let input: Swift.String?
  public var hash: Foundation.Data? {
    get
  }
  public var chainId: Swift.Int? {
    get
    set
  }
  public init(from: DynamicSwiftSDK.EthereumAddress?, to: DynamicSwiftSDK.EthereumAddress, value: BigIntModule.BigUInt?, data: Foundation.Data?, nonce: Swift.Int?, gasPrice: BigIntModule.BigUInt?, gasLimit: BigIntModule.BigUInt?, chainId: Swift.Int?)
  public init(from: DynamicSwiftSDK.EthereumAddress?, to: DynamicSwiftSDK.EthereumAddress, data: Foundation.Data, gasPrice: BigIntModule.BigUInt, gasLimit: BigIntModule.BigUInt)
  public init(from: DynamicSwiftSDK.EthereumAddress?, to: DynamicSwiftSDK.EthereumAddress, value: BigIntModule.BigUInt = 0, data: Foundation.Data, gasPrice: BigIntModule.BigUInt, gasLimit: BigIntModule.BigUInt)
  public init(to: DynamicSwiftSDK.EthereumAddress, data: Foundation.Data)
  public var raw: Foundation.Data? {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public static func == (a: DynamicSwiftSDK.EthereumTransaction, b: DynamicSwiftSDK.EthereumTransaction) -> Swift.Bool
}
public struct SignedTransaction {
  public let signature: DynamicSwiftSDK.Signature
  public var raw: Foundation.Data? {
    get
  }
  public var hash: Foundation.Data? {
    get
  }
}
public struct TypedVariable : Swift.Codable, Swift.Equatable {
  public var name: Swift.String
  public var type: Swift.String
  public init(name: Swift.String, type: Swift.String)
  public static func == (a: DynamicSwiftSDK.TypedVariable, b: DynamicSwiftSDK.TypedVariable) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TypedData : Swift.Codable, Swift.Equatable {
  public var types: [Swift.String : [DynamicSwiftSDK.TypedVariable]]
  public var primaryType: Swift.String
  public static func == (a: DynamicSwiftSDK.TypedData, b: DynamicSwiftSDK.TypedData) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DynamicSwiftSDK.TypedData : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DynamicSwiftSDK.TypedData {
  public var typeHash: Foundation.Data {
    get
  }
  public func signableHash() throws -> Foundation.Data
  public func encodeType(primaryType: Swift.String) -> Foundation.Data
}
public struct DynamicSignedTransaction {
  public let raw: Foundation.Data?
  public init(raw: Foundation.Data?)
}
public enum WalletError : Swift.Error {
  case signError
  case emptyRawTransaction
  case unknownError
  public static func == (a: DynamicSwiftSDK.WalletError, b: DynamicSwiftSDK.WalletError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol AsyncWallet {
  func sign(data: Foundation.Data) async throws -> Foundation.Data
  func sign(message: Foundation.Data) async throws -> Foundation.Data
  func sign(message: Swift.String) async throws -> Foundation.Data
  func sign(hash: Swift.String) async throws -> Foundation.Data
  func sign(hex: Swift.String) async throws -> Foundation.Data
  func signMessage(message: Foundation.Data) async throws -> Swift.String
}
public protocol MPCWallet : DynamicSwiftSDK.AsyncWallet, Swift.Equatable {
  var walletId: Swift.String { get }
  var thresholdSignatureScheme: DynamicSwiftSDK.ThresholdSignatureScheme? { get }
  var derivationPath: [Swift.UInt32]? { get }
  var accountAddress: DynamicSwiftSDK.BlockchainAddress { get }
}
extension DynamicSwiftSDK.MPCWallet {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public protocol WalletConnector {
  associatedtype WalletType : DynamicSwiftSDK.MPCWallet
  associatedtype NetworkClient
  var chain: DynamicSwiftSDK.ChainName { get }
  var primaryWallet: Self.WalletType? { get }
  var wallets: [Self.WalletType] { get }
  func getPrimaryWallet() -> Self.WalletType?
  func getWallets() -> [Self.WalletType]
  func getWallet(for address: Swift.String) -> Self.WalletType?
}
public struct BlockchainAddress : Swift.Hashable, Swift.Equatable, Swift.CustomStringConvertible {
  public init(_ address: Swift.String)
  public var description: Swift.String {
    get
  }
  public var shortened: Swift.String {
    get
  }
  public func asString() -> Swift.String
  public func isEqual(to other: DynamicSwiftSDK.BlockchainAddress, caseSensitive: Swift.Bool = false) -> Swift.Bool
  public static func == (lhs: DynamicSwiftSDK.BlockchainAddress, rhs: DynamicSwiftSDK.BlockchainAddress) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EthereumNetwork : Swift.Equatable, Swift.Decodable {
  case mainnet
  case sepolia
  case custom(Swift.String)
  public static func fromString(_ networkId: Swift.String) -> DynamicSwiftSDK.EthereumNetwork
  public var stringValue: Swift.String {
    get
  }
  public var intValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public func == (lhs: DynamicSwiftSDK.EthereumNetwork, rhs: DynamicSwiftSDK.EthereumNetwork) -> Swift.Bool
extension DynamicSwiftSDK.Web3Extensions where Base == Swift.String {
  public var isNumeric: Swift.Bool {
    get
  }
  public var isAddress: Swift.Bool {
    get
  }
}
extension DynamicSwiftSDK.Web3Extensions where Base == Foundation.Data {
  public var keccak256: Foundation.Data {
    get
  }
}
extension DynamicSwiftSDK.Web3Extensions where Base == Swift.String {
  public var keccak256: Foundation.Data {
    get
  }
  public var keccak256fromHex: Foundation.Data {
    get
  }
}
public enum EthereumAccountError : Swift.Error {
  case createAccountError
  case importAccountError
  case loadAccountError
  case signError
  public static func == (a: DynamicSwiftSDK.EthereumAccountError, b: DynamicSwiftSDK.EthereumAccountError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ABIRevertError : DynamicSwiftSDK.ABIFunctionEncodable {
  var expectedTypes: [any DynamicSwiftSDK.ABIType.Type] { get }
}
extension DynamicSwiftSDK.JSONRPCErrorDetail {
  public func decode<T>(error: T) throws -> [DynamicSwiftSDK.ABIDecoder.DecodedValue] where T : DynamicSwiftSDK.ABIRevertError
}
public struct EquatableError : Swift.Error, Swift.Equatable {
  public static func == (lhs: DynamicSwiftSDK.EquatableError, rhs: DynamicSwiftSDK.EquatableError) -> Swift.Bool
}
public enum EthereumClientError : Swift.Error, Swift.Equatable {
  case tooManyResults
  case executionError(DynamicSwiftSDK.JSONRPCErrorDetail)
  case unexpectedReturnValue
  case noResultFound
  case decodeIssue
  case encodeIssue
  case noInputData
  case webSocketError(DynamicSwiftSDK.EquatableError)
  case connectionNotOpen
  public static func == (a: DynamicSwiftSDK.EthereumClientError, b: DynamicSwiftSDK.EthereumClientError) -> Swift.Bool
}
public struct Signature : Swift.Equatable {
  public let r: Foundation.Data
  public let s: Foundation.Data
  public let v: Swift.Int
  public let recoveryParam: Swift.Int
  public var flattened: Foundation.Data {
    get
  }
  public init(r: Foundation.Data, s: Foundation.Data, v: Swift.Int, recoveryParam: Swift.Int)
  public init(raw: Foundation.Data)
  public static let zero: DynamicSwiftSDK.Signature
  public static func == (a: DynamicSwiftSDK.Signature, b: DynamicSwiftSDK.Signature) -> Swift.Bool
}
public enum EthereumBlock : Swift.Hashable {
  case Latest
  case Earliest
  case Pending
  case Number(Swift.Int)
  public var stringValue: Swift.String {
    get
  }
  public var intValue: Swift.Int? {
    get
  }
  public init(rawValue: Swift.Int)
  public init(rawValue: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DynamicSwiftSDK.EthereumBlock : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension DynamicSwiftSDK.EthereumBlock : Swift.Comparable {
  public static func == (lhs: DynamicSwiftSDK.EthereumBlock, rhs: DynamicSwiftSDK.EthereumBlock) -> Swift.Bool
  public static func < (lhs: DynamicSwiftSDK.EthereumBlock, rhs: DynamicSwiftSDK.EthereumBlock) -> Swift.Bool
}
public struct EthereumLog : Swift.Equatable {
  public let transactionHash: Swift.String?
  public let blockHash: Swift.String?
  public let blockNumber: DynamicSwiftSDK.EthereumBlock
  public let address: DynamicSwiftSDK.EthereumAddress
  public var data: Swift.String
  public var topics: [Swift.String]
  public let removed: Swift.Bool?
  public static func == (a: DynamicSwiftSDK.EthereumLog, b: DynamicSwiftSDK.EthereumLog) -> Swift.Bool
}
extension DynamicSwiftSDK.EthereumLog : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension DynamicSwiftSDK.EthereumLog : Swift.Comparable {
  public static func < (lhs: DynamicSwiftSDK.EthereumLog, rhs: DynamicSwiftSDK.EthereumLog) -> Swift.Bool
}
public struct EthereumHeader : Swift.Codable {
  public let parentHash: Swift.String
  public let sha3Uncles: Swift.String
  public let miner: Swift.String
  public let stateRoot: Swift.String
  public let transactionsRoot: Swift.String
  public let receiptsRoot: Swift.String
  public let logsBloom: Swift.String
  public let difficulty: Swift.String
  public let number: Swift.String
  public let gasLimit: Swift.String
  public let gasUsed: Swift.String
  public let timestamp: Swift.String
  public let extraData: Swift.String
  public let mixHash: Swift.String
  public let nonce: Swift.String
  public let hash: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol EthereumSingleKeyStorageProtocol {
  func storePrivateKey(key: Foundation.Data) throws
  func loadPrivateKey() throws -> Foundation.Data
}
public protocol EthereumMultipleKeyStorageProtocol {
  func deleteAllKeys() throws
  func deletePrivateKey(for address: DynamicSwiftSDK.EthereumAddress) throws
  func fetchAccounts() throws -> [DynamicSwiftSDK.EthereumAddress]
  func loadPrivateKey(for address: DynamicSwiftSDK.EthereumAddress) throws -> Foundation.Data
  func storePrivateKey(key: Foundation.Data, with address: DynamicSwiftSDK.EthereumAddress) throws
}
public enum EthereumKeyStorageError : Swift.Error {
  case notFound
  case failedToSave
  case failedToLoad
  case failedToDelete
  public static func == (a: DynamicSwiftSDK.EthereumKeyStorageError, b: DynamicSwiftSDK.EthereumKeyStorageError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class EthereumKeyLocalStorage : DynamicSwiftSDK.EthereumSingleKeyStorageProtocol {
  public init()
  public func storePrivateKey(key: Foundation.Data) throws
  public func loadPrivateKey() throws -> Foundation.Data
  @objc deinit
}
extension DynamicSwiftSDK.EthereumKeyLocalStorage : DynamicSwiftSDK.EthereumMultipleKeyStorageProtocol {
  public func fetchAccounts() throws -> [DynamicSwiftSDK.EthereumAddress]
  public func storePrivateKey(key: Foundation.Data, with address: DynamicSwiftSDK.EthereumAddress) throws
  public func loadPrivateKey(for address: DynamicSwiftSDK.EthereumAddress) throws -> Foundation.Data
  public func deleteAllKeys() throws
  public func deletePrivateKey(for address: DynamicSwiftSDK.EthereumAddress) throws
}
extension Swift.Int {
  public init?(hex: Swift.String)
}
extension DynamicSwiftSDK.Web3Extensions where Base == Swift.Int {
  public var hexString: Swift.String {
    get
  }
}
extension DynamicSwiftSDK.Web3Extensions where Base == Foundation.Data {
  public var hexString: Swift.String {
    get
  }
}
extension Swift.String {
  public init(bytes: [Swift.UInt8])
}
extension DynamicSwiftSDK.Web3Extensions where Base == Swift.String {
  public var noHexPrefix: Swift.String {
    get
  }
  public var withHexPrefix: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
  public var hexData: Foundation.Data? {
    get
  }
}
public protocol ABIFunctionEncodable {
  static var name: Swift.String { get }
  func encode(to encoder: DynamicSwiftSDK.ABIFunctionEncoder) throws
}
extension DynamicSwiftSDK.ABIFunctionEncodable {
  public func decode(_ data: Foundation.Data, expectedTypes: [any DynamicSwiftSDK.ABIType.Type], filteringEmptyEntries filterEmptyEntries: Swift.Bool = true) throws -> [DynamicSwiftSDK.ABIDecoder.DecodedValue]
}
extension DynamicSwiftSDK.ABIDecoder {
  public typealias RawABI = Swift.String
  public typealias ParsedABIEntry = Swift.String
  public typealias ABIEntry = [Swift.String]
  public struct DecodedValue {
    public func decoded<T>() throws -> T where T : DynamicSwiftSDK.ABIType
    public func decodedArray<T>() throws -> [T] where T : DynamicSwiftSDK.ABIType
    public func decodedTupleArray<T>() throws -> [T] where T : DynamicSwiftSDK.ABITuple
  }
  public static func decodeData(_ data: DynamicSwiftSDK.ABIDecoder.RawABI, types: [any DynamicSwiftSDK.ABIType.Type], asArray: Swift.Bool = false) throws -> [DynamicSwiftSDK.ABIDecoder.DecodedValue]
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.String.Type) throws -> Swift.String
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.Bool.Type) throws -> Swift.Bool
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: DynamicSwiftSDK.EthereumAddress.Type) throws -> DynamicSwiftSDK.EthereumAddress
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.UInt8.Type) throws -> Swift.UInt8
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.UInt16.Type) throws -> Swift.UInt16
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.UInt32.Type) throws -> Swift.UInt32
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Swift.UInt64.Type) throws -> Swift.UInt64
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Foundation.URL.Type) throws -> Foundation.URL
  public static func decode(_ data: DynamicSwiftSDK.ABIDecoder.ParsedABIEntry, to: Foundation.Data.Type) throws -> Foundation.Data
}
extension Foundation.Data {
  public static func ^ (lhs: Foundation.Data, rhs: Foundation.Data) -> Foundation.Data
}
extension DynamicSwiftSDK.Web3Extensions where Base == Foundation.Data {
  public var bytes: [Swift.UInt8] {
    get
  }
  public var strippingZeroesFromBytes: Foundation.Data {
    get
  }
  public var bytes4: Foundation.Data {
    get
  }
  public var bytes32: Foundation.Data {
    get
  }
}
extension Swift.String {
  public init(hexFromBytes bytes: [Swift.UInt8])
}
extension DynamicSwiftSDK.Web3Extensions where Base == Swift.String {
  public var bytes: [Swift.UInt8] {
    get
  }
  public var bytesFromHex: [Swift.UInt8]? {
    get
  }
}
public enum OffchainReadError : Swift.Error {
  case network
  case server(code: Swift.Int, message: Swift.String?)
  case invalidParams
  case invalidResponse
  case tooManyRedirections
}
public struct JSONRPCResult<T> : Swift.Decodable where T : Swift.Decodable {
  public var id: Swift.Int
  public var jsonrpc: Swift.String
  public var result: T
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONRPCErrorDetail : Swift.Decodable, Swift.Equatable, Swift.CustomStringConvertible {
  public var code: Swift.Int
  public var message: Swift.String
  public var data: Swift.String?
  public init(code: Swift.Int, message: Swift.String, data: Swift.String?)
  public var description: Swift.String {
    get
  }
  public static func == (a: DynamicSwiftSDK.JSONRPCErrorDetail, b: DynamicSwiftSDK.JSONRPCErrorDetail) -> Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
public struct JSONRPCErrorResult : Swift.Decodable {
  public var id: Swift.Int
  public var jsonrpc: Swift.String
  public var error: DynamicSwiftSDK.JSONRPCErrorDetail
  public init(from decoder: any Swift.Decoder) throws
}
public enum JSONRPCErrorCode {
  public static var invalidInput: Swift.Int
  public static var tooManyResults: Swift.Int
  public static var contractExecution: Swift.Int
}
public enum JSONRPCError : Swift.Error {
  case executionError(DynamicSwiftSDK.JSONRPCErrorResult)
  case requestRejected(Foundation.Data)
  case encodingError
  case decodingError
  case unknownError
  case noResult
  case invalidConnection
  case connectionNotOpen
  case connectionTimeout
  case pendingRequestsOnReconnecting
  case maxAttemptsReachedOnReconnecting
  public var isExecutionError: Swift.Bool {
    get
  }
}
public enum Topics : Swift.Encodable {
  case plain([Swift.String?])
  case composed([[Swift.String]?])
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct EthereumAddress : Swift.Codable, Swift.Hashable {
  @available(*, deprecated, message: "Shouldn't rely on the actual String representation. Use asString() instead to get an unformatted representation")
  public var value: Swift.String {
    get
  }
  public static let zero: DynamicSwiftSDK.EthereumAddress
  public init(_ value: Swift.String)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: DynamicSwiftSDK.EthereumAddress, rhs: DynamicSwiftSDK.EthereumAddress) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension DynamicSwiftSDK.EthereumAddress {
  public func asString() -> Swift.String
  public func asData() -> Foundation.Data?
  public func toChecksumAddress() -> Swift.String
}
extension DynamicSwiftSDK.EthereumAddress : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public class BaseEthereumClient {
  final public let url: Foundation.URL
  final public let networkProvider: any DynamicSwiftSDK.NetworkProviderProtocol
  public var network: DynamicSwiftSDK.EthereumNetwork
  public init(networkProvider: any DynamicSwiftSDK.NetworkProviderProtocol, url: Foundation.URL, logger: DynamicSwiftSDK.Logger? = nil, network: DynamicSwiftSDK.EthereumNetwork)
  @objc deinit
}
extension DynamicSwiftSDK.BaseEthereumClient {
  public func net_version(completionHandler: @escaping (Swift.Result<DynamicSwiftSDK.EthereumNetwork, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_gasPrice(completionHandler: @escaping (Swift.Result<BigIntModule.BigUInt, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  @_Concurrency.MainActor public func eth_gasPriceBigInt() async throws -> BigIntModule.BigUInt
  @_Concurrency.MainActor public func eth_gasPriceString() async throws -> Swift.String
  public func eth_blockNumber(completionHandler: @escaping (Swift.Result<Swift.Int, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_getCode(address: DynamicSwiftSDK.EthereumAddress, block: DynamicSwiftSDK.EthereumBlock = .Latest, completionHandler: @escaping (Swift.Result<Swift.String, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_getTransactionCount(address: DynamicSwiftSDK.EthereumAddress, block: DynamicSwiftSDK.EthereumBlock, completionHandler: @escaping (Swift.Result<Swift.Int, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_getBlockByNumber(_ block: DynamicSwiftSDK.EthereumBlock, completionHandler: @escaping (Swift.Result<DynamicSwiftSDK.EthereumBlockInfo, DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_getLogs(addresses: [DynamicSwiftSDK.EthereumAddress]?, topics: [Swift.String?]?, fromBlock from: DynamicSwiftSDK.EthereumBlock = .Earliest, toBlock to: DynamicSwiftSDK.EthereumBlock = .Latest, completionHandler: @escaping (Swift.Result<[DynamicSwiftSDK.EthereumLog], DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
  public func eth_getLogs(addresses: [DynamicSwiftSDK.EthereumAddress]?, orTopics topics: [[Swift.String]?]?, fromBlock from: DynamicSwiftSDK.EthereumBlock = .Earliest, toBlock to: DynamicSwiftSDK.EthereumBlock = .Latest, completionHandler: @escaping (Swift.Result<[DynamicSwiftSDK.EthereumLog], DynamicSwiftSDK.EthereumClientError>) -> Swift.Void)
}
public struct RLP {
  public static func encode(_ item: Any) -> Foundation.Data?
}
public class HttpNetworkProvider : DynamicSwiftSDK.NetworkProviderProtocol {
  final public let session: Foundation.URLSession
  public init(session: Foundation.URLSession, url: Foundation.URL, headers: [Swift.String : Swift.String]? = nil)
  @objc deinit
  public func send<P, U>(method: Swift.String, params: P, receive: U.Type) async throws -> Any where P : Swift.Encodable, U : Swift.Decodable
}
public enum KeyUtilError : Swift.Error {
  case invalidContext
  case privateKeyInvalid
  case unknownError
  case signatureFailure
  case signatureParseFailure
  case badArguments
  public static func == (a: DynamicSwiftSDK.KeyUtilError, b: DynamicSwiftSDK.KeyUtilError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class KeyUtil {
  public static func generatePrivateKeyData() -> Foundation.Data?
  public static func generatePublicKey(from privateKey: Foundation.Data) throws -> Foundation.Data
  public static func generateAddress(from publicKey: Foundation.Data) -> DynamicSwiftSDK.EthereumAddress
  public static func sign(message: Foundation.Data, with privateKey: Foundation.Data, hashing: Swift.Bool) throws -> Foundation.Data
  public static func recoverPublicKey(message: Foundation.Data, signature: Foundation.Data) throws -> Swift.String
  @objc deinit
}
public enum ABIError : Swift.Error {
  case invalidSignature
  case invalidType
  case invalidValue
  case incorrectParameterCount
  case notCurrentlySupported
  public static func == (a: DynamicSwiftSDK.ABIError, b: DynamicSwiftSDK.ABIError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum ABIRawType {
  case FixedUInt(Swift.Int)
  case FixedInt(Swift.Int)
  case FixedAddress
  case FixedBool
  case FixedBytes(Swift.Int)
  case DynamicBytes
  case DynamicString
  indirect case FixedArray(DynamicSwiftSDK.ABIRawType, Swift.Int)
  indirect case DynamicArray(DynamicSwiftSDK.ABIRawType)
  indirect case Tuple([DynamicSwiftSDK.ABIRawType])
}
extension DynamicSwiftSDK.ABIRawType : Swift.RawRepresentable {
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
}
public protocol NetworkProviderProtocol {
  var session: Foundation.URLSession { get }
  func send<P, U>(method: Swift.String, params: P, receive: U.Type) async throws -> Any where P : Swift.Encodable, U : Swift.Decodable
}
public enum EthereumTransactionReceiptStatus : Swift.Int {
  case success
  case failure
  case notProcessed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct EthereumSyncStatus : Swift.Codable {
  public let result: DynamicSwiftSDK.ResultUnion
  public init(result: DynamicSwiftSDK.ResultUnion)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ResultUnion : Swift.Codable {
  case bool(Swift.Bool)
  case resultClass(DynamicSwiftSDK.ResultClass)
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ResultClass : Swift.Codable {
  public struct Status : Swift.Codable {
    public let startingBlock: Swift.Int
    public let currentBlock: Swift.Int
    public let highestBlock: Swift.Int
    public let pulledStates: Swift.Int
    public let knownStates: Swift.Int
    public init(startingBlock: Swift.Int, currentBlock: Swift.Int, highestBlock: Swift.Int, pulledStates: Swift.Int, knownStates: Swift.Int)
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let syncing: Swift.Bool
  public let status: DynamicSwiftSDK.ResultClass.Status
  public init(syncing: Swift.Bool, status: DynamicSwiftSDK.ResultClass.Status)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum EthereumSubscriptionType : Swift.Equatable, Swift.Hashable {
  case newBlockHeaders
  case logs(DynamicSwiftSDK.LogsParams?)
  case newPendingTransactions
  case syncing
  public static func == (a: DynamicSwiftSDK.EthereumSubscriptionType, b: DynamicSwiftSDK.EthereumSubscriptionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct EthereumSubscription : Swift.Hashable {
  public static func == (a: DynamicSwiftSDK.EthereumSubscription, b: DynamicSwiftSDK.EthereumSubscription) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum EthereumSubscriptionParamElement : Swift.Encodable {
  case method(Swift.String)
  case logsParams(DynamicSwiftSDK.LogsParams)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct LogsParams : Swift.Codable, Swift.Equatable, Swift.Hashable {
  public let address: DynamicSwiftSDK.EthereumAddress?
  public let topics: [Swift.String]?
  public init(address: DynamicSwiftSDK.EthereumAddress?, topics: [Swift.String]?)
  public static func == (a: DynamicSwiftSDK.LogsParams, b: DynamicSwiftSDK.LogsParams) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public protocol Web3Extendable {
  associatedtype T
  var web3: Self.T { get }
}
extension DynamicSwiftSDK.Web3Extendable {
  public var web3: DynamicSwiftSDK.Web3Extensions<Self> {
    get
  }
}
public struct Web3Extensions<Base> {
  public var base: Base {
    get
  }
}
extension Foundation.Data : DynamicSwiftSDK.Web3Extendable {
  @available(iOS 8.0, tvOS 9.0, watchOS 2.0, macOS 10.10, *)
  public typealias T = DynamicSwiftSDK.Web3Extensions<Foundation.Data>
}
extension Swift.String : DynamicSwiftSDK.Web3Extendable {
  public typealias T = DynamicSwiftSDK.Web3Extensions<Swift.String>
}
extension Swift.Int : DynamicSwiftSDK.Web3Extendable {
  public typealias T = DynamicSwiftSDK.Web3Extensions<Swift.Int>
}
public enum CallResolution {
  case noOffchain(failOnExecutionError: Swift.Bool)
  case offchainAllowed(maxRedirects: Swift.Int)
}
public struct EthereumBlockInfo : Swift.Equatable {
  public var number: DynamicSwiftSDK.EthereumBlock
  public var timestamp: Foundation.Date
  public var transactions: [Swift.String]
  public static func == (a: DynamicSwiftSDK.EthereumBlockInfo, b: DynamicSwiftSDK.EthereumBlockInfo) -> Swift.Bool
}
extension DynamicSwiftSDK.EthereumBlockInfo : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public protocol ABIType {
  static var rawType: DynamicSwiftSDK.ABIRawType { get }
  typealias ParserFunction = ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  static var parser: Self.ParserFunction { get }
}
extension Swift.String : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.String.ParserFunction {
    get
  }
}
extension Swift.Bool : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.Bool.ParserFunction {
    get
  }
}
extension DynamicSwiftSDK.EthereumAddress : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: DynamicSwiftSDK.EthereumAddress.ParserFunction {
    get
  }
}
extension Swift.UInt8 : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.UInt8.ParserFunction {
    get
  }
}
extension Swift.UInt16 : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.UInt16.ParserFunction {
    get
  }
}
extension Swift.UInt32 : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.UInt32.ParserFunction {
    get
  }
}
extension Swift.UInt64 : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Swift.UInt64.ParserFunction {
    get
  }
}
extension Foundation.URL : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Foundation.URL.ParserFunction {
    get
  }
}
extension DynamicSwiftSDK.ABITuple {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: Self.ParserFunction {
    get
  }
}
extension Foundation.Data : DynamicSwiftSDK.ABIType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
}
public protocol ABIStaticSizeDataType : DynamicSwiftSDK.ABIType {
}
public struct Data1 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data2 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data3 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data4 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data5 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data6 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data7 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data8 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data9 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data10 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data11 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data12 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data13 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data14 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data15 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data16 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data17 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data18 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data19 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data20 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data21 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data22 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data23 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data24 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data25 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data26 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data27 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data28 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data29 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data30 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data31 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct Data32 : DynamicSwiftSDK.ABIStaticSizeDataType {
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: ([Swift.String]) throws -> any DynamicSwiftSDK.ABIType
  public init(data: Foundation.Data)
}
public struct ABIArray<T> : DynamicSwiftSDK.ABIType where T : DynamicSwiftSDK.ABIType {
  public init(values: [T])
  public static var rawType: DynamicSwiftSDK.ABIRawType {
    get
  }
  public static var parser: DynamicSwiftSDK.ABIArray<T>.ParserFunction {
    get
  }
}
extension DynamicSwiftSDK.ABIEncoder {
  public static func encode(_ value: any DynamicSwiftSDK.ABIType, staticSize: Swift.Int? = nil, packed: Swift.Bool = false) throws -> DynamicSwiftSDK.ABIEncoder.EncodedValue
  public static func encode<T>(_ values: [T], staticSize: Swift.Int? = nil) throws -> DynamicSwiftSDK.ABIEncoder.EncodedValue where T : DynamicSwiftSDK.ABIType
}
public struct OffchainLookup : DynamicSwiftSDK.ABIRevertError {
  public var expectedTypes: [any DynamicSwiftSDK.ABIType.Type] {
    get
  }
  public static var name: Swift.String
  public var address: DynamicSwiftSDK.EthereumAddress
  public var urls: [Swift.String]
  public var callData: Foundation.Data
  public var callbackFunction: Foundation.Data
  public var extraData: Foundation.Data
  public func encode(to encoder: DynamicSwiftSDK.ABIFunctionEncoder) throws
  public init(address: DynamicSwiftSDK.EthereumAddress, urls: [Swift.String], callData: Foundation.Data, callbackFunction: Foundation.Data, extraData: Foundation.Data)
}
public func deriveEthereumAccountAddress(from rawPublicKey: Foundation.Data) -> (address: Swift.String, pubkeyHex: Swift.String)
public protocol ABITupleDecodable {
  static var types: [any DynamicSwiftSDK.ABIType.Type] { get }
  init?(data: Swift.String) throws
  init?(values: [DynamicSwiftSDK.ABIDecoder.DecodedValue]) throws
}
extension DynamicSwiftSDK.ABITupleDecodable {
  public init?(data: Swift.String) throws
}
public protocol ABITupleEncodable {
  var encodableValues: [any DynamicSwiftSDK.ABIType] { get }
  func encode(to encoder: DynamicSwiftSDK.ABIFunctionEncoder) throws
}
public protocol ABITuple : DynamicSwiftSDK.ABITupleDecodable, DynamicSwiftSDK.ABITupleEncodable, DynamicSwiftSDK.ABIType {
}
public func addEip191Prefix(message: Foundation.Data) -> Foundation.Data
public func verifySignature(message: Swift.String, signature: Swift.String, walletAddress: DynamicSwiftSDK.HexString) throws -> Swift.Bool
public struct EvmNetwork {
  public let name: Swift.String
  public let chainId: Swift.Int
  public let blockExplorerUrls: [Swift.String]
  public let iconUrls: [Swift.String]
  public let networkId: Swift.Int
  public let vanityName: Swift.String?
  public let rpcUrls: [Swift.String]
  public let isTestnet: Swift.Bool?
}
public enum SupportedEthereumNetwork : Swift.CaseIterable, Swift.Equatable {
  case ethereumMainnet
  case sepoliaTestnet
  case baseMainnet
  case baseSepolia
  case polygonMainnet
  case arbitrumOne
  case optimismMainnet
  case optimismSepolia
  public static func fromChainId(_ chainId: Swift.Int) -> DynamicSwiftSDK.SupportedEthereumNetwork?
  public var chainId: Swift.Int {
    get
  }
  public var name: Swift.String {
    get
  }
  public var vanityName: Swift.String? {
    get
  }
  public var chainConfig: DynamicSwiftSDK.EvmNetwork {
    get
  }
  public static func == (a: DynamicSwiftSDK.SupportedEthereumNetwork, b: DynamicSwiftSDK.SupportedEthereumNetwork) -> Swift.Bool
  public typealias AllCases = [DynamicSwiftSDK.SupportedEthereumNetwork]
  nonisolated public static var allCases: [DynamicSwiftSDK.SupportedEthereumNetwork] {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkConfigurationProvider {
  func getNetwork(for chainId: Swift.Int) async throws -> DynamicSwiftSDK.EvmNetwork
  func getAllSupportedNetworks() async -> [DynamicSwiftSDK.EvmNetwork]
  func getRpcUrl(for chainId: Swift.Int) async throws -> Swift.String
}
extension DynamicSwiftSDK.NetworkConfigurationProvider {
  public func getRpcUrl(for chainId: Swift.Int) async throws -> Swift.String
}
public enum NetworkError : Swift.Error {
  case unsupportedChain(Swift.Int)
  case missingRPC(Swift.Int)
}
public actor GenericNetworkConfigurationProvider : DynamicSwiftSDK.NetworkConfigurationProvider {
  public init()
  public func getNetwork(for chainId: Swift.Int) throws -> DynamicSwiftSDK.EvmNetwork
  public func getAllSupportedNetworks() -> [DynamicSwiftSDK.EvmNetwork]
  public func register(custom network: DynamicSwiftSDK.EvmNetwork)
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public struct EthereumWallet {
  public let address: DynamicSwiftSDK.EthereumAddress
  public let walletId: Swift.String
  public let chainName: DynamicSwiftSDK.ChainName?
  public let thresholdSignatureScheme: DynamicSwiftSDK.ThresholdSignatureScheme?
  public let derivationPath: [Swift.UInt32]?
  public var accountAddress: DynamicSwiftSDK.BlockchainAddress {
    get
  }
  public init(address: Swift.String, client: DynamicSwiftSDK.DynamicClient, thresholdSignatureScheme: DynamicSwiftSDK.ThresholdSignatureScheme? = .twoOfTwo) throws
}
extension DynamicSwiftSDK.EthereumWallet {
  @_Concurrency.MainActor public func getNetworkClient(for chainId: Swift.Int) async throws -> DynamicSwiftSDK.BaseEthereumClient
  @_Concurrency.MainActor public func switchNetwork(to network: DynamicSwiftSDK.EvmNetwork) async throws
}
extension DynamicSwiftSDK.EthereumWallet {
  @_Concurrency.MainActor public func getBalanceString() async throws -> Swift.String
  @_Concurrency.MainActor public func getBalance(_ block: DynamicSwiftSDK.EthereumBlock?) async throws -> BigIntModule.BigUInt
  @_Concurrency.MainActor public func sendTransaction(_ transaction: DynamicSwiftSDK.EthereumTransaction) async throws -> Swift.String
}
extension DynamicSwiftSDK.EthereumWallet : Swift.Equatable {
  public static func == (lhs: DynamicSwiftSDK.EthereumWallet, rhs: DynamicSwiftSDK.EthereumWallet) -> Swift.Bool
}
extension DynamicSwiftSDK.EthereumWallet {
  public func sign(data: Foundation.Data) async throws -> Foundation.Data
  public func sign(message: Foundation.Data) async throws -> Foundation.Data
  public func sign(message: Swift.String) async throws -> Foundation.Data
  public func sign(hash: Swift.String) async throws -> Foundation.Data
  public func sign(hex: DynamicSwiftSDK.HexString) async throws -> Foundation.Data
  public func signMessage(_ message: Swift.String) async throws -> Swift.String
  public func signMessage(message: Foundation.Data) async throws -> Swift.String
  public func signMessage(message: DynamicSwiftSDK.TypedData) async throws -> Swift.String
}
extension DynamicSwiftSDK.EthereumWallet {
  public func sign(data: Foundation.Data) throws -> Foundation.Data
  public func sign(message: Foundation.Data) throws -> Foundation.Data
  public func sign(message: Swift.String) throws -> Foundation.Data
  public func sign(hash: Swift.String) throws -> Foundation.Data
  public func sign(hex: Swift.String) throws -> Foundation.Data
  public func signMessage(message: Foundation.Data) throws -> Swift.String
  public func signMessage(message: DynamicSwiftSDK.TypedData) throws -> Swift.String
}
public enum Environment {
  public static var baseURL: Swift.String {
    get
  }
  public static var relayHost: Swift.String {
    get
  }
  public static var keyshareURL: Swift.String {
    get
  }
}
public enum ChainName : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
  case evm
  case btc
  case sol
  public static func fromString(_ value: Swift.String) -> DynamicSwiftSDK.ChainName?
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DynamicSwiftSDK.ChainName]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [DynamicSwiftSDK.ChainName] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ThresholdSignatureScheme : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
  case twoOfTwo
  case twoOfThree
  case threeOfFive
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DynamicSwiftSDK.ThresholdSignatureScheme]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [DynamicSwiftSDK.ThresholdSignatureScheme] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum VerifiedCredentialName : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
  case bip122
  case eip155
  case solana
  public init?(rawValue: Swift.String)
  public typealias AllCases = [DynamicSwiftSDK.VerifiedCredentialName]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [DynamicSwiftSDK.VerifiedCredentialName] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
extension DynamicSwiftSDK.ChainName {
  public static func fromVerifiedCredentialName(name: DynamicSwiftSDK.VerifiedCredentialName) -> DynamicSwiftSDK.ChainName?
}
public struct Client : DynamicSwiftSDK.APIProtocol {
  public init(serverURL: Foundation.URL, configuration: OpenAPIRuntime.Configuration = .init(), transport: any OpenAPIRuntime.ClientTransport, middlewares: [any OpenAPIRuntime.ClientMiddleware] = [])
  public func getUserFieldsCheck(_ input: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output
  public func getUserFieldsCheckOptions(_ input: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output
  public func initAuth(_ input: DynamicSwiftSDK.Operations.InitAuth.Input) async throws -> DynamicSwiftSDK.Operations.InitAuth.Output
  public func initAuthOptions(_ input: DynamicSwiftSDK.Operations.InitAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.InitAuthOptions.Output
  public func sessionCheck(_ input: DynamicSwiftSDK.Operations.SessionCheck.Input) async throws -> DynamicSwiftSDK.Operations.SessionCheck.Output
  public func sessionCheckOptions(_ input: DynamicSwiftSDK.Operations.SessionCheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.SessionCheckOptions.Output
  public func scanUrl(_ input: DynamicSwiftSDK.Operations.ScanUrl.Input) async throws -> DynamicSwiftSDK.Operations.ScanUrl.Output
  public func scanUrlOptions(_ input: DynamicSwiftSDK.Operations.ScanUrlOptions.Input) async throws -> DynamicSwiftSDK.Operations.ScanUrlOptions.Output
  public func simulateSVMTransaction(_ input: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output
  public func simulateSVMTransactionOptions(_ input: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output
  public func simulateEVMTransaction(_ input: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output
  public func simulateEVMTransactionOptions(_ input: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output
  public func simulateUserOp(_ input: DynamicSwiftSDK.Operations.SimulateUserOp.Input) async throws -> DynamicSwiftSDK.Operations.SimulateUserOp.Output
  public func simulateUserOpOptions(_ input: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output
  public func externalAuthSignin(_ input: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSignin.Output
  public func externalAuthSigninOptions(_ input: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output
  public func optimizeTransaction(_ input: DynamicSwiftSDK.Operations.OptimizeTransaction.Input) async throws -> DynamicSwiftSDK.Operations.OptimizeTransaction.Output
  public func optimizeTransactionOptions(_ input: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output
  @available(*, deprecated)
  public func externalAuthVerify(_ input: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerify.Output
  @available(*, deprecated)
  public func externalAuthVerifyOptions(_ input: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output
  public func getAuthToken(_ input: DynamicSwiftSDK.Operations.GetAuthToken.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthToken.Output
  public func getAuthTokenOpts(_ input: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output
  public func getEmbeddedWalletPasscode(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output
  public func getEmbeddedWalletPasscodeOption(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output
  public func selectUserWallet(_ input: DynamicSwiftSDK.Operations.SelectUserWallet.Input) async throws -> DynamicSwiftSDK.Operations.SelectUserWallet.Output
  public func selectUserWalletOptions(_ input: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input) async throws -> DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output
  public func claimEmbeddedWallet(_ input: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output
  public func claimEmbeddedWalletOptions(_ input: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output
  public func getEmbeddedWalletBackups(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output
  public func getEmbeddedWalletBackupOption(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output
  public func upgradeEmbeddedWalletToV2(_ input: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output
  public func upgradeEmbeddedWalletToV2Option(_ input: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output
  public func getHealthcheck(_ input: DynamicSwiftSDK.Operations.GetHealthcheck.Input) async throws -> DynamicSwiftSDK.Operations.GetHealthcheck.Output
  public func getHealthcheckOptions(_ input: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output
  public func refreshAuth(_ input: DynamicSwiftSDK.Operations.RefreshAuth.Input) async throws -> DynamicSwiftSDK.Operations.RefreshAuth.Output
  public func refreshOptions(_ input: DynamicSwiftSDK.Operations.RefreshOptions.Input) async throws -> DynamicSwiftSDK.Operations.RefreshOptions.Output
  public func getEmailProvider(_ input: DynamicSwiftSDK.Operations.GetEmailProvider.Input) async throws -> DynamicSwiftSDK.Operations.GetEmailProvider.Output
  public func emailProviderOptions(_ input: DynamicSwiftSDK.Operations.EmailProviderOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmailProviderOptions.Output
  public func oauthLoginUrl(_ input: DynamicSwiftSDK.Operations.OauthLoginUrl.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrl.Output
  public func oauthLoginUrlOptions(_ input: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output
  public func oauthLogin(_ input: DynamicSwiftSDK.Operations.OauthLogin.Input) async throws -> DynamicSwiftSDK.Operations.OauthLogin.Output
  public func oauthLoginOptions(_ input: DynamicSwiftSDK.Operations.OauthLoginOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginOptions.Output
  public func oauthRedirectCode(_ input: DynamicSwiftSDK.Operations.OauthRedirectCode.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectCode.Output
  public func oauthRedirectOptions(_ input: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectOptions.Output
  public func cbOauthRedirect(_ input: DynamicSwiftSDK.Operations.CbOauthRedirect.Input) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirect.Output
  public func cbOauthRedirectOptions(_ input: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output
  public func oauthRedirectApple(_ input: DynamicSwiftSDK.Operations.OauthRedirectApple.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectApple.Output
  public func oauthRedirectAppleOptions(_ input: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output
  public func oauthAuthorizeHtml(_ input: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output
  public func oauthAuthorizeHtmlOptions(_ input: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output
  public func oauthVerify(_ input: DynamicSwiftSDK.Operations.OauthVerify.Input) async throws -> DynamicSwiftSDK.Operations.OauthVerify.Output
  public func oauthVerifyOptions(_ input: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthVerifyOptions.Output
  public func farcasterSignIn(_ input: DynamicSwiftSDK.Operations.FarcasterSignIn.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterSignIn.Output
  public func farcasterSignInOptions(_ input: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output
  public func farcasterVerify(_ input: DynamicSwiftSDK.Operations.FarcasterVerify.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterVerify.Output
  public func farcasterVerifyOptions(_ input: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output
  public func oauthSignIn(_ input: DynamicSwiftSDK.Operations.OauthSignIn.Input) async throws -> DynamicSwiftSDK.Operations.OauthSignIn.Output
  public func oauthSignInOptions(_ input: DynamicSwiftSDK.Operations.OauthSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthSignInOptions.Output
  public func oauthResult(_ input: DynamicSwiftSDK.Operations.OauthResult.Input) async throws -> DynamicSwiftSDK.Operations.OauthResult.Output
  public func oauthResultOptions(_ input: DynamicSwiftSDK.Operations.OauthResultOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthResultOptions.Output
  public func getNonce(_ input: DynamicSwiftSDK.Operations.GetNonce.Input) async throws -> DynamicSwiftSDK.Operations.GetNonce.Output
  public func nonceOptions(_ input: DynamicSwiftSDK.Operations.NonceOptions.Input) async throws -> DynamicSwiftSDK.Operations.NonceOptions.Output
  public func publishEvent(_ input: DynamicSwiftSDK.Operations.PublishEvent.Input) async throws -> DynamicSwiftSDK.Operations.PublishEvent.Output
  public func eventsOptions(_ input: DynamicSwiftSDK.Operations.EventsOptions.Input) async throws -> DynamicSwiftSDK.Operations.EventsOptions.Output
  public func getEnvironmentSettings(_ input: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input) async throws -> DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output
  public func settingsOptions(_ input: DynamicSwiftSDK.Operations.SettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.SettingsOptions.Output
  public func logDynamicSdkSettings(_ input: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input) async throws -> DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output
  public func sdkSettingsOptions(_ input: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.SdkSettingsOptions.Output
  public func verifyLink(_ input: DynamicSwiftSDK.Operations.VerifyLink.Input) async throws -> DynamicSwiftSDK.Operations.VerifyLink.Output
  public func verifyLinkOptions(_ input: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyLinkOptions.Output
  public func verifyMergeUsers(_ input: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsers.Output
  public func verifyMergeUsersOptions(_ input: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output
  public func verifyTransfer(_ input: DynamicSwiftSDK.Operations.VerifyTransfer.Input) async throws -> DynamicSwiftSDK.Operations.VerifyTransfer.Output
  public func verifyTransferOptions(_ input: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyTransferOptions.Output
  public func revokeSession(_ input: DynamicSwiftSDK.Operations.RevokeSession.Input) async throws -> DynamicSwiftSDK.Operations.RevokeSession.Output
  public func revokeSessionOption(_ input: DynamicSwiftSDK.Operations.RevokeSessionOption.Input) async throws -> DynamicSwiftSDK.Operations.RevokeSessionOption.Output
  public func verifyUnlink(_ input: DynamicSwiftSDK.Operations.VerifyUnlink.Input) async throws -> DynamicSwiftSDK.Operations.VerifyUnlink.Output
  public func verifyUnlinkOptions(_ input: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output
  public func prefetch(_ input: DynamicSwiftSDK.Operations.Prefetch.Input) async throws -> DynamicSwiftSDK.Operations.Prefetch.Output
  public func verifyPrefetch(_ input: DynamicSwiftSDK.Operations.VerifyPrefetch.Input) async throws -> DynamicSwiftSDK.Operations.VerifyPrefetch.Output
  public func createVisit(_ input: DynamicSwiftSDK.Operations.CreateVisit.Input) async throws -> DynamicSwiftSDK.Operations.CreateVisit.Output
  public func optionsConnect(_ input: DynamicSwiftSDK.Operations.OptionsConnect.Input) async throws -> DynamicSwiftSDK.Operations.OptionsConnect.Output
  public func verify(_ input: DynamicSwiftSDK.Operations.Verify.Input) async throws -> DynamicSwiftSDK.Operations.Verify.Output
  public func verifyOptions(_ input: DynamicSwiftSDK.Operations.VerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyOptions.Output
  public func getAuthenticatedUser(_ input: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output
  public func updateSelf(_ input: DynamicSwiftSDK.Operations.UpdateSelf.Input) async throws -> DynamicSwiftSDK.Operations.UpdateSelf.Output
  public func hardDeleteUser(_ input: DynamicSwiftSDK.Operations.HardDeleteUser.Input) async throws -> DynamicSwiftSDK.Operations.HardDeleteUser.Output
  public func usersOptions(_ input: DynamicSwiftSDK.Operations.UsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.UsersOptions.Output
  public func updateEmbeddedWalletRecoveryEmail(_ input: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input) async throws -> DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output
  public func recoveryEmailOptions(_ input: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output
  public func getUserPasskeys(_ input: DynamicSwiftSDK.Operations.GetUserPasskeys.Input) async throws -> DynamicSwiftSDK.Operations.GetUserPasskeys.Output
  public func updatePasskey(_ input: DynamicSwiftSDK.Operations.UpdatePasskey.Input) async throws -> DynamicSwiftSDK.Operations.UpdatePasskey.Output
  public func userPasskeysOptions(_ input: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input) async throws -> DynamicSwiftSDK.Operations.UserPasskeysOptions.Output
  public func getUserMfaDevices(_ input: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input) async throws -> DynamicSwiftSDK.Operations.GetUserMfaDevices.Output
  public func listMfaDevicesOptions(_ input: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input) async throws -> DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output
  public func getMfaDevice(_ input: DynamicSwiftSDK.Operations.GetMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.GetMfaDevice.Output
  public func updateUserMfaDevice(_ input: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output
  public func deleteMfaDevice(_ input: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.DeleteMfaDevice.Output
  public func getMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output
  public func registerTotpMfaDevice(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output
  public func registerTotpMfaDeviceVerify(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output
  public func registerTotpMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output
  public func authMfaTotpDevice(_ input: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output
  public func authMfaTotpDeviceOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output
  public func registerPasskeyMfaDevice(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output
  public func registerPasskeyMfaDeviceVerify(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output
  public func registerPasskeyMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output
  public func authMfaPasskeyDeviceChallenge(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output
  public func authMfaPasskeyDevice(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output
  public func authMfaPasskeyDeviceOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output
  public func authMfaRecovery(_ input: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecovery.Output
  public func authMfaRecoveryOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output
  public func getRecoveryCodes(_ input: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input) async throws -> DynamicSwiftSDK.Operations.GetRecoveryCodes.Output
  public func createNewRecoveryCodes(_ input: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input) async throws -> DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output
  public func recoveryCodesOptions(_ input: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output
  public func mergeUsers(_ input: DynamicSwiftSDK.Operations.MergeUsers.Input) async throws -> DynamicSwiftSDK.Operations.MergeUsers.Output
  public func mergeUsersOptions(_ input: DynamicSwiftSDK.Operations.MergeUsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.MergeUsersOptions.Output
  public func createEmbeddedWallets(_ input: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output
  public func deleteEmbeddedWallets(_ input: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input) async throws -> DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output
  public func createEmbeddedWalletsOptions(_ input: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output
  public func getEmbeddedWalletsDeleteRequest(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output
  public func embeddedWalletDeleteRequestOptions(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output
  public func createWalletAccount(_ input: DynamicSwiftSDK.Operations.CreateWalletAccount.Input) async throws -> DynamicSwiftSDK.Operations.CreateWalletAccount.Output
  public func walletAccountOptions(_ input: DynamicSwiftSDK.Operations.WalletAccountOptions.Input) async throws -> DynamicSwiftSDK.Operations.WalletAccountOptions.Output
  public func getCreateWalletAccountRequest(_ input: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input) async throws -> DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output
  public func walletAccountRequestOptions(_ input: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input) async throws -> DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output
  public func initEmailAuth(_ input: DynamicSwiftSDK.Operations.InitEmailAuth.Input) async throws -> DynamicSwiftSDK.Operations.InitEmailAuth.Output
  public func emailAuthOptions(_ input: DynamicSwiftSDK.Operations.EmailAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmailAuthOptions.Output
  public func initPasskeyRecovery(_ input: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input) async throws -> DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output
  public func completePasskeyRecovery(_ input: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input) async throws -> DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output
  public func passkeyRecoveryOptions(_ input: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input) async throws -> DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output
  public func registerSessionKey(_ input: DynamicSwiftSDK.Operations.RegisterSessionKey.Input) async throws -> DynamicSwiftSDK.Operations.RegisterSessionKey.Output
  public func sessionKeyOptions(_ input: DynamicSwiftSDK.Operations.SessionKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.SessionKeyOptions.Output
  public func embeddedWalletExport(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output
  public func embeddedWalletExportOptions(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output
  public func getNetworksConfigurationByEnvId(_ input: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input) async throws -> DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output
  public func networksOptions(_ input: DynamicSwiftSDK.Operations.NetworksOptions.Input) async throws -> DynamicSwiftSDK.Operations.NetworksOptions.Output
  public func getSupportedOnramps(_ input: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input) async throws -> DynamicSwiftSDK.Operations.GetSupportedOnramps.Output
  public func onrampsOptions(_ input: DynamicSwiftSDK.Operations.OnrampsOptions.Input) async throws -> DynamicSwiftSDK.Operations.OnrampsOptions.Output
  public func getCoinbaseSupportedNetworks(_ input: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input) async throws -> DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output
  public func coinbaseNetworksOptions(_ input: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input) async throws -> DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output
  public func createEmailVerification(_ input: DynamicSwiftSDK.Operations.CreateEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerification.Output
  public func createEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output
  public func createSmsVerification(_ input: DynamicSwiftSDK.Operations.CreateSmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerification.Output
  public func createSmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output
  public func retrySmsVerification(_ input: DynamicSwiftSDK.Operations.RetrySmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerification.Output
  public func retrySmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output
  public func verifySmsVerification(_ input: DynamicSwiftSDK.Operations.VerifySmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerification.Output
  public func verifySmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output
  public func signInWithSmsVerification(_ input: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output
  public func signInWithSmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output
  public func verifyEmailVerification(_ input: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerification.Output
  public func verifyEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output
  public func signInWithEmailVerification(_ input: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output
  public func signInWithEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output
  public func retryEmailVerification(_ input: DynamicSwiftSDK.Operations.RetryEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerification.Output
  public func retryEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output
  public func getJwksByEnvironmentId(_ input: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input) async throws -> DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output
  public func jwksOptions(_ input: DynamicSwiftSDK.Operations.JwksOptions.Input) async throws -> DynamicSwiftSDK.Operations.JwksOptions.Output
  public func getCurrencyExchangeRates(_ input: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output
  public func getCurrencyExchangeRatesOptions(_ input: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output
  public func getAccountBalances(_ input: DynamicSwiftSDK.Operations.GetAccountBalances.Input) async throws -> DynamicSwiftSDK.Operations.GetAccountBalances.Output
  public func getAccountBalancesOptions(_ input: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output
  public func getTelegramAuth(_ input: DynamicSwiftSDK.Operations.GetTelegramAuth.Input) async throws -> DynamicSwiftSDK.Operations.GetTelegramAuth.Output
  public func postTelegramAuth(_ input: DynamicSwiftSDK.Operations.PostTelegramAuth.Input) async throws -> DynamicSwiftSDK.Operations.PostTelegramAuth.Output
  public func telegramAuthOptions(_ input: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramAuthOptions.Output
  public func telegramSignIn(_ input: DynamicSwiftSDK.Operations.TelegramSignIn.Input) async throws -> DynamicSwiftSDK.Operations.TelegramSignIn.Output
  public func telegramSignInOptions(_ input: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramSignInOptions.Output
  public func telegramCheckAuth(_ input: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuth.Output
  public func telegramCheckAuthOptions(_ input: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output
  public func telegramVerify(_ input: DynamicSwiftSDK.Operations.TelegramVerify.Input) async throws -> DynamicSwiftSDK.Operations.TelegramVerify.Output
  public func telegramVerifyOptions(_ input: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output
  public func createWaasAccount(_ input: DynamicSwiftSDK.Operations.CreateWaasAccount.Input) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccount.Output
  public func createWaasAccountOptions(_ input: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output
  public func refreshKeyShares(_ input: DynamicSwiftSDK.Operations.RefreshKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.RefreshKeyShares.Output
  public func refreshKeySharesOptions(_ input: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output
  public func importPrivateKey(_ input: DynamicSwiftSDK.Operations.ImportPrivateKey.Input) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKey.Output
  public func importPrivateKeyOptions(_ input: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output
  public func exportPrivateKey(_ input: DynamicSwiftSDK.Operations.ExportPrivateKey.Input) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKey.Output
  public func exportPrivateKeyOptions(_ input: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output
  public func signMessage(_ input: DynamicSwiftSDK.Operations.SignMessage.Input) async throws -> DynamicSwiftSDK.Operations.SignMessage.Output
  public func signMessageOptions(_ input: DynamicSwiftSDK.Operations.SignMessageOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignMessageOptions.Output
  public func backupKeyShares(_ input: DynamicSwiftSDK.Operations.BackupKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeyShares.Output
  public func backupKeySharesOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output
  public func backupKeySharesToGoogleDrive(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output
  public func backupKeySharesToGoogleDriveOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output
  public func backupKeySharesToLocation(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output
  public func backupKeySharesToLocationOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output
  public func recoverKeyShares(_ input: DynamicSwiftSDK.Operations.RecoverKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.RecoverKeyShares.Output
  public func recoverKeySharesOptions(_ input: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output
  public func reshare(_ input: DynamicSwiftSDK.Operations.Reshare.Input) async throws -> DynamicSwiftSDK.Operations.Reshare.Output
  public func reshareOptions(_ input: DynamicSwiftSDK.Operations.ReshareOptions.Input) async throws -> DynamicSwiftSDK.Operations.ReshareOptions.Output
  public func getGlobalWalletsSettings(_ input: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input) async throws -> DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output
  public func globalWalletsSettingsOptions(_ input: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output
  public func getEndUserOauthAccessToken(_ input: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output
  public func getEndUserOauthAccessTokenOptions(_ input: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output
}
public protocol APIProtocol : Swift.Sendable {
  func getUserFieldsCheck(_ input: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output
  func getUserFieldsCheckOptions(_ input: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output
  func initAuth(_ input: DynamicSwiftSDK.Operations.InitAuth.Input) async throws -> DynamicSwiftSDK.Operations.InitAuth.Output
  func initAuthOptions(_ input: DynamicSwiftSDK.Operations.InitAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.InitAuthOptions.Output
  func sessionCheck(_ input: DynamicSwiftSDK.Operations.SessionCheck.Input) async throws -> DynamicSwiftSDK.Operations.SessionCheck.Output
  func sessionCheckOptions(_ input: DynamicSwiftSDK.Operations.SessionCheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.SessionCheckOptions.Output
  func scanUrl(_ input: DynamicSwiftSDK.Operations.ScanUrl.Input) async throws -> DynamicSwiftSDK.Operations.ScanUrl.Output
  func scanUrlOptions(_ input: DynamicSwiftSDK.Operations.ScanUrlOptions.Input) async throws -> DynamicSwiftSDK.Operations.ScanUrlOptions.Output
  func simulateSVMTransaction(_ input: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output
  func simulateSVMTransactionOptions(_ input: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output
  func simulateEVMTransaction(_ input: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output
  func simulateEVMTransactionOptions(_ input: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output
  func simulateUserOp(_ input: DynamicSwiftSDK.Operations.SimulateUserOp.Input) async throws -> DynamicSwiftSDK.Operations.SimulateUserOp.Output
  func simulateUserOpOptions(_ input: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input) async throws -> DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output
  func externalAuthSignin(_ input: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSignin.Output
  func externalAuthSigninOptions(_ input: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output
  func optimizeTransaction(_ input: DynamicSwiftSDK.Operations.OptimizeTransaction.Input) async throws -> DynamicSwiftSDK.Operations.OptimizeTransaction.Output
  func optimizeTransactionOptions(_ input: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input) async throws -> DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output
  @available(*, deprecated)
  func externalAuthVerify(_ input: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerify.Output
  @available(*, deprecated)
  func externalAuthVerifyOptions(_ input: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output
  func getAuthToken(_ input: DynamicSwiftSDK.Operations.GetAuthToken.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthToken.Output
  func getAuthTokenOpts(_ input: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output
  func getEmbeddedWalletPasscode(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output
  func getEmbeddedWalletPasscodeOption(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output
  func selectUserWallet(_ input: DynamicSwiftSDK.Operations.SelectUserWallet.Input) async throws -> DynamicSwiftSDK.Operations.SelectUserWallet.Output
  func selectUserWalletOptions(_ input: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input) async throws -> DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output
  func claimEmbeddedWallet(_ input: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output
  func claimEmbeddedWalletOptions(_ input: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output
  func getEmbeddedWalletBackups(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output
  func getEmbeddedWalletBackupOption(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output
  func upgradeEmbeddedWalletToV2(_ input: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output
  func upgradeEmbeddedWalletToV2Option(_ input: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output
  func getHealthcheck(_ input: DynamicSwiftSDK.Operations.GetHealthcheck.Input) async throws -> DynamicSwiftSDK.Operations.GetHealthcheck.Output
  func getHealthcheckOptions(_ input: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output
  func refreshAuth(_ input: DynamicSwiftSDK.Operations.RefreshAuth.Input) async throws -> DynamicSwiftSDK.Operations.RefreshAuth.Output
  func refreshOptions(_ input: DynamicSwiftSDK.Operations.RefreshOptions.Input) async throws -> DynamicSwiftSDK.Operations.RefreshOptions.Output
  func getEmailProvider(_ input: DynamicSwiftSDK.Operations.GetEmailProvider.Input) async throws -> DynamicSwiftSDK.Operations.GetEmailProvider.Output
  func emailProviderOptions(_ input: DynamicSwiftSDK.Operations.EmailProviderOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmailProviderOptions.Output
  func oauthLoginUrl(_ input: DynamicSwiftSDK.Operations.OauthLoginUrl.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrl.Output
  func oauthLoginUrlOptions(_ input: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output
  func oauthLogin(_ input: DynamicSwiftSDK.Operations.OauthLogin.Input) async throws -> DynamicSwiftSDK.Operations.OauthLogin.Output
  func oauthLoginOptions(_ input: DynamicSwiftSDK.Operations.OauthLoginOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthLoginOptions.Output
  func oauthRedirectCode(_ input: DynamicSwiftSDK.Operations.OauthRedirectCode.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectCode.Output
  func oauthRedirectOptions(_ input: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectOptions.Output
  func cbOauthRedirect(_ input: DynamicSwiftSDK.Operations.CbOauthRedirect.Input) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirect.Output
  func cbOauthRedirectOptions(_ input: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output
  func oauthRedirectApple(_ input: DynamicSwiftSDK.Operations.OauthRedirectApple.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectApple.Output
  func oauthRedirectAppleOptions(_ input: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output
  func oauthAuthorizeHtml(_ input: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output
  func oauthAuthorizeHtmlOptions(_ input: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output
  func oauthVerify(_ input: DynamicSwiftSDK.Operations.OauthVerify.Input) async throws -> DynamicSwiftSDK.Operations.OauthVerify.Output
  func oauthVerifyOptions(_ input: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthVerifyOptions.Output
  func farcasterSignIn(_ input: DynamicSwiftSDK.Operations.FarcasterSignIn.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterSignIn.Output
  func farcasterSignInOptions(_ input: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output
  func farcasterVerify(_ input: DynamicSwiftSDK.Operations.FarcasterVerify.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterVerify.Output
  func farcasterVerifyOptions(_ input: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output
  func oauthSignIn(_ input: DynamicSwiftSDK.Operations.OauthSignIn.Input) async throws -> DynamicSwiftSDK.Operations.OauthSignIn.Output
  func oauthSignInOptions(_ input: DynamicSwiftSDK.Operations.OauthSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthSignInOptions.Output
  func oauthResult(_ input: DynamicSwiftSDK.Operations.OauthResult.Input) async throws -> DynamicSwiftSDK.Operations.OauthResult.Output
  func oauthResultOptions(_ input: DynamicSwiftSDK.Operations.OauthResultOptions.Input) async throws -> DynamicSwiftSDK.Operations.OauthResultOptions.Output
  func getNonce(_ input: DynamicSwiftSDK.Operations.GetNonce.Input) async throws -> DynamicSwiftSDK.Operations.GetNonce.Output
  func nonceOptions(_ input: DynamicSwiftSDK.Operations.NonceOptions.Input) async throws -> DynamicSwiftSDK.Operations.NonceOptions.Output
  func publishEvent(_ input: DynamicSwiftSDK.Operations.PublishEvent.Input) async throws -> DynamicSwiftSDK.Operations.PublishEvent.Output
  func eventsOptions(_ input: DynamicSwiftSDK.Operations.EventsOptions.Input) async throws -> DynamicSwiftSDK.Operations.EventsOptions.Output
  func getEnvironmentSettings(_ input: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input) async throws -> DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output
  func settingsOptions(_ input: DynamicSwiftSDK.Operations.SettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.SettingsOptions.Output
  func logDynamicSdkSettings(_ input: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input) async throws -> DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output
  func sdkSettingsOptions(_ input: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.SdkSettingsOptions.Output
  func verifyLink(_ input: DynamicSwiftSDK.Operations.VerifyLink.Input) async throws -> DynamicSwiftSDK.Operations.VerifyLink.Output
  func verifyLinkOptions(_ input: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyLinkOptions.Output
  func verifyMergeUsers(_ input: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsers.Output
  func verifyMergeUsersOptions(_ input: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output
  func verifyTransfer(_ input: DynamicSwiftSDK.Operations.VerifyTransfer.Input) async throws -> DynamicSwiftSDK.Operations.VerifyTransfer.Output
  func verifyTransferOptions(_ input: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyTransferOptions.Output
  func revokeSession(_ input: DynamicSwiftSDK.Operations.RevokeSession.Input) async throws -> DynamicSwiftSDK.Operations.RevokeSession.Output
  func revokeSessionOption(_ input: DynamicSwiftSDK.Operations.RevokeSessionOption.Input) async throws -> DynamicSwiftSDK.Operations.RevokeSessionOption.Output
  func verifyUnlink(_ input: DynamicSwiftSDK.Operations.VerifyUnlink.Input) async throws -> DynamicSwiftSDK.Operations.VerifyUnlink.Output
  func verifyUnlinkOptions(_ input: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output
  func prefetch(_ input: DynamicSwiftSDK.Operations.Prefetch.Input) async throws -> DynamicSwiftSDK.Operations.Prefetch.Output
  func verifyPrefetch(_ input: DynamicSwiftSDK.Operations.VerifyPrefetch.Input) async throws -> DynamicSwiftSDK.Operations.VerifyPrefetch.Output
  func createVisit(_ input: DynamicSwiftSDK.Operations.CreateVisit.Input) async throws -> DynamicSwiftSDK.Operations.CreateVisit.Output
  func optionsConnect(_ input: DynamicSwiftSDK.Operations.OptionsConnect.Input) async throws -> DynamicSwiftSDK.Operations.OptionsConnect.Output
  func verify(_ input: DynamicSwiftSDK.Operations.Verify.Input) async throws -> DynamicSwiftSDK.Operations.Verify.Output
  func verifyOptions(_ input: DynamicSwiftSDK.Operations.VerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyOptions.Output
  func getAuthenticatedUser(_ input: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input) async throws -> DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output
  func updateSelf(_ input: DynamicSwiftSDK.Operations.UpdateSelf.Input) async throws -> DynamicSwiftSDK.Operations.UpdateSelf.Output
  func hardDeleteUser(_ input: DynamicSwiftSDK.Operations.HardDeleteUser.Input) async throws -> DynamicSwiftSDK.Operations.HardDeleteUser.Output
  func usersOptions(_ input: DynamicSwiftSDK.Operations.UsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.UsersOptions.Output
  func updateEmbeddedWalletRecoveryEmail(_ input: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input) async throws -> DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output
  func recoveryEmailOptions(_ input: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output
  func getUserPasskeys(_ input: DynamicSwiftSDK.Operations.GetUserPasskeys.Input) async throws -> DynamicSwiftSDK.Operations.GetUserPasskeys.Output
  func updatePasskey(_ input: DynamicSwiftSDK.Operations.UpdatePasskey.Input) async throws -> DynamicSwiftSDK.Operations.UpdatePasskey.Output
  func userPasskeysOptions(_ input: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input) async throws -> DynamicSwiftSDK.Operations.UserPasskeysOptions.Output
  func getUserMfaDevices(_ input: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input) async throws -> DynamicSwiftSDK.Operations.GetUserMfaDevices.Output
  func listMfaDevicesOptions(_ input: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input) async throws -> DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output
  func getMfaDevice(_ input: DynamicSwiftSDK.Operations.GetMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.GetMfaDevice.Output
  func updateUserMfaDevice(_ input: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output
  func deleteMfaDevice(_ input: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.DeleteMfaDevice.Output
  func getMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output
  func registerTotpMfaDevice(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output
  func registerTotpMfaDeviceVerify(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output
  func registerTotpMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output
  func authMfaTotpDevice(_ input: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output
  func authMfaTotpDeviceOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output
  func registerPasskeyMfaDevice(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output
  func registerPasskeyMfaDeviceVerify(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output
  func registerPasskeyMfaDeviceOptions(_ input: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output
  func authMfaPasskeyDeviceChallenge(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output
  func authMfaPasskeyDevice(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output
  func authMfaPasskeyDeviceOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output
  func authMfaRecovery(_ input: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecovery.Output
  func authMfaRecoveryOptions(_ input: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output
  func getRecoveryCodes(_ input: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input) async throws -> DynamicSwiftSDK.Operations.GetRecoveryCodes.Output
  func createNewRecoveryCodes(_ input: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input) async throws -> DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output
  func recoveryCodesOptions(_ input: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output
  func mergeUsers(_ input: DynamicSwiftSDK.Operations.MergeUsers.Input) async throws -> DynamicSwiftSDK.Operations.MergeUsers.Output
  func mergeUsersOptions(_ input: DynamicSwiftSDK.Operations.MergeUsersOptions.Input) async throws -> DynamicSwiftSDK.Operations.MergeUsersOptions.Output
  func createEmbeddedWallets(_ input: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output
  func deleteEmbeddedWallets(_ input: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input) async throws -> DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output
  func createEmbeddedWalletsOptions(_ input: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output
  func getEmbeddedWalletsDeleteRequest(_ input: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output
  func embeddedWalletDeleteRequestOptions(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output
  func createWalletAccount(_ input: DynamicSwiftSDK.Operations.CreateWalletAccount.Input) async throws -> DynamicSwiftSDK.Operations.CreateWalletAccount.Output
  func walletAccountOptions(_ input: DynamicSwiftSDK.Operations.WalletAccountOptions.Input) async throws -> DynamicSwiftSDK.Operations.WalletAccountOptions.Output
  func getCreateWalletAccountRequest(_ input: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input) async throws -> DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output
  func walletAccountRequestOptions(_ input: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input) async throws -> DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output
  func initEmailAuth(_ input: DynamicSwiftSDK.Operations.InitEmailAuth.Input) async throws -> DynamicSwiftSDK.Operations.InitEmailAuth.Output
  func emailAuthOptions(_ input: DynamicSwiftSDK.Operations.EmailAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmailAuthOptions.Output
  func initPasskeyRecovery(_ input: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input) async throws -> DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output
  func completePasskeyRecovery(_ input: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input) async throws -> DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output
  func passkeyRecoveryOptions(_ input: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input) async throws -> DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output
  func registerSessionKey(_ input: DynamicSwiftSDK.Operations.RegisterSessionKey.Input) async throws -> DynamicSwiftSDK.Operations.RegisterSessionKey.Output
  func sessionKeyOptions(_ input: DynamicSwiftSDK.Operations.SessionKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.SessionKeyOptions.Output
  func embeddedWalletExport(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output
  func embeddedWalletExportOptions(_ input: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output
  func getNetworksConfigurationByEnvId(_ input: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input) async throws -> DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output
  func networksOptions(_ input: DynamicSwiftSDK.Operations.NetworksOptions.Input) async throws -> DynamicSwiftSDK.Operations.NetworksOptions.Output
  func getSupportedOnramps(_ input: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input) async throws -> DynamicSwiftSDK.Operations.GetSupportedOnramps.Output
  func onrampsOptions(_ input: DynamicSwiftSDK.Operations.OnrampsOptions.Input) async throws -> DynamicSwiftSDK.Operations.OnrampsOptions.Output
  func getCoinbaseSupportedNetworks(_ input: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input) async throws -> DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output
  func coinbaseNetworksOptions(_ input: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input) async throws -> DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output
  func createEmailVerification(_ input: DynamicSwiftSDK.Operations.CreateEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerification.Output
  func createEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output
  func createSmsVerification(_ input: DynamicSwiftSDK.Operations.CreateSmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerification.Output
  func createSmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output
  func retrySmsVerification(_ input: DynamicSwiftSDK.Operations.RetrySmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerification.Output
  func retrySmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output
  func verifySmsVerification(_ input: DynamicSwiftSDK.Operations.VerifySmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerification.Output
  func verifySmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output
  func signInWithSmsVerification(_ input: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output
  func signInWithSmsVerificationOptions(_ input: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output
  func verifyEmailVerification(_ input: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerification.Output
  func verifyEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output
  func signInWithEmailVerification(_ input: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output
  func signInWithEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output
  func retryEmailVerification(_ input: DynamicSwiftSDK.Operations.RetryEmailVerification.Input) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerification.Output
  func retryEmailVerificationOptions(_ input: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output
  func getJwksByEnvironmentId(_ input: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input) async throws -> DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output
  func jwksOptions(_ input: DynamicSwiftSDK.Operations.JwksOptions.Input) async throws -> DynamicSwiftSDK.Operations.JwksOptions.Output
  func getCurrencyExchangeRates(_ input: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output
  func getCurrencyExchangeRatesOptions(_ input: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output
  func getAccountBalances(_ input: DynamicSwiftSDK.Operations.GetAccountBalances.Input) async throws -> DynamicSwiftSDK.Operations.GetAccountBalances.Output
  func getAccountBalancesOptions(_ input: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output
  func getTelegramAuth(_ input: DynamicSwiftSDK.Operations.GetTelegramAuth.Input) async throws -> DynamicSwiftSDK.Operations.GetTelegramAuth.Output
  func postTelegramAuth(_ input: DynamicSwiftSDK.Operations.PostTelegramAuth.Input) async throws -> DynamicSwiftSDK.Operations.PostTelegramAuth.Output
  func telegramAuthOptions(_ input: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramAuthOptions.Output
  func telegramSignIn(_ input: DynamicSwiftSDK.Operations.TelegramSignIn.Input) async throws -> DynamicSwiftSDK.Operations.TelegramSignIn.Output
  func telegramSignInOptions(_ input: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramSignInOptions.Output
  func telegramCheckAuth(_ input: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuth.Output
  func telegramCheckAuthOptions(_ input: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output
  func telegramVerify(_ input: DynamicSwiftSDK.Operations.TelegramVerify.Input) async throws -> DynamicSwiftSDK.Operations.TelegramVerify.Output
  func telegramVerifyOptions(_ input: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input) async throws -> DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output
  func createWaasAccount(_ input: DynamicSwiftSDK.Operations.CreateWaasAccount.Input) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccount.Output
  func createWaasAccountOptions(_ input: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output
  func refreshKeyShares(_ input: DynamicSwiftSDK.Operations.RefreshKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.RefreshKeyShares.Output
  func refreshKeySharesOptions(_ input: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output
  func importPrivateKey(_ input: DynamicSwiftSDK.Operations.ImportPrivateKey.Input) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKey.Output
  func importPrivateKeyOptions(_ input: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output
  func exportPrivateKey(_ input: DynamicSwiftSDK.Operations.ExportPrivateKey.Input) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKey.Output
  func exportPrivateKeyOptions(_ input: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output
  func signMessage(_ input: DynamicSwiftSDK.Operations.SignMessage.Input) async throws -> DynamicSwiftSDK.Operations.SignMessage.Output
  func signMessageOptions(_ input: DynamicSwiftSDK.Operations.SignMessageOptions.Input) async throws -> DynamicSwiftSDK.Operations.SignMessageOptions.Output
  func backupKeyShares(_ input: DynamicSwiftSDK.Operations.BackupKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeyShares.Output
  func backupKeySharesOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output
  func backupKeySharesToGoogleDrive(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output
  func backupKeySharesToGoogleDriveOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output
  func backupKeySharesToLocation(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output
  func backupKeySharesToLocationOptions(_ input: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output
  func recoverKeyShares(_ input: DynamicSwiftSDK.Operations.RecoverKeyShares.Input) async throws -> DynamicSwiftSDK.Operations.RecoverKeyShares.Output
  func recoverKeySharesOptions(_ input: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input) async throws -> DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output
  func reshare(_ input: DynamicSwiftSDK.Operations.Reshare.Input) async throws -> DynamicSwiftSDK.Operations.Reshare.Output
  func reshareOptions(_ input: DynamicSwiftSDK.Operations.ReshareOptions.Input) async throws -> DynamicSwiftSDK.Operations.ReshareOptions.Output
  func getGlobalWalletsSettings(_ input: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input) async throws -> DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output
  func globalWalletsSettingsOptions(_ input: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input) async throws -> DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output
  func getEndUserOauthAccessToken(_ input: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output
  func getEndUserOauthAccessTokenOptions(_ input: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output
}
extension DynamicSwiftSDK.APIProtocol {
  public func getUserFieldsCheck(path: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Path, query: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output
  public func getUserFieldsCheckOptions(path: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input.Path) async throws -> DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output
  public func initAuth(path: DynamicSwiftSDK.Operations.InitAuth.Input.Path, headers: DynamicSwiftSDK.Operations.InitAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitAuth.Input.Body) async throws -> DynamicSwiftSDK.Operations.InitAuth.Output
  public func initAuthOptions(path: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.InitAuthOptions.Output
  public func sessionCheck(path: DynamicSwiftSDK.Operations.SessionCheck.Input.Path, headers: DynamicSwiftSDK.Operations.SessionCheck.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SessionCheck.Output
  public func sessionCheckOptions(path: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SessionCheckOptions.Output
  public func scanUrl(path: DynamicSwiftSDK.Operations.ScanUrl.Input.Path, headers: DynamicSwiftSDK.Operations.ScanUrl.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ScanUrl.Input.Body) async throws -> DynamicSwiftSDK.Operations.ScanUrl.Output
  public func scanUrlOptions(path: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ScanUrlOptions.Output
  public func simulateSVMTransaction(path: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Body) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output
  public func simulateSVMTransactionOptions(path: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output
  public func simulateEVMTransaction(path: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Body) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output
  public func simulateEVMTransactionOptions(path: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output
  public func simulateUserOp(path: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Body) async throws -> DynamicSwiftSDK.Operations.SimulateUserOp.Output
  public func simulateUserOpOptions(path: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output
  public func externalAuthSignin(path: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Body) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSignin.Output
  public func externalAuthSigninOptions(path: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output
  public func optimizeTransaction(path: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Body) async throws -> DynamicSwiftSDK.Operations.OptimizeTransaction.Output
  public func optimizeTransactionOptions(path: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output
  @available(*, deprecated)
  public func externalAuthVerify(path: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Body) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerify.Output
  @available(*, deprecated)
  public func externalAuthVerifyOptions(path: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output
  public func getAuthToken(path: DynamicSwiftSDK.Operations.GetAuthToken.Input.Path, query: DynamicSwiftSDK.Operations.GetAuthToken.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetAuthToken.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetAuthToken.Output
  public func getAuthTokenOpts(path: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Path, headers: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output
  public func getEmbeddedWalletPasscode(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output
  public func getEmbeddedWalletPasscodeOption(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output
  public func selectUserWallet(path: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Path, headers: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Body) async throws -> DynamicSwiftSDK.Operations.SelectUserWallet.Output
  public func selectUserWalletOptions(path: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output
  public func claimEmbeddedWallet(path: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Path, headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Body) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output
  public func claimEmbeddedWalletOptions(path: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output
  public func getEmbeddedWalletBackups(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output
  public func getEmbeddedWalletBackupOption(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output
  public func upgradeEmbeddedWalletToV2(path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Path, headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Body) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output
  public func upgradeEmbeddedWalletToV2Option(path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Path, headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output
  public func getHealthcheck(path: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Path, headers: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetHealthcheck.Output
  public func getHealthcheckOptions(path: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output
  public func refreshAuth(path: DynamicSwiftSDK.Operations.RefreshAuth.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshAuth.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RefreshAuth.Output
  public func refreshOptions(path: DynamicSwiftSDK.Operations.RefreshOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RefreshOptions.Output
  public func getEmailProvider(path: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Path, query: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Query, headers: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmailProvider.Output
  public func emailProviderOptions(path: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EmailProviderOptions.Output
  public func oauthLoginUrl(path: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrl.Output
  public func oauthLoginUrlOptions(path: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output
  public func oauthLogin(path: DynamicSwiftSDK.Operations.OauthLogin.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLogin.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthLogin.Output
  public func oauthLoginOptions(path: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthLoginOptions.Output
  public func oauthRedirectCode(path: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Path, query: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthRedirectCode.Output
  public func oauthRedirectOptions(path: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthRedirectOptions.Output
  public func cbOauthRedirect(path: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Path, query: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirect.Output
  public func cbOauthRedirectOptions(path: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output
  public func oauthRedirectApple(path: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Body) async throws -> DynamicSwiftSDK.Operations.OauthRedirectApple.Output
  public func oauthRedirectAppleOptions(path: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output
  public func oauthAuthorizeHtml(path: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Path, query: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output
  public func oauthAuthorizeHtmlOptions(path: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output
  public func oauthVerify(path: DynamicSwiftSDK.Operations.OauthVerify.Input.Path, headers: DynamicSwiftSDK.Operations.OauthVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthVerify.Input.Body) async throws -> DynamicSwiftSDK.Operations.OauthVerify.Output
  public func oauthVerifyOptions(path: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthVerifyOptions.Output
  public func farcasterSignIn(path: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.FarcasterSignIn.Output
  public func farcasterSignInOptions(path: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output
  public func farcasterVerify(path: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.FarcasterVerify.Output
  public func farcasterVerifyOptions(path: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output
  public func oauthSignIn(path: DynamicSwiftSDK.Operations.OauthSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.OauthSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthSignIn.Input.Body) async throws -> DynamicSwiftSDK.Operations.OauthSignIn.Output
  public func oauthSignInOptions(path: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthSignInOptions.Output
  public func oauthResult(path: DynamicSwiftSDK.Operations.OauthResult.Input.Path, headers: DynamicSwiftSDK.Operations.OauthResult.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthResult.Input.Body) async throws -> DynamicSwiftSDK.Operations.OauthResult.Output
  public func oauthResultOptions(path: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OauthResultOptions.Output
  public func getNonce(path: DynamicSwiftSDK.Operations.GetNonce.Input.Path, headers: DynamicSwiftSDK.Operations.GetNonce.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetNonce.Output
  public func nonceOptions(path: DynamicSwiftSDK.Operations.NonceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.NonceOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.NonceOptions.Output
  public func publishEvent(path: DynamicSwiftSDK.Operations.PublishEvent.Input.Path, headers: DynamicSwiftSDK.Operations.PublishEvent.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.PublishEvent.Input.Body) async throws -> DynamicSwiftSDK.Operations.PublishEvent.Output
  public func eventsOptions(path: DynamicSwiftSDK.Operations.EventsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EventsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EventsOptions.Output
  public func getEnvironmentSettings(path: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Path, query: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output
  public func settingsOptions(path: DynamicSwiftSDK.Operations.SettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SettingsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SettingsOptions.Output
  public func logDynamicSdkSettings(path: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Path, headers: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Body) async throws -> DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output
  public func sdkSettingsOptions(path: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SdkSettingsOptions.Output
  public func verifyLink(path: DynamicSwiftSDK.Operations.VerifyLink.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyLink.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyLink.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifyLink.Output
  public func verifyLinkOptions(path: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyLinkOptions.Output
  public func verifyMergeUsers(path: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsers.Output
  public func verifyMergeUsersOptions(path: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output
  public func verifyTransfer(path: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifyTransfer.Output
  public func verifyTransferOptions(path: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyTransferOptions.Output
  public func revokeSession(path: DynamicSwiftSDK.Operations.RevokeSession.Input.Path, headers: DynamicSwiftSDK.Operations.RevokeSession.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RevokeSession.Output
  public func revokeSessionOption(path: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Path, headers: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RevokeSessionOption.Output
  public func verifyUnlink(path: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifyUnlink.Output
  public func verifyUnlinkOptions(path: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output
  public func prefetch(path: DynamicSwiftSDK.Operations.Prefetch.Input.Path, headers: DynamicSwiftSDK.Operations.Prefetch.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Prefetch.Input.Body) async throws -> DynamicSwiftSDK.Operations.Prefetch.Output
  public func verifyPrefetch(path: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyPrefetch.Output
  public func createVisit(path: DynamicSwiftSDK.Operations.CreateVisit.Input.Path, headers: DynamicSwiftSDK.Operations.CreateVisit.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateVisit.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateVisit.Output
  public func optionsConnect(path: DynamicSwiftSDK.Operations.OptionsConnect.Input.Path, headers: DynamicSwiftSDK.Operations.OptionsConnect.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OptionsConnect.Output
  public func verify(path: DynamicSwiftSDK.Operations.Verify.Input.Path, headers: DynamicSwiftSDK.Operations.Verify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Verify.Input.Body) async throws -> DynamicSwiftSDK.Operations.Verify.Output
  public func verifyOptions(path: DynamicSwiftSDK.Operations.VerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyOptions.Output
  public func getAuthenticatedUser(path: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Path, headers: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output
  public func updateSelf(path: DynamicSwiftSDK.Operations.UpdateSelf.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateSelf.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateSelf.Input.Body) async throws -> DynamicSwiftSDK.Operations.UpdateSelf.Output
  public func hardDeleteUser(path: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Path, headers: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.HardDeleteUser.Output
  public func usersOptions(path: DynamicSwiftSDK.Operations.UsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.UsersOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.UsersOptions.Output
  public func updateEmbeddedWalletRecoveryEmail(path: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Body) async throws -> DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output
  public func recoveryEmailOptions(path: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output
  public func getUserPasskeys(path: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Path, headers: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetUserPasskeys.Output
  public func updatePasskey(path: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Path, headers: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Body) async throws -> DynamicSwiftSDK.Operations.UpdatePasskey.Output
  public func userPasskeysOptions(path: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Path, headers: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.UserPasskeysOptions.Output
  public func getUserMfaDevices(path: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Path, headers: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetUserMfaDevices.Output
  public func listMfaDevicesOptions(path: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input.Path) async throws -> DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output
  public func getMfaDevice(path: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetMfaDevice.Output
  public func updateUserMfaDevice(path: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output
  public func deleteMfaDevice(path: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Headers) async throws -> DynamicSwiftSDK.Operations.DeleteMfaDevice.Output
  public func getMfaDeviceOptions(path: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input.Path) async throws -> DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output
  public func registerTotpMfaDevice(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output
  public func registerTotpMfaDeviceVerify(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Body) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output
  public func registerTotpMfaDeviceOptions(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output
  public func authMfaTotpDevice(path: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Body) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output
  public func authMfaTotpDeviceOptions(path: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output
  public func registerPasskeyMfaDevice(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output
  public func registerPasskeyMfaDeviceVerify(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Body) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output
  public func registerPasskeyMfaDeviceOptions(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output
  public func authMfaPasskeyDeviceChallenge(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output
  public func authMfaPasskeyDevice(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Body) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output
  public func authMfaPasskeyDeviceOptions(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output
  public func authMfaRecovery(path: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Body) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecovery.Output
  public func authMfaRecoveryOptions(path: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output
  public func getRecoveryCodes(path: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Path, headers: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetRecoveryCodes.Output
  public func createNewRecoveryCodes(path: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Path, headers: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output
  public func recoveryCodesOptions(path: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output
  public func mergeUsers(path: DynamicSwiftSDK.Operations.MergeUsers.Input.Path, headers: DynamicSwiftSDK.Operations.MergeUsers.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.MergeUsers.Output
  public func mergeUsersOptions(path: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.MergeUsersOptions.Output
  public func createEmbeddedWallets(path: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output
  public func deleteEmbeddedWallets(path: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Path, headers: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output
  public func createEmbeddedWalletsOptions(path: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output
  public func getEmbeddedWalletsDeleteRequest(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output
  public func embeddedWalletDeleteRequestOptions(path: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output
  public func createWalletAccount(path: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateWalletAccount.Output
  public func walletAccountOptions(path: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Path, headers: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.WalletAccountOptions.Output
  public func getCreateWalletAccountRequest(path: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Path, query: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Query, headers: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output
  public func walletAccountRequestOptions(path: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Path, headers: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output
  public func initEmailAuth(path: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Path, headers: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Body) async throws -> DynamicSwiftSDK.Operations.InitEmailAuth.Output
  public func emailAuthOptions(path: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EmailAuthOptions.Output
  public func initPasskeyRecovery(path: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Body) async throws -> DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output
  public func completePasskeyRecovery(path: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Body) async throws -> DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output
  public func passkeyRecoveryOptions(path: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Path, headers: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output
  public func registerSessionKey(path: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Body) async throws -> DynamicSwiftSDK.Operations.RegisterSessionKey.Output
  public func sessionKeyOptions(path: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SessionKeyOptions.Output
  public func embeddedWalletExport(path: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output
  public func embeddedWalletExportOptions(path: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output
  public func getNetworksConfigurationByEnvId(path: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Path, headers: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output
  public func networksOptions(path: DynamicSwiftSDK.Operations.NetworksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.NetworksOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.NetworksOptions.Output
  public func getSupportedOnramps(path: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Path, query: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Query, headers: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetSupportedOnramps.Output
  public func onrampsOptions(path: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.OnrampsOptions.Output
  public func getCoinbaseSupportedNetworks(path: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Path, headers: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output
  public func coinbaseNetworksOptions(path: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output
  public func createEmailVerification(path: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerification.Output
  public func createEmailVerificationOptions(path: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output
  public func createSmsVerification(path: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerification.Output
  public func createSmsVerificationOptions(path: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output
  public func retrySmsVerification(path: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerification.Output
  public func retrySmsVerificationOptions(path: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output
  public func verifySmsVerification(path: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerification.Output
  public func verifySmsVerificationOptions(path: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output
  public func signInWithSmsVerification(path: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output
  public func signInWithSmsVerificationOptions(path: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output
  public func verifyEmailVerification(path: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerification.Output
  public func verifyEmailVerificationOptions(path: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output
  public func signInWithEmailVerification(path: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output
  public func signInWithEmailVerificationOptions(path: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output
  public func retryEmailVerification(path: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Body) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerification.Output
  public func retryEmailVerificationOptions(path: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output
  public func getJwksByEnvironmentId(path: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Path, headers: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output
  public func jwksOptions(path: DynamicSwiftSDK.Operations.JwksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.JwksOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.JwksOptions.Output
  public func getCurrencyExchangeRates(path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Path, headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output
  public func getCurrencyExchangeRatesOptions(path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output
  public func getAccountBalances(path: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Path, query: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Query, headers: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetAccountBalances.Output
  public func getAccountBalancesOptions(path: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Path, query: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Query, headers: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output
  public func getTelegramAuth(path: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Path, query: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Query, headers: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetTelegramAuth.Output
  public func postTelegramAuth(path: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Path, headers: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Body) async throws -> DynamicSwiftSDK.Operations.PostTelegramAuth.Output
  public func telegramAuthOptions(path: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.TelegramAuthOptions.Output
  public func telegramSignIn(path: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.TelegramSignIn.Output
  public func telegramSignInOptions(path: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.TelegramSignInOptions.Output
  public func telegramCheckAuth(path: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuth.Output
  public func telegramCheckAuthOptions(path: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output
  public func telegramVerify(path: DynamicSwiftSDK.Operations.TelegramVerify.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramVerify.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.TelegramVerify.Output
  public func telegramVerifyOptions(path: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output
  public func createWaasAccount(path: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Body) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccount.Output
  public func createWaasAccountOptions(path: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output
  public func refreshKeyShares(path: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RefreshKeyShares.Output
  public func refreshKeySharesOptions(path: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input.Path) async throws -> DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output
  public func importPrivateKey(path: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Path, headers: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Body) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKey.Output
  public func importPrivateKeyOptions(path: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output
  public func exportPrivateKey(path: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Path, headers: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Body) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKey.Output
  public func exportPrivateKeyOptions(path: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output
  public func signMessage(path: DynamicSwiftSDK.Operations.SignMessage.Input.Path, headers: DynamicSwiftSDK.Operations.SignMessage.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignMessage.Input.Body) async throws -> DynamicSwiftSDK.Operations.SignMessage.Output
  public func signMessageOptions(path: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.SignMessageOptions.Output
  public func backupKeyShares(path: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Body) async throws -> DynamicSwiftSDK.Operations.BackupKeyShares.Output
  public func backupKeySharesOptions(path: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output
  public func backupKeySharesToGoogleDrive(path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output
  public func backupKeySharesToGoogleDriveOptions(path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output
  public func backupKeySharesToLocation(path: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Body) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output
  public func backupKeySharesToLocationOptions(path: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output
  public func recoverKeyShares(path: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Body? = nil) async throws -> DynamicSwiftSDK.Operations.RecoverKeyShares.Output
  public func recoverKeySharesOptions(path: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output
  public func reshare(path: DynamicSwiftSDK.Operations.Reshare.Input.Path, headers: DynamicSwiftSDK.Operations.Reshare.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Reshare.Input.Body) async throws -> DynamicSwiftSDK.Operations.Reshare.Output
  public func reshareOptions(path: DynamicSwiftSDK.Operations.ReshareOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ReshareOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.ReshareOptions.Output
  public func getGlobalWalletsSettings(path: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Path, headers: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output
  public func globalWalletsSettingsOptions(path: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output
  public func getEndUserOauthAccessToken(path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Path, headers: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Headers = .init()) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output
  public func getEndUserOauthAccessTokenOptions(path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input.Path) async throws -> DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output
}
public enum Servers {
  public enum Server1 {
    public static func url() throws -> Foundation.URL
  }
  @available(*, deprecated, renamed: "Servers.Server1.url")
  public static func server1() throws -> Foundation.URL
  public enum Server2 {
    public static func url() throws -> Foundation.URL
  }
  @available(*, deprecated, renamed: "Servers.Server2.url")
  public static func server2() throws -> Foundation.URL
  public enum Server3 {
    public static func url() throws -> Foundation.URL
  }
  @available(*, deprecated, renamed: "Servers.Server3.url")
  public static func server3() throws -> Foundation.URL
}
public enum Components {
  public enum Schemas {
    public struct UserFieldsCheckParams : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var field: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum
      public var value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public init(field: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum, value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case field
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams, b: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum UserFieldsCheckEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case email
      case username
      case nameServiceSubdomainHandle
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct UserFieldsCheckResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var field: Swift.String
      public var value: Swift.String
      public var available: Swift.Bool
      public init(field: Swift.String, value: Swift.String, available: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case field
        case value
        case available
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse, b: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OauthInitAuthRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var state: Swift.String
      public var redirectUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrlWithLocalhostAndDeepLink?
      public init(state: Swift.String, redirectUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrlWithLocalhostAndDeepLink? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case redirectUrl
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest, b: DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ExternalAuthSigninRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case jwt
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest, b: DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SimulateSVMTransactionRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chain: Swift.String
      public var transactions: [Swift.String]
      public var accountAddress: DynamicSwiftSDK.Components.Schemas.SolanaPublicKey
      public var domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength?
      public var method: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public init(chain: Swift.String, transactions: [Swift.String], accountAddress: DynamicSwiftSDK.Components.Schemas.SolanaPublicKey, domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength? = nil, method: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chain
        case transactions
        case accountAddress
        case domain
        case method
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest, b: DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct V6UserOp : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var sender: DynamicSwiftSDK.Components.Schemas.HexString
      public var nonce: DynamicSwiftSDK.Components.Schemas.HexString
      public var initCode: DynamicSwiftSDK.Components.Schemas.HexString
      public var callData: DynamicSwiftSDK.Components.Schemas.HexString
      public var callGasLimit: DynamicSwiftSDK.Components.Schemas.HexString
      public var verificationGasLimit: DynamicSwiftSDK.Components.Schemas.HexString
      public var preVerificationGas: DynamicSwiftSDK.Components.Schemas.HexString
      public var maxFeePerGas: DynamicSwiftSDK.Components.Schemas.HexString
      public var maxPriorityFeePerGas: DynamicSwiftSDK.Components.Schemas.HexString
      public var paymasterAndData: DynamicSwiftSDK.Components.Schemas.HexString
      public init(sender: DynamicSwiftSDK.Components.Schemas.HexString, nonce: DynamicSwiftSDK.Components.Schemas.HexString, initCode: DynamicSwiftSDK.Components.Schemas.HexString, callData: DynamicSwiftSDK.Components.Schemas.HexString, callGasLimit: DynamicSwiftSDK.Components.Schemas.HexString, verificationGasLimit: DynamicSwiftSDK.Components.Schemas.HexString, preVerificationGas: DynamicSwiftSDK.Components.Schemas.HexString, maxFeePerGas: DynamicSwiftSDK.Components.Schemas.HexString, maxPriorityFeePerGas: DynamicSwiftSDK.Components.Schemas.HexString, paymasterAndData: DynamicSwiftSDK.Components.Schemas.HexString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case sender
        case nonce
        case initCode
        case callData
        case callGasLimit
        case verificationGasLimit
        case preVerificationGas
        case maxFeePerGas
        case maxPriorityFeePerGas
        case paymasterAndData
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.V6UserOp, b: DynamicSwiftSDK.Components.Schemas.V6UserOp) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct V7UserOp : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var sender: DynamicSwiftSDK.Components.Schemas.HexString
      public var nonce: DynamicSwiftSDK.Components.Schemas.HexString
      public var initCode: DynamicSwiftSDK.Components.Schemas.HexString
      public var callData: DynamicSwiftSDK.Components.Schemas.HexString
      public var accountGasLimits: DynamicSwiftSDK.Components.Schemas.HexString
      public var preVerificationGas: DynamicSwiftSDK.Components.Schemas.HexString
      public var gasFees: DynamicSwiftSDK.Components.Schemas.HexString
      public var paymasterAndData: DynamicSwiftSDK.Components.Schemas.HexString
      public var signature: DynamicSwiftSDK.Components.Schemas.HexString
      public init(sender: DynamicSwiftSDK.Components.Schemas.HexString, nonce: DynamicSwiftSDK.Components.Schemas.HexString, initCode: DynamicSwiftSDK.Components.Schemas.HexString, callData: DynamicSwiftSDK.Components.Schemas.HexString, accountGasLimits: DynamicSwiftSDK.Components.Schemas.HexString, preVerificationGas: DynamicSwiftSDK.Components.Schemas.HexString, gasFees: DynamicSwiftSDK.Components.Schemas.HexString, paymasterAndData: DynamicSwiftSDK.Components.Schemas.HexString, signature: DynamicSwiftSDK.Components.Schemas.HexString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case sender
        case nonce
        case initCode
        case callData
        case accountGasLimits
        case preVerificationGas
        case gasFees
        case paymasterAndData
        case signature
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.V7UserOp, b: DynamicSwiftSDK.Components.Schemas.V7UserOp) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SimulateUserOpRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chainId: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var operation: OpenAPIRuntime.OpenAPIObjectContainer
      public var entryPoint: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength?
      public var value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public init(chainId: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, operation: OpenAPIRuntime.OpenAPIObjectContainer, entryPoint: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength? = nil, value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chainId
        case operation
        case entryPoint
        case domain
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest, b: DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SimulateEVMTransactionRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chainId: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var data: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var from: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var to: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength?
      public init(chainId: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, data: DynamicSwiftSDK.Components.Schemas.NonEmptyString, from: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, to: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chainId
        case data
        case from
        case to
        case value
        case domain
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest, b: DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SimulateTransactionResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var inAssets: [DynamicSwiftSDK.Components.Schemas.AssetDiff]
      public var outAssets: [DynamicSwiftSDK.Components.Schemas.AssetDiff]
      @frozen public enum CounterpartiesPayloadPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        case WalletPublicKey(DynamicSwiftSDK.Components.Schemas.WalletPublicKey)
        case SolanaPublicKey(DynamicSwiftSDK.Components.Schemas.SolanaPublicKey)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public static func == (a: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CounterpartiesPayloadPayload, b: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CounterpartiesPayloadPayload) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public typealias CounterpartiesPayload = [DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CounterpartiesPayloadPayload]
      public var counterparties: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CounterpartiesPayload?
      public var priceData: DynamicSwiftSDK.Components.Schemas.PriceData
      public var showTotalFiat: Swift.Bool
      public var validation: DynamicSwiftSDK.Components.Schemas.BlockaidValidation?
      public var assetExposures: [DynamicSwiftSDK.Components.Schemas.AssetExposure]?
      public init(inAssets: [DynamicSwiftSDK.Components.Schemas.AssetDiff], outAssets: [DynamicSwiftSDK.Components.Schemas.AssetDiff], counterparties: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CounterpartiesPayload? = nil, priceData: DynamicSwiftSDK.Components.Schemas.PriceData, showTotalFiat: Swift.Bool, validation: DynamicSwiftSDK.Components.Schemas.BlockaidValidation? = nil, assetExposures: [DynamicSwiftSDK.Components.Schemas.AssetExposure]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case inAssets
        case outAssets
        case counterparties
        case priceData
        case showTotalFiat
        case validation
        case assetExposures
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse, b: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AssetExposure : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var asset: DynamicSwiftSDK.Components.Schemas.Asset
      public struct SpenderToInfoPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public struct AdditionalPropertiesPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
          public var amount: Swift.String
          public var spenderAlias: Swift.String?
          public var usdValue: Swift.String?
          public init(amount: Swift.String, spenderAlias: Swift.String? = nil, usdValue: Swift.String? = nil)
          public enum CodingKeys : Swift.String, Swift.CodingKey {
            case amount
            case spenderAlias
            case usdValue
            public init?(rawValue: Swift.String)
            public init?(stringValue: Swift.String)
            public init?(intValue: Swift.Int)
            public typealias RawValue = Swift.String
            public var intValue: Swift.Int? {
              get
            }
            public var rawValue: Swift.String {
              get
            }
            public var stringValue: Swift.String {
              get
            }
          }
          public static func == (a: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload, b: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload) -> Swift.Bool
          public func encode(to encoder: any Swift.Encoder) throws
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
          public init(from decoder: any Swift.Decoder) throws
        }
        public var additionalProperties: [Swift.String : DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload]
        public init(additionalProperties: [Swift.String : DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload] = .init())
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public static func == (a: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload, b: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var spenderToInfo: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload
      public init(asset: DynamicSwiftSDK.Components.Schemas.Asset, spenderToInfo: DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case asset
        case spenderToInfo
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AssetExposure, b: DynamicSwiftSDK.Components.Schemas.AssetExposure) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BlockaidValidation : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum ResultPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        @frozen public enum Case1Payload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case benign
          case warning
          case malicious
          case error
          public init?(rawValue: Swift.String)
          public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload.Case1Payload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload.Case1Payload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        case case1(DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload.Case1Payload)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public static func == (a: DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload, b: DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var result: DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload
      public var description: Swift.String?
      public var reason: Swift.String
      public var classification: Swift.String?
      public init(result: DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload, description: Swift.String? = nil, reason: Swift.String, classification: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case result
        case description
        case reason
        case classification
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BlockaidValidation, b: DynamicSwiftSDK.Components.Schemas.BlockaidValidation) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PriceData : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var nativeTokenUsdPrice: Swift.Double?
      public init(nativeTokenUsdPrice: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case nativeTokenUsdPrice
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PriceData, b: DynamicSwiftSDK.Components.Schemas.PriceData) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Asset : Swift.Codable, Swift.Hashable, Swift.Sendable {
      @frozen public enum AddressPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        case WalletPublicKey(DynamicSwiftSDK.Components.Schemas.WalletPublicKey)
        case SolanaPublicKey(DynamicSwiftSDK.Components.Schemas.SolanaPublicKey)
        public init(from decoder: any Swift.Decoder) throws
        public func encode(to encoder: any Swift.Encoder) throws
        public static func == (a: DynamicSwiftSDK.Components.Schemas.Asset.AddressPayload, b: DynamicSwiftSDK.Components.Schemas.Asset.AddressPayload) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var address: DynamicSwiftSDK.Components.Schemas.Asset.AddressPayload
      public var chainId: Swift.Double?
      public var chainName: Swift.String
      public var decimals: Swift.Double
      public var logoUrl: Swift.String
      public var name: Swift.String
      public var symbol: Swift.String
      public var _type: Swift.String
      public init(address: DynamicSwiftSDK.Components.Schemas.Asset.AddressPayload, chainId: Swift.Double? = nil, chainName: Swift.String, decimals: Swift.Double, logoUrl: Swift.String, name: Swift.String, symbol: Swift.String, _type: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case chainId
        case chainName
        case decimals
        case logoUrl
        case name
        case symbol
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Asset, b: DynamicSwiftSDK.Components.Schemas.Asset) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AssetTransfer : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var rawValue: Swift.String?
      public var summary: Swift.String?
      public var usdPrice: Swift.String?
      public var value: Swift.String?
      public init(rawValue: Swift.String? = nil, summary: Swift.String? = nil, usdPrice: Swift.String? = nil, value: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case rawValue
        case summary
        case usdPrice
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AssetTransfer, b: DynamicSwiftSDK.Components.Schemas.AssetTransfer) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AssetDiff : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var asset: DynamicSwiftSDK.Components.Schemas.Asset
      public var transferIn: [DynamicSwiftSDK.Components.Schemas.AssetTransfer]
      public var transferOut: [DynamicSwiftSDK.Components.Schemas.AssetTransfer]
      public init(asset: DynamicSwiftSDK.Components.Schemas.Asset, transferIn: [DynamicSwiftSDK.Components.Schemas.AssetTransfer], transferOut: [DynamicSwiftSDK.Components.Schemas.AssetTransfer])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case asset
        case transferIn
        case transferOut
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AssetDiff, b: DynamicSwiftSDK.Components.Schemas.AssetDiff) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ScanWebsiteUrlRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var url: DynamicSwiftSDK.Components.Schemas.NonEmptyUrlWith255MaxLength
      public init(url: DynamicSwiftSDK.Components.Schemas.NonEmptyUrlWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case url
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest, b: DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ScanWebsiteUrlResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var isMalicious: Swift.Bool?
      public init(isMalicious: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case isMalicious
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse, b: DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SolanaTransactionOptimizationRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var transaction: Swift.String
      public var address: DynamicSwiftSDK.Components.Schemas.SolanaPublicKey
      public init(transaction: Swift.String, address: DynamicSwiftSDK.Components.Schemas.SolanaPublicKey)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case transaction
        case address
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest, b: DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SolanaTransactionOptimizationResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var transaction: Swift.String
      public init(transaction: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case transaction
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse, b: DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UserWalletSelectionRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest, b: DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UserOauthAccessTokenResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var accessToken: Swift.String
      public init(accessToken: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case accessToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserOauthAccessTokenResponse, b: DynamicSwiftSDK.Components.Schemas.UserOauthAccessTokenResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum PasswordSourceTypeEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case dynamic
      case user
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct EmbeddedWalletSecret : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var secret: Swift.String
      public var source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum?
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid, secret: Swift.String, source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case secret
        case source
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret, b: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmbeddedWalletPasscodeClaimRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest, b: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmbeddedWalletSecretWithUpdatedJwt : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var mfaToken: Swift.String?
      public var jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var user: DynamicSwiftSDK.Components.Schemas.SdkUser
      public var minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var expiresAt: Swift.Double
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var secret: Swift.String?
      public var source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum?
      public init(mfaToken: Swift.String? = nil, jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, user: DynamicSwiftSDK.Components.Schemas.SdkUser, minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, expiresAt: Swift.Double, walletId: DynamicSwiftSDK.Components.Schemas.Uuid, secret: Swift.String? = nil, source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaToken
        case jwt
        case user
        case minifiedJwt
        case expiresAt
        case walletId
        case secret
        case source
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecretWithUpdatedJwt, b: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecretWithUpdatedJwt) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmbeddedWalletAuthToken : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var token: Swift.String
      public init(token: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case token
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken, b: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum EmbeddedWalletAuthType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case mpc
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct HealthcheckResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var status: DynamicSwiftSDK.Components.Schemas.HealthcheckStatus
      public init(status: DynamicSwiftSDK.Components.Schemas.HealthcheckStatus)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case status
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.HealthcheckResponse, b: DynamicSwiftSDK.Components.Schemas.HealthcheckResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum HealthcheckStatus : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case healthy
      case unhealthy
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.HealthcheckStatus]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.HealthcheckStatus] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias OauthRedirectRequestIdToken = Swift.String
    public typealias OauthRedirectUri = Swift.String
    public struct OauthRedirectRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var code: DynamicSwiftSDK.Components.Schemas.OAuthCode?
      public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
      public var idToken: DynamicSwiftSDK.Components.Schemas.OauthRedirectRequestIdToken?
      public var error: DynamicSwiftSDK.Components.Schemas.OAuthError?
      public init(code: DynamicSwiftSDK.Components.Schemas.OAuthCode? = nil, state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, idToken: DynamicSwiftSDK.Components.Schemas.OauthRedirectRequestIdToken? = nil, error: DynamicSwiftSDK.Components.Schemas.OAuthError? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case code
        case state
        case idToken
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest, b: DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OauthProviderLoginUrl : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var url: Swift.String
      public init(url: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case url
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl, b: DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmailProviderResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var emailProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum
      public init(emailProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case emailProvider
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmailProviderResponse, b: DynamicSwiftSDK.Components.Schemas.EmailProviderResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias OAuthCode = Swift.String
    public typealias OAuthError = Swift.String
    public typealias ValidStringQueryParam = Swift.String
    public struct OauthProviderRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public var accessToken: Swift.String?
      public var didToken: Swift.String?
      public init(provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil, accessToken: Swift.String? = nil, didToken: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case provider
        case accessToken
        case didToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthProviderRequest, b: DynamicSwiftSDK.Components.Schemas.OauthProviderRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SocialSignInProvider : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var provider: DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum
      public var enabled: Swift.Bool?
      public init(provider: DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum, enabled: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case provider
        case enabled
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SocialSignInProvider, b: DynamicSwiftSDK.Components.Schemas.SocialSignInProvider) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum SocialSignInProviderEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case apple
      case bitbucket
      case coinbasesocial
      case discord
      case epicgames
      case facebook
      case farcaster
      case github
      case gitlab
      case google
      case instagram
      case linkedin
      case microsoft
      case twitch
      case twitter
      case telegram
      case spotify
      case tiktok
      case line
      case steam
      case shopify
      case kraken
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum SignInProviderEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case dynamic
      case magicLink
      case blocto
      case turnkey
      case coinbaseWaas
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.SignInProviderEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.SignInProviderEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias EthSolBtcSuiFlowCosmosWalletAddress = Swift.String
    public typealias HexString = Swift.String
    public typealias NonEmptyString = Swift.String
    public typealias NonEmptyIsoCountryCode = Swift.String
    public typealias PasswordString = Swift.String
    public typealias NonEmptyStringWith255MaxLength = Swift.String
    public typealias NonEmptyBase58StringWith100MaxLength = Swift.String
    public typealias NonEmptyStringWith4096MaxLength = Swift.String
    @frozen public enum ThresholdSignatureScheme : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case twoOfTwo
      case twoOfThree
      case threeOfFive
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias OptionalBase58StringWith100MaxLength = Swift.String
    public typealias OptionalNonEmptyString = Swift.String
    public typealias OptionalNonEmptyStringWith255MaxLength = Swift.String
    public typealias OptionalNullableNonEmptyStringWith255MaxLength = Swift.String
    public typealias OptionalNonEmptyStringWith50MaxLength = Swift.String
    public typealias OptionalNonEmptyStringWith50MaxLengthNoSpecialChars = Swift.String
    public typealias OptionalHexString = Swift.String
    public typealias NonEmptyUrl = Swift.String
    public typealias NonEmptyUrlWith255MaxLength = Swift.String
    public typealias HTTPSUrlOrSNSArn = Swift.String
    public typealias OptionalNonEmptyUrl = Swift.String
    public typealias OptionalNonEmptyIconUrl = Swift.String
    public typealias OptionalNonEmptyCssUrl = Swift.String
    public typealias OptionalNonEmptyUrlWithLocalhostAndDeepLink = Swift.String
    public typealias OptionalNonEmptyUrlWith255MaxLength = Swift.String
    public typealias OptionalNonEmptyMarkdownText = Swift.String
    public typealias WalletPublicKey = Swift.String
    public typealias SolanaPublicKey = Swift.String
    public typealias WalletConnectorKey = Swift.String
    public struct JwtVerifiedCredentialHashes : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var blockchain: Swift.String?
      public var email: Swift.String?
      public var oauth: Swift.String?
      public var phoneNumber: Swift.String?
      public var externalUser: Swift.String?
      public init(blockchain: Swift.String? = nil, email: Swift.String? = nil, oauth: Swift.String? = nil, phoneNumber: Swift.String? = nil, externalUser: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case blockchain
        case email
        case oauth
        case phoneNumber
        case externalUser
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes, b: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MinifiedDynamicJwt : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var kid: Swift.String
      public var aud: Swift.String
      public var iss: Swift.String
      public var sub: Swift.String
      public var sid: Swift.String
      public var exp: Swift.Double?
      public var iat: Swift.Double?
      public var environmentId: Swift.String
      public var lastVerifiedCredentialId: Swift.String
      public var scope: Swift.String?
      public var verifiedCredentialsHashes: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes?
      public var email: Swift.String?
      public var username: Swift.String?
      public init(kid: Swift.String, aud: Swift.String, iss: Swift.String, sub: Swift.String, sid: Swift.String, exp: Swift.Double? = nil, iat: Swift.Double? = nil, environmentId: Swift.String, lastVerifiedCredentialId: Swift.String, scope: Swift.String? = nil, verifiedCredentialsHashes: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes? = nil, email: Swift.String? = nil, username: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kid
        case aud
        case iss
        case sub
        case sid
        case exp
        case iat
        case environmentId
        case lastVerifiedCredentialId
        case scope
        case verifiedCredentialsHashes
        case email
        case username
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MinifiedDynamicJwt, b: DynamicSwiftSDK.Components.Schemas.MinifiedDynamicJwt) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct DynamicJwt : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var kid: Swift.String
      public var aud: Swift.String
      public var iss: Swift.String
      public var sub: Swift.String
      public var exp: Swift.Double?
      public var iat: Swift.Double?
      public var sid: Swift.String
      public var alias: Swift.String?
      public var blockchainAccounts: [DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount]?
      public var country: Swift.String?
      public var email: Swift.String?
      public var environmentId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var familyName: Swift.String?
      public var givenName: Swift.String?
      public var jobTitle: Swift.String?
      public var lastAuthenticatedAccountId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var lists: [Swift.String]?
      public var phoneNumber: Swift.String?
      public var missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]
      public var scope: Swift.String?
      public var tShirtSize: Swift.String?
      public var team: Swift.String?
      public var username: Swift.String?
      public var policiesConsent: Swift.Bool?
      public var verifiedAccount: DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount?
      public var verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential]
      public var lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var firstVisit: Swift.String?
      public var lastVisit: Swift.String?
      public var newUser: Swift.Bool?
      public var btcWallet: Swift.String?
      public var kdaWallet: Swift.String?
      public var ltcWallet: Swift.String?
      public var ckbWallet: Swift.String?
      public var kasWallet: Swift.String?
      public var dogeWallet: Swift.String?
      public var emailNotification: Swift.Bool?
      public var discordNotification: Swift.Bool?
      public var newsletterNotification: Swift.Bool?
      public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
      public var verifiedCredentialsHashes: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes?
      public var info: DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo?
      public init(kid: Swift.String, aud: Swift.String, iss: Swift.String, sub: Swift.String, exp: Swift.Double? = nil, iat: Swift.Double? = nil, sid: Swift.String, alias: Swift.String? = nil, blockchainAccounts: [DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount]? = nil, country: Swift.String? = nil, email: Swift.String? = nil, environmentId: DynamicSwiftSDK.Components.Schemas.Uuid, familyName: Swift.String? = nil, givenName: Swift.String? = nil, jobTitle: Swift.String? = nil, lastAuthenticatedAccountId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, lists: [Swift.String]? = nil, phoneNumber: Swift.String? = nil, missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc], scope: Swift.String? = nil, tShirtSize: Swift.String? = nil, team: Swift.String? = nil, username: Swift.String? = nil, policiesConsent: Swift.Bool? = nil, verifiedAccount: DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount? = nil, verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential], lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid, firstVisit: Swift.String? = nil, lastVisit: Swift.String? = nil, newUser: Swift.Bool? = nil, btcWallet: Swift.String? = nil, kdaWallet: Swift.String? = nil, ltcWallet: Swift.String? = nil, ckbWallet: Swift.String? = nil, kasWallet: Swift.String? = nil, dogeWallet: Swift.String? = nil, emailNotification: Swift.Bool? = nil, discordNotification: Swift.Bool? = nil, newsletterNotification: Swift.Bool? = nil, metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil, verifiedCredentialsHashes: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes? = nil, info: DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kid
        case aud
        case iss
        case sub
        case exp
        case iat
        case sid
        case alias
        case blockchainAccounts
        case country
        case email
        case environmentId
        case familyName
        case givenName
        case jobTitle
        case lastAuthenticatedAccountId
        case lists
        case phoneNumber
        case missingFields
        case scope
        case tShirtSize
        case team
        case username
        case policiesConsent
        case verifiedAccount
        case verifiedCredentials
        case lastVerifiedCredentialId
        case firstVisit
        case lastVisit
        case newUser
        case btcWallet
        case kdaWallet
        case ltcWallet
        case ckbWallet
        case kasWallet
        case dogeWallet
        case emailNotification
        case discordNotification
        case newsletterNotification
        case metadata
        case verifiedCredentialsHashes
        case info
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.DynamicJwt, b: DynamicSwiftSDK.Components.Schemas.DynamicJwt) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct JwtPayloadDeprecatedInfo : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var alias: Swift.String?
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum?
      public var email: Swift.String?
      public var ens: DynamicSwiftSDK.Components.Schemas.NameServiceData?
      public var environmentId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var firstName: Swift.String?
      public var jobTitle: Swift.String?
      public var lastName: Swift.String?
      public var lists: [Swift.String]?
      public var phoneNumber: Swift.String?
      public var tShirtSize: Swift.String?
      public var userId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var username: Swift.String?
      public var wallet: Swift.String?
      public var walletPublicKey: DynamicSwiftSDK.Components.Schemas.Uuid?
      public init(alias: Swift.String? = nil, chain: DynamicSwiftSDK.Components.Schemas.ChainEnum? = nil, email: Swift.String? = nil, ens: DynamicSwiftSDK.Components.Schemas.NameServiceData? = nil, environmentId: DynamicSwiftSDK.Components.Schemas.Uuid, firstName: Swift.String? = nil, jobTitle: Swift.String? = nil, lastName: Swift.String? = nil, lists: [Swift.String]? = nil, phoneNumber: Swift.String? = nil, tShirtSize: Swift.String? = nil, userId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, username: Swift.String? = nil, wallet: Swift.String? = nil, walletPublicKey: DynamicSwiftSDK.Components.Schemas.Uuid? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case alias
        case chain
        case email
        case ens
        case environmentId
        case firstName
        case jobTitle
        case lastName
        case lists
        case phoneNumber
        case tShirtSize
        case userId
        case username
        case wallet
        case walletPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo, b: DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum JwtVerifiedCredentialFormatEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case blockchain
      case email
      case oauth
      case passkey
      case phoneNumber
      case externalUser
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct JwtVerifiedCredential : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey?
      public var chain: Swift.String?
      public var refId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var signerRefId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var email: Swift.String?
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var nameService: DynamicSwiftSDK.Components.Schemas.NameServiceData?
      public var publicIdentifier: Swift.String?
      public var walletName: Swift.String?
      public var walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum?
      public var walletProperties: DynamicSwiftSDK.Components.Schemas.WalletProperties?
      public var format: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum
      public var oauthProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public var oauthUsername: Swift.String?
      public var oauthDisplayName: Swift.String?
      public var oauthAccountId: Swift.String?
      public var phoneNumber: Swift.String?
      public var phoneCountryCode: Swift.String?
      public var isoCountryCode: Swift.String?
      public var oauthAccountPhotos: [Swift.String]?
      public var oauthEmails: [Swift.String]?
      public var oauthMetadata: OpenAPIRuntime.OpenAPIObjectContainer?
      public var previousUsers: [DynamicSwiftSDK.Components.Schemas.Uuid]?
      public var embeddedWalletId: Swift.String?
      public var walletAdditionalAddresses: [DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress]?
      public var lastSelectedAt: Swift.String?
      public var signInEnabled: Swift.Bool
      public init(address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey? = nil, chain: Swift.String? = nil, refId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, signerRefId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, email: Swift.String? = nil, id: DynamicSwiftSDK.Components.Schemas.Uuid, nameService: DynamicSwiftSDK.Components.Schemas.NameServiceData? = nil, publicIdentifier: Swift.String? = nil, walletName: Swift.String? = nil, walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum? = nil, walletProperties: DynamicSwiftSDK.Components.Schemas.WalletProperties? = nil, format: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum, oauthProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil, oauthUsername: Swift.String? = nil, oauthDisplayName: Swift.String? = nil, oauthAccountId: Swift.String? = nil, phoneNumber: Swift.String? = nil, phoneCountryCode: Swift.String? = nil, isoCountryCode: Swift.String? = nil, oauthAccountPhotos: [Swift.String]? = nil, oauthEmails: [Swift.String]? = nil, oauthMetadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil, previousUsers: [DynamicSwiftSDK.Components.Schemas.Uuid]? = nil, embeddedWalletId: Swift.String? = nil, walletAdditionalAddresses: [DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress]? = nil, lastSelectedAt: Swift.String? = nil, signInEnabled: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case chain
        case refId
        case signerRefId
        case email
        case id
        case nameService
        case publicIdentifier
        case walletName
        case walletProvider
        case walletProperties
        case format
        case oauthProvider
        case oauthUsername
        case oauthDisplayName
        case oauthAccountId
        case phoneNumber
        case phoneCountryCode
        case isoCountryCode
        case oauthAccountPhotos
        case oauthEmails
        case oauthMetadata
        case previousUsers
        case embeddedWalletId
        case walletAdditionalAddresses
        case lastSelectedAt
        case signInEnabled
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential, b: DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct JwtBlockchainAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var chain: Swift.String
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var nameService: DynamicSwiftSDK.Components.Schemas.NameServiceData?
      public var walletName: Swift.String
      public var walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum
      public init(address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, chain: Swift.String, id: DynamicSwiftSDK.Components.Schemas.Uuid, nameService: DynamicSwiftSDK.Components.Schemas.NameServiceData? = nil, walletName: Swift.String, walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case chain
        case id
        case nameService
        case walletName
        case walletProvider
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount, b: DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NameServiceData : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var avatar: Swift.String?
      public var name: Swift.String?
      public init(avatar: Swift.String? = nil, name: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case avatar
        case name
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NameServiceData, b: DynamicSwiftSDK.Components.Schemas.NameServiceData) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct JwksResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var keys: [DynamicSwiftSDK.Components.Schemas.JwksKey]
      public init(keys: [DynamicSwiftSDK.Components.Schemas.JwksKey])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case keys
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwksResponse, b: DynamicSwiftSDK.Components.Schemas.JwksResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct JwksKey : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var kid: Swift.String?
      public var alg: Swift.String?
      public var kty: Swift.String?
      public var use: Swift.String?
      public var e: Swift.String?
      public var n: Swift.String?
      public init(kid: Swift.String? = nil, alg: Swift.String? = nil, kty: Swift.String? = nil, use: Swift.String? = nil, e: Swift.String? = nil, n: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case kid
        case alg
        case kty
        case use
        case e
        case n
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.JwksKey, b: DynamicSwiftSDK.Components.Schemas.JwksKey) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias EncodedJwt = Swift.String
    public struct VerifyResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var mfaToken: Swift.String?
      public var jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var user: DynamicSwiftSDK.Components.Schemas.SdkUser
      public var minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var expiresAt: Swift.Double
      public init(mfaToken: Swift.String? = nil, jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, user: DynamicSwiftSDK.Components.Schemas.SdkUser, minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, expiresAt: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaToken
        case jwt
        case user
        case minifiedJwt
        case expiresAt
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.VerifyResponse, b: DynamicSwiftSDK.Components.Schemas.VerifyResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmailVerificationCreateResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var email: Swift.String
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, email: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case email
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse, b: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmsVerificationCreateResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var phoneNumber: Swift.String
      public var phoneCountryCode: Swift.String
      public var isoCountryCode: Swift.String
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, phoneNumber: Swift.String, phoneCountryCode: Swift.String, isoCountryCode: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case phoneNumber
        case phoneCountryCode
        case isoCountryCode
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse, b: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NonceResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var nonce: Swift.String?
      public init(nonce: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case nonce
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NonceResponse, b: DynamicSwiftSDK.Components.Schemas.NonceResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BadRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BadRequest, b: DynamicSwiftSDK.Components.Schemas.BadRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Unauthorized : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Unauthorized, b: DynamicSwiftSDK.Components.Schemas.Unauthorized) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Forbidden : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Forbidden, b: DynamicSwiftSDK.Components.Schemas.Forbidden) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UnprocessableEntity : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String
      public var code: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode?
      public var payload: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload?
      public init(error: Swift.String, code: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode? = nil, payload: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        case code
        case payload
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UnprocessableEntity, b: DynamicSwiftSDK.Components.Schemas.UnprocessableEntity) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TooManyRequests : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TooManyRequests, b: DynamicSwiftSDK.Components.Schemas.TooManyRequests) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NotFound : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String
      public var code: Swift.String
      public init(error: Swift.String, code: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        case code
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NotFound, b: DynamicSwiftSDK.Components.Schemas.NotFound) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UnprocessableEntityErrorPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var email: Swift.String?
      public var loginProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public var embeddedWalletName: Swift.String?
      public var embeddedSocialSigninProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public var mergeConflicts: DynamicSwiftSDK.Components.Schemas.MergeConflicts?
      public var additionalMessages: [Swift.String]?
      public init(email: Swift.String? = nil, loginProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil, embeddedWalletName: Swift.String? = nil, embeddedSocialSigninProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil, mergeConflicts: DynamicSwiftSDK.Components.Schemas.MergeConflicts? = nil, additionalMessages: [Swift.String]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case email
        case loginProvider
        case embeddedWalletName
        case embeddedSocialSigninProvider
        case mergeConflicts
        case additionalMessages
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload, b: DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MergeConflicts : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var fromUser: DynamicSwiftSDK.Components.Schemas.SdkUser
      public var conflicts: [DynamicSwiftSDK.Components.Schemas.MergeUserConflict]
      public init(fromUser: DynamicSwiftSDK.Components.Schemas.SdkUser, conflicts: [DynamicSwiftSDK.Components.Schemas.MergeUserConflict])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case fromUser
        case conflicts
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MergeConflicts, b: DynamicSwiftSDK.Components.Schemas.MergeConflicts) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MergeUserConflict : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var field: DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc
      public var fromUser: DynamicSwiftSDK.Components.Schemas.MergeUser
      public var currentUser: DynamicSwiftSDK.Components.Schemas.MergeUser
      public init(field: DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc, fromUser: DynamicSwiftSDK.Components.Schemas.MergeUser, currentUser: DynamicSwiftSDK.Components.Schemas.MergeUser)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case field
        case fromUser
        case currentUser
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MergeUserConflict, b: DynamicSwiftSDK.Components.Schemas.MergeUserConflict) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MergeUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var userId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public init(userId: DynamicSwiftSDK.Components.Schemas.Uuid, value: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case userId
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MergeUser, b: DynamicSwiftSDK.Components.Schemas.MergeUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MergeUserConflictResolutions : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var mergeUserResolutions: [DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution]?
      public init(mergeUserResolutions: [DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mergeUserResolutions
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions, b: DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MergeUserConflictResolution : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var userId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var fieldKey: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var _type: DynamicSwiftSDK.Components.Schemas.KycFieldType
      public init(userId: DynamicSwiftSDK.Components.Schemas.Uuid, fieldKey: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, _type: DynamicSwiftSDK.Components.Schemas.KycFieldType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case userId
        case fieldKey
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution, b: DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum UnprocessableEntityErrorCode : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case emailAlreadyExists
      case allowlistAlreadyExists
      case allowlistEntryAlreadyExists
      case reassignWalletError
      case reassignWalletConfirm
      case membersCannotDeleteThemself
      case usernameAlreadyExists
      case wrongEmailVerificationToken
      case wrongSmsVerificationToken
      case invalidEmailVerification
      case invalidSmsVerification
      case invalidVerification
      case invalidPosition
      case tooManySmsVerificationAttempts
      case tooManyEmailVerificationAttempts
      case tooManyVerificationAttempts
      case organizationNameAlreadyExists
      case projectNameAlreadyExists
      case walletNotDeployed
      case emailVerificationRequired
      case phoneVerificationRequired
      case inviteAddressRequired
      case providerNotAvailable
      case forbiddenUnlinkRequest
      case invalidUnlinkRequest
      case tooManyApiTokens
      case lockTimeout
      case lockTooManyAttempts
      case nftTokenGatingNotSupportedForChain
      case emptyChainName
      case noEnabledEmailProvider
      case noEnabledSmsProvider
      case invalidKeyExportUrl
      case invalidDynamicProps
      case tooManyRequests
      case tooManyOrganizationsForUser
      case tooManyProjectsForOrganization
      case emailAssociatedWithDifferentProvider
      case userHasAlreadyAccountWithEmail
      case userHasAlreadyAccountWithPhoneNumber
      case otherVerifyFailure
      case emailTiedToEmbeddedWallet
      case invalidInvite
      case socialAccountAlreadyExists
      case invalidEmailAddress
      case invalidGate
      case conflictingEmbeddedWalletProviders
      case invalidUser
      case invalidCorsOrigins
      case invalidMobileDeeplinkUrls
      case unauthorizedMobileDeeplinkUrl
      case invalidPrivateKeyFormat
      case invalidEmbeddedWalletSettings
      case walletNotSupportPasskey
      case recoveryEmailUnavailableOrInvalid
      case connectError
      case invalidWalletName
      case invalidWalletAddress
      case emailRecoveryDisabled
      case noCompatibleWalletServiceEnabled
      case missingAaProjectId
      case linkedEmbeddedWallet
      case invalidMpcEnvironment
      case invalidRegex
      case repeatedOptions
      case missingPhoneNumberOrEmail
      case duplicateExists
      case mfaDeviceNotFound
      case mfaInvalidCode
      case mfaInvalidRequest
      case invalidPhone
      case gateExists
      case invalidEmbeddedWalletChainsConfiguration
      case mergeAccountsConfirmation
      case mergeAccountsInvalid
      case invalidWalletId
      case unableToFetchBalances
      case cannotSwitchToUnique
      case customFieldDataNotUnique
      case metadataSizeExceeded
      case invalidCustomHostname
      case blockedUserCannotTransferWallet
      case featureNotEnabledInSuborg
      case invalidUsername
      case invalidExternalAuth
      case invalidChainAddressMatch
      case invalidUpdate
      case cannotDeleteLastProject
      case noHdWalletFound
      case walletAccountExistsForChain
      case tooManyEmbeddedWalletsForUser
      case tooManyEmbeddedWalletsPerChainForUser
      case invalidSessionPublicKey
      case customFieldNotUnique
      case invalidAaProjectConfiguration
      case noV1EmbeddedWalletFound
      case embeddedWalletAddressAlreadyLinked
      case keyShareAlreadyBackedUp
      case invalidKeySharesLength
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ForbiddenWithErrorAndPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode?
      public var payload: DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload?
      public init(error: DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode? = nil, payload: DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        case payload
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload, b: DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ForbiddenErrorPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletPublicKey: DynamicSwiftSDK.Components.Schemas.WalletPublicKey?
      public var email: Swift.String?
      public init(walletPublicKey: DynamicSwiftSDK.Components.Schemas.WalletPublicKey? = nil, email: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletPublicKey
        case email
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload, b: DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ErrorMessageWithCode : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var code: Swift.String?
      public var message: Swift.String?
      public init(code: Swift.String? = nil, message: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case code
        case message
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode, b: DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MethodNotAllowed : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MethodNotAllowed, b: DynamicSwiftSDK.Components.Schemas.MethodNotAllowed) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InternalServerError : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String?
      public init(error: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.InternalServerError, b: DynamicSwiftSDK.Components.Schemas.InternalServerError) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BadGateway : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var error: Swift.String
      public init(error: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case error
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BadGateway, b: DynamicSwiftSDK.Components.Schemas.BadGateway) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var environmentName: DynamicSwiftSDK.Components.Schemas.EnvironmentEnum?
      public var chains: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains]
      public var customFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]?
      public var kyc: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]
      public var design: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign
      public var general: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral
      public var privacy: DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy
      public var providers: [DynamicSwiftSDK.Components.Schemas.Provider]?
      public var sdk: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk
      public var security: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity
      public var networks: [DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse]?
      public init(environmentName: DynamicSwiftSDK.Components.Schemas.EnvironmentEnum? = nil, chains: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains], customFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]? = nil, kyc: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc], design: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign, general: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral, privacy: DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy, providers: [DynamicSwiftSDK.Components.Schemas.Provider]? = nil, sdk: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk, security: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity, networks: [DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case environmentName
        case chains
        case customFields
        case kyc
        case design
        case general
        case privacy
        case providers
        case sdk
        case security
        case networks
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettings, b: DynamicSwiftSDK.Components.Schemas.ProjectSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Provider : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum
      public var enabledAt: Swift.String?
      public var clientId: Swift.String?
      public var clientSecret: Swift.String?
      public var providerProjectId: Swift.String?
      public var authorizationUrl: Swift.String?
      public var redirectUrl: Swift.String?
      public var defaultChainId: Swift.Int?
      public var defaultChain: DynamicSwiftSDK.Components.Schemas.Caip2?
      public var keyExportUrl: Swift.String?
      public var termsAcceptedByUser: DynamicSwiftSDK.Components.Schemas.ProviderAgreement?
      public var scopes: Swift.String?
      public var baseAuthUrl: Swift.String?
      public var appleKeyId: Swift.String?
      public var appleTeamId: Swift.String?
      public var shopifyStore: Swift.String?
      public var accountSid: Swift.String?
      public var twilioNumber: Swift.String?
      public var enabledCountries: [DynamicSwiftSDK.Components.Schemas.SmsCountryCode]?
      public var entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum?
      public var kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum?
      public var factoryAddress: Swift.String?
      public var paymasterAddress: Swift.String?
      public var passkeyAddress: Swift.String?
      public var sessionAddress: Swift.String?
      public var salt: Swift.String?
      public struct MultichainAccountAbstractionProvidersPayloadPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var clientId: Swift.String
        public var chain: Swift.String
        public var _default: Swift.Bool?
        public init(clientId: Swift.String, chain: Swift.String, _default: Swift.Bool? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case clientId
          case chain
          case _default
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload, b: DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public typealias MultichainAccountAbstractionProvidersPayload = [DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload]
      public var multichainAccountAbstractionProviders: DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayload?
      public var ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions?
      public var createNewAccounts: Swift.Bool?
      public var enableKernelV3Migration: Swift.Bool?
      public var enableEIP7702: Swift.Bool?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum, enabledAt: Swift.String? = nil, clientId: Swift.String? = nil, clientSecret: Swift.String? = nil, providerProjectId: Swift.String? = nil, authorizationUrl: Swift.String? = nil, redirectUrl: Swift.String? = nil, defaultChainId: Swift.Int? = nil, defaultChain: DynamicSwiftSDK.Components.Schemas.Caip2? = nil, keyExportUrl: Swift.String? = nil, termsAcceptedByUser: DynamicSwiftSDK.Components.Schemas.ProviderAgreement? = nil, scopes: Swift.String? = nil, baseAuthUrl: Swift.String? = nil, appleKeyId: Swift.String? = nil, appleTeamId: Swift.String? = nil, shopifyStore: Swift.String? = nil, accountSid: Swift.String? = nil, twilioNumber: Swift.String? = nil, enabledCountries: [DynamicSwiftSDK.Components.Schemas.SmsCountryCode]? = nil, entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum? = nil, kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum? = nil, factoryAddress: Swift.String? = nil, paymasterAddress: Swift.String? = nil, passkeyAddress: Swift.String? = nil, sessionAddress: Swift.String? = nil, salt: Swift.String? = nil, multichainAccountAbstractionProviders: DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayload? = nil, ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions? = nil, createNewAccounts: Swift.Bool? = nil, enableKernelV3Migration: Swift.Bool? = nil, enableEIP7702: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case provider
        case enabledAt
        case clientId
        case clientSecret
        case providerProjectId
        case authorizationUrl
        case redirectUrl
        case defaultChainId
        case defaultChain
        case keyExportUrl
        case termsAcceptedByUser
        case scopes
        case baseAuthUrl
        case appleKeyId
        case appleTeamId
        case shopifyStore
        case accountSid
        case twilioNumber
        case enabledCountries
        case entryPointVersion
        case kernelVersion
        case factoryAddress
        case paymasterAddress
        case passkeyAddress
        case sessionAddress
        case salt
        case multichainAccountAbstractionProviders
        case ecdsaProviderType
        case createNewAccounts
        case enableKernelV3Migration
        case enableEIP7702
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Provider, b: DynamicSwiftSDK.Components.Schemas.Provider) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum ProviderEntryPointVersionEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case v6
      case v7
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum ProviderKernelVersionEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case v24
      case v30
      case v31
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ProviderAgreement : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var termsUrl: Swift.String
      public var email: Swift.String
      public var userId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var createdAt: Swift.String
      public init(termsUrl: Swift.String, email: Swift.String, userId: DynamicSwiftSDK.Components.Schemas.Uuid, createdAt: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case termsUrl
        case email
        case userId
        case createdAt
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProviderAgreement, b: DynamicSwiftSDK.Components.Schemas.ProviderAgreement) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum ProviderEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case emailOnly
      case magicLink
      case apple
      case bitbucket
      case coinbasesocial
      case discord
      case epicgames
      case facebook
      case farcaster
      case github
      case gitlab
      case google
      case instagram
      case linkedin
      case microsoft
      case twitch
      case twitter
      case blocto
      case banxa
      case coinbaseOnramp
      case dynamic
      case alchemy
      case zerodev
      case telegram
      case turnkey
      case coinbaseWaas
      case sms
      case spotify
      case tiktok
      case line
      case steam
      case shopify
      case zksync
      case kraken
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ProviderEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ProviderEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum HardwareWalletEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case ledger
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ProjectSettingsSecurity : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var jwtDuration: DynamicSwiftSDK.Components.Schemas.Duration?
      public var hCaptcha: DynamicSwiftSDK.Components.Schemas.HCaptchaSettings?
      public var mfa: DynamicSwiftSDK.Components.Schemas.MFASettings?
      public var auth: DynamicSwiftSDK.Components.Schemas.AuthSettings?
      public var externalAuth: DynamicSwiftSDK.Components.Schemas.ExternalAuth?
      public init(jwtDuration: DynamicSwiftSDK.Components.Schemas.Duration? = nil, hCaptcha: DynamicSwiftSDK.Components.Schemas.HCaptchaSettings? = nil, mfa: DynamicSwiftSDK.Components.Schemas.MFASettings? = nil, auth: DynamicSwiftSDK.Components.Schemas.AuthSettings? = nil, externalAuth: DynamicSwiftSDK.Components.Schemas.ExternalAuth? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case jwtDuration
        case hCaptcha
        case mfa
        case auth
        case externalAuth
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MobileSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var deeplinkUrlsEnabled: Swift.Bool?
      public init(deeplinkUrlsEnabled: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case deeplinkUrlsEnabled
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MobileSettings, b: DynamicSwiftSDK.Components.Schemas.MobileSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AuthSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var storage: [DynamicSwiftSDK.Components.Schemas.AuthStorageEnum]
      public init(storage: [DynamicSwiftSDK.Components.Schemas.AuthStorageEnum])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case storage
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthSettings, b: DynamicSwiftSDK.Components.Schemas.AuthSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ExternalAuth : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var enabled: Swift.Bool?
      public var iss: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var aud: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var jwksUrl: Swift.String?
      public var cookieName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public init(enabled: Swift.Bool? = nil, iss: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, aud: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, jwksUrl: Swift.String? = nil, cookieName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case enabled
        case iss
        case aud
        case jwksUrl
        case cookieName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ExternalAuth, b: DynamicSwiftSDK.Components.Schemas.ExternalAuth) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum AuthStorageEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case localstorage
      case cookie
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.AuthStorageEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.AuthStorageEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct HCaptchaSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var enabled: Swift.Bool?
      public var secretKey: Swift.String?
      public var siteKey: Swift.String?
      public init(enabled: Swift.Bool? = nil, secretKey: Swift.String? = nil, siteKey: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case enabled
        case secretKey
        case siteKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.HCaptchaSettings, b: DynamicSwiftSDK.Components.Schemas.HCaptchaSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Duration : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var amount: Swift.Int
      public var unit: DynamicSwiftSDK.Components.Schemas.TimeUnitEnum
      public init(amount: Swift.Int, unit: DynamicSwiftSDK.Components.Schemas.TimeUnitEnum)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case amount
        case unit
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Duration, b: DynamicSwiftSDK.Components.Schemas.Duration) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum TimeUnitEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case days
      case hours
      case minutes
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.TimeUnitEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.TimeUnitEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ProjectSettingsPrivacy : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var collectIp: Swift.Bool?
      public init(collectIp: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case collectIp
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Funding : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var onramps: [DynamicSwiftSDK.Components.Schemas.OnrampProviders]
      public struct ExternalWalletsPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var enabled: Swift.Bool
        public struct MinAmountPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
          public var amount: Swift.String?
          public var currency: Swift.String?
          public init(amount: Swift.String? = nil, currency: Swift.String? = nil)
          public enum CodingKeys : Swift.String, Swift.CodingKey {
            case amount
            case currency
            public init?(rawValue: Swift.String)
            public init?(stringValue: Swift.String)
            public init?(intValue: Swift.Int)
            public typealias RawValue = Swift.String
            public var intValue: Swift.Int? {
              get
            }
            public var rawValue: Swift.String {
              get
            }
            public var stringValue: Swift.String {
              get
            }
          }
          public static func == (a: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload, b: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload) -> Swift.Bool
          public func encode(to encoder: any Swift.Encoder) throws
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
          public init(from decoder: any Swift.Decoder) throws
        }
        public var minAmount: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload?
        public struct DefaultSettingsPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
          public var chainSettings: [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings]?
          public init(chainSettings: [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings]? = nil)
          public enum CodingKeys : Swift.String, Swift.CodingKey {
            case chainSettings
            public init?(rawValue: Swift.String)
            public init?(stringValue: Swift.String)
            public init?(intValue: Swift.Int)
            public typealias RawValue = Swift.String
            public var intValue: Swift.Int? {
              get
            }
            public var rawValue: Swift.String {
              get
            }
            public var stringValue: Swift.String {
              get
            }
          }
          public static func == (a: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload, b: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload) -> Swift.Bool
          public func encode(to encoder: any Swift.Encoder) throws
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
          public init(from decoder: any Swift.Decoder) throws
        }
        public var defaultSettings: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload?
        public init(enabled: Swift.Bool, minAmount: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload? = nil, defaultSettings: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case enabled
          case minAmount
          case defaultSettings
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload, b: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var externalWallets: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload?
      public init(onramps: [DynamicSwiftSDK.Components.Schemas.OnrampProviders], externalWallets: DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case onramps
        case externalWallets
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Funding, b: DynamicSwiftSDK.Components.Schemas.Funding) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ExternalWalletFundingDefaultSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum?
      public struct TokenPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var value: Swift.String?
        public var rule: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule?
        public init(value: Swift.String? = nil, rule: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case value
          case rule
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload, b: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var token: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload?
      public init(chain: DynamicSwiftSDK.Components.Schemas.ChainEnum? = nil, token: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chain
        case token
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings, b: DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum ExternalWalletFundingTokenRule : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case recommended
      case exact
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum ExternalWalletFundingDefaultChain : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case ethereum
      case solana
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultChain]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultChain] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum OnrampProviders : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case banxa
      case coinbaseOnramp
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.OnrampProviders]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.OnrampProviders] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct ProjectSettingsGeneral : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var displayName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyString?
      public var supportEmail: Swift.String?
      public var supportText: Swift.String?
      public var appLogo: Swift.String?
      public var imageUserNotInAccessList: Swift.String?
      public var imageUserInAccessList: Swift.String?
      public var supportUrls: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneralApps?
      public var collectUserDataWelcomeHeader: Swift.String?
      public var collectUserDataWelcomeMessage: Swift.String?
      public var skipOptionalKYCFieldDuringOnboarding: Swift.Bool?
      public var emailCompanyName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyString?
      public init(displayName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyString? = nil, supportEmail: Swift.String? = nil, supportText: Swift.String? = nil, appLogo: Swift.String? = nil, imageUserNotInAccessList: Swift.String? = nil, imageUserInAccessList: Swift.String? = nil, supportUrls: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneralApps? = nil, collectUserDataWelcomeHeader: Swift.String? = nil, collectUserDataWelcomeMessage: Swift.String? = nil, skipOptionalKYCFieldDuringOnboarding: Swift.Bool? = nil, emailCompanyName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case displayName
        case supportEmail
        case supportText
        case appLogo
        case imageUserNotInAccessList
        case imageUserInAccessList
        case supportUrls
        case collectUserDataWelcomeHeader
        case collectUserDataWelcomeMessage
        case skipOptionalKYCFieldDuringOnboarding
        case emailCompanyName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsGeneralApps : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var additionalProperties: [Swift.String : Swift.String?]
      public init(additionalProperties: [Swift.String : Swift.String?] = .init())
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneralApps, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneralApps) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct FeatureFlags : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var connectOnlyMultiAsset: Swift.Bool
      public init(connectOnlyMultiAsset: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case connectOnlyMultiAsset
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.FeatureFlags, b: DynamicSwiftSDK.Components.Schemas.FeatureFlags) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NameServiceSdkSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public struct EvmPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var domain: Swift.String?
        public init(domain: Swift.String? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case domain
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload, b: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var evm: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload
      public init(evm: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case evm
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings, b: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsSdk : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var nameService: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings?
      public var featureFlags: DynamicSwiftSDK.Components.Schemas.FeatureFlags?
      public struct EmailSignInPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var signInProvider: DynamicSwiftSDK.Components.Schemas.SignInProviderEnum?
        public init(signInProvider: DynamicSwiftSDK.Components.Schemas.SignInProviderEnum? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case signInProvider
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var emailSignIn: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload?
      public struct SocialSignInPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var signInProvider: DynamicSwiftSDK.Components.Schemas.SignInProviderEnum?
        public var providers: [DynamicSwiftSDK.Components.Schemas.SocialSignInProvider]?
        public init(signInProvider: DynamicSwiftSDK.Components.Schemas.SignInProviderEnum? = nil, providers: [DynamicSwiftSDK.Components.Schemas.SocialSignInProvider]? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case signInProvider
          case providers
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var socialSignIn: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload?
      public var multiWallet: Swift.Bool?
      public var multiWalletUnlinkDisabled: Swift.Bool?
      public var mobile: DynamicSwiftSDK.Components.Schemas.MobileSettings?
      public var confirmWalletTransfers: Swift.Bool?
      public var onrampFunding: Swift.Bool?
      @available(*, deprecated)
      public var passkeyEmbeddedWalletEnabled: Swift.Bool?
      public var automaticEmbeddedWalletCreation: Swift.Bool?
      public var passkeyEmbeddedWalletRecoveryEnabled: Swift.Bool?
      public var embeddedWalletSecurityMethods: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod]?
      public struct EmbeddedWalletsPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var automaticEmbeddedWalletCreation: Swift.Bool?
        public var automaticEmbeddedWalletCreationForExternal: Swift.Bool?
        public var showEmbeddedWalletActionsUI: Swift.Bool?
        public var emailRecoveryEnabled: Swift.Bool?
        public var forceAuthenticatorAtSignup: Swift.Bool?
        public var allowSkippingAuthenticatorAtSignup: Swift.Bool?
        public var sessionKeyDuration: DynamicSwiftSDK.Components.Schemas.Duration?
        public var supportedSecurityMethods: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods?
        public var chainConfigurations: DynamicSwiftSDK.Components.Schemas.ChainConfigurations?
        public var domainEnabledByProvider: Swift.Bool?
        public var defaultWalletVersion: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum?
        public var promptForKeyExport: Swift.Bool?
        public var transactionSimulation: Swift.Bool?
        public init(automaticEmbeddedWalletCreation: Swift.Bool? = nil, automaticEmbeddedWalletCreationForExternal: Swift.Bool? = nil, showEmbeddedWalletActionsUI: Swift.Bool? = nil, emailRecoveryEnabled: Swift.Bool? = nil, forceAuthenticatorAtSignup: Swift.Bool? = nil, allowSkippingAuthenticatorAtSignup: Swift.Bool? = nil, sessionKeyDuration: DynamicSwiftSDK.Components.Schemas.Duration? = nil, supportedSecurityMethods: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods? = nil, chainConfigurations: DynamicSwiftSDK.Components.Schemas.ChainConfigurations? = nil, domainEnabledByProvider: Swift.Bool? = nil, defaultWalletVersion: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum? = nil, promptForKeyExport: Swift.Bool? = nil, transactionSimulation: Swift.Bool? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case automaticEmbeddedWalletCreation
          case automaticEmbeddedWalletCreationForExternal
          case showEmbeddedWalletActionsUI
          case emailRecoveryEnabled
          case forceAuthenticatorAtSignup
          case allowSkippingAuthenticatorAtSignup
          case sessionKeyDuration
          case supportedSecurityMethods
          case chainConfigurations
          case domainEnabledByProvider
          case defaultWalletVersion
          case promptForKeyExport
          case transactionSimulation
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var embeddedWallets: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload?
      public struct WaasPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var passcodeRequired: Swift.Bool
        public struct OnSignUpPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
          public var promptBackupOptions: Swift.Bool
          public var promptClientShareExport: Swift.Bool
          public init(promptBackupOptions: Swift.Bool, promptClientShareExport: Swift.Bool)
          public enum CodingKeys : Swift.String, Swift.CodingKey {
            case promptBackupOptions
            case promptClientShareExport
            public init?(rawValue: Swift.String)
            public init?(stringValue: Swift.String)
            public init?(intValue: Swift.Int)
            public typealias RawValue = Swift.String
            public var intValue: Swift.Int? {
              get
            }
            public var rawValue: Swift.String {
              get
            }
            public var stringValue: Swift.String {
              get
            }
          }
          public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload) -> Swift.Bool
          public func encode(to encoder: any Swift.Encoder) throws
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
          public init(from decoder: any Swift.Decoder) throws
        }
        public var onSignUp: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload
        public var backupOptions: [DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum]
        public var relayUrl: Swift.String?
        public init(passcodeRequired: Swift.Bool, onSignUp: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload, backupOptions: [DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum], relayUrl: Swift.String? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case passcodeRequired
          case onSignUp
          case backupOptions
          case relayUrl
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var waas: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload?
      public struct WalletConnectPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var projectId: Swift.String?
        public var v2Enabled: Swift.Bool?
        public var walletProjectId: Swift.String?
        public init(projectId: Swift.String? = nil, v2Enabled: Swift.Bool? = nil, walletProjectId: Swift.String? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case projectId
          case v2Enabled
          case walletProjectId
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var walletConnect: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload?
      public var confirmEmailProviderForVerify: Swift.Bool?
      public var displayDynamicMessaging: Swift.Bool?
      public var hideNetworkInDynamicWidget: Swift.Bool?
      public var preventOrphanedAccounts: Swift.Bool?
      public var views: [DynamicSwiftSDK.Components.Schemas.SdkView]?
      public struct AccountAbstractionPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var allWallets: Swift.Bool?
        public var allUsers: Swift.Bool?
        public var separateSmartWalletAndSigner: Swift.Bool?
        public var enablePasskeys: Swift.Bool?
        public init(allWallets: Swift.Bool? = nil, allUsers: Swift.Bool? = nil, separateSmartWalletAndSigner: Swift.Bool? = nil, enablePasskeys: Swift.Bool? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case allWallets
          case allUsers
          case separateSmartWalletAndSigner
          case enablePasskeys
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var accountAbstraction: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload?
      public var blockEmailSubaddresses: Swift.Bool?
      public var enableMultiAsset: Swift.Bool?
      public var showFiat: Swift.Bool?
      public var disabledWalletConnectors: [DynamicSwiftSDK.Components.Schemas.WalletConnectorKey]?
      public var funding: DynamicSwiftSDK.Components.Schemas.Funding?
      public init(nameService: DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings? = nil, featureFlags: DynamicSwiftSDK.Components.Schemas.FeatureFlags? = nil, emailSignIn: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload? = nil, socialSignIn: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload? = nil, multiWallet: Swift.Bool? = nil, multiWalletUnlinkDisabled: Swift.Bool? = nil, mobile: DynamicSwiftSDK.Components.Schemas.MobileSettings? = nil, confirmWalletTransfers: Swift.Bool? = nil, onrampFunding: Swift.Bool? = nil, passkeyEmbeddedWalletEnabled: Swift.Bool? = nil, automaticEmbeddedWalletCreation: Swift.Bool? = nil, passkeyEmbeddedWalletRecoveryEnabled: Swift.Bool? = nil, embeddedWalletSecurityMethods: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod]? = nil, embeddedWallets: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload? = nil, waas: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload? = nil, walletConnect: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload? = nil, confirmEmailProviderForVerify: Swift.Bool? = nil, displayDynamicMessaging: Swift.Bool? = nil, hideNetworkInDynamicWidget: Swift.Bool? = nil, preventOrphanedAccounts: Swift.Bool? = nil, views: [DynamicSwiftSDK.Components.Schemas.SdkView]? = nil, accountAbstraction: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload? = nil, blockEmailSubaddresses: Swift.Bool? = nil, enableMultiAsset: Swift.Bool? = nil, showFiat: Swift.Bool? = nil, disabledWalletConnectors: [DynamicSwiftSDK.Components.Schemas.WalletConnectorKey]? = nil, funding: DynamicSwiftSDK.Components.Schemas.Funding? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case nameService
        case featureFlags
        case emailSignIn
        case socialSignIn
        case multiWallet
        case multiWalletUnlinkDisabled
        case mobile
        case confirmWalletTransfers
        case onrampFunding
        case passkeyEmbeddedWalletEnabled
        case automaticEmbeddedWalletCreation
        case passkeyEmbeddedWalletRecoveryEnabled
        case embeddedWalletSecurityMethods
        case embeddedWallets
        case waas
        case walletConnect
        case confirmEmailProviderForVerify
        case displayDynamicMessaging
        case hideNetworkInDynamicWidget
        case preventOrphanedAccounts
        case views
        case accountAbstraction
        case blockEmailSubaddresses
        case enableMultiAsset
        case showFiat
        case disabledWalletConnectors
        case funding
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum EmbeddedWalletSecurityMethod : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case passkey
      case passphrase
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public typealias ChainConfigurations = [DynamicSwiftSDK.Components.Schemas.ChainConfiguration]
    public struct ChainConfiguration : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var enabled: Swift.Bool
      public var primary: Swift.Bool
      public init(name: Swift.String, enabled: Swift.Bool, primary: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case enabled
        case primary
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ChainConfiguration, b: DynamicSwiftSDK.Components.Schemas.ChainConfiguration) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SupportedSecurityMethods : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var passkey: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod?
      public var email: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod?
      public var password: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod?
      public init(passkey: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod? = nil, email: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod? = nil, password: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case passkey
        case email
        case password
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods, b: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SupportedSecurityMethod : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var isDefault: Swift.Bool
      public var isEnabled: Swift.Bool
      public var isPermanentAuthenticator: Swift.Bool
      public var listPosition: Swift.Double
      public init(isDefault: Swift.Bool, isEnabled: Swift.Bool, isPermanentAuthenticator: Swift.Bool, listPosition: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case isDefault
        case isEnabled
        case isPermanentAuthenticator
        case listPosition
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod, b: DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SdkSettingsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var dynamicContextProps: OpenAPIRuntime.OpenAPIObjectContainer?
      public var dynamicWagmiSettings: OpenAPIRuntime.OpenAPIObjectContainer?
      public var frameworkSettings: DynamicSwiftSDK.Components.Schemas.FrameworkSettings?
      public init(dynamicContextProps: OpenAPIRuntime.OpenAPIObjectContainer? = nil, dynamicWagmiSettings: OpenAPIRuntime.OpenAPIObjectContainer? = nil, frameworkSettings: DynamicSwiftSDK.Components.Schemas.FrameworkSettings? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case dynamicContextProps
        case dynamicWagmiSettings
        case frameworkSettings
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest, b: DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct FrameworkSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var react: DynamicSwiftSDK.Components.Schemas.ReactSettings?
      public var nextjs: DynamicSwiftSDK.Components.Schemas.NextJsSettings?
      public init(react: DynamicSwiftSDK.Components.Schemas.ReactSettings? = nil, nextjs: DynamicSwiftSDK.Components.Schemas.NextJsSettings? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case react
        case nextjs
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.FrameworkSettings, b: DynamicSwiftSDK.Components.Schemas.FrameworkSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReactSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var version: Swift.String?
      public init(version: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case version
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ReactSettings, b: DynamicSwiftSDK.Components.Schemas.ReactSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NextJsSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var version: Swift.String?
      public init(version: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case version
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NextJsSettings, b: DynamicSwiftSDK.Components.Schemas.NextJsSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsDesign : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var modal: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal?
      public var button: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton?
      public var widget: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget?
      public init(modal: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal? = nil, button: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton? = nil, widget: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case modal
        case button
        case widget
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsDesignModal : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var border: Swift.String?
      public var brand: Swift.String?
      public var primaryColor: Swift.String?
      public var radius: Swift.Int?
      public var theme: Swift.String?
      public var view: Swift.String?
      public var template: Swift.String?
      public var displayOrder: [Swift.String]?
      public var emailOnly: Swift.Bool?
      public var showWalletsButton: Swift.Bool?
      public var emailSubmitButtonInsideInput: Swift.Bool?
      public var splitEmailAndSocial: Swift.Bool?
      public var socialAboveEmail: Swift.Bool?
      public init(border: Swift.String? = nil, brand: Swift.String? = nil, primaryColor: Swift.String? = nil, radius: Swift.Int? = nil, theme: Swift.String? = nil, view: Swift.String? = nil, template: Swift.String? = nil, displayOrder: [Swift.String]? = nil, emailOnly: Swift.Bool? = nil, showWalletsButton: Swift.Bool? = nil, emailSubmitButtonInsideInput: Swift.Bool? = nil, splitEmailAndSocial: Swift.Bool? = nil, socialAboveEmail: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case border
        case brand
        case primaryColor
        case radius
        case theme
        case view
        case template
        case displayOrder
        case emailOnly
        case showWalletsButton
        case emailSubmitButtonInsideInput
        case splitEmailAndSocial
        case socialAboveEmail
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsDesignButton : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var background: Swift.String?
      public var fontColor: Swift.String?
      public var paddingHeight: Swift.Int?
      public var paddingWidth: Swift.Int?
      public var radius: Swift.Int?
      public init(background: Swift.String? = nil, fontColor: Swift.String? = nil, paddingHeight: Swift.Int? = nil, paddingWidth: Swift.Int? = nil, radius: Swift.Int? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case background
        case fontColor
        case paddingHeight
        case paddingWidth
        case radius
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsDesignWidget : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var backgroundColor: Swift.String?
      public var border: Swift.String?
      public var radius: Swift.Int?
      public var textColor: Swift.String?
      public var theme: Swift.String?
      public init(backgroundColor: Swift.String? = nil, border: Swift.String? = nil, radius: Swift.Int? = nil, textColor: Swift.String? = nil, theme: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case backgroundColor
        case border
        case radius
        case textColor
        case theme
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsChains : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var enabled: Swift.Bool
      public var networks: [DynamicSwiftSDK.Components.Schemas.Network]?
      public init(name: Swift.String, enabled: Swift.Bool, networks: [DynamicSwiftSDK.Components.Schemas.Network]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case enabled
        case networks
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ProjectSettingsKyc : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var required: Swift.Bool
      public var enabled: Swift.Bool
      public var unique: Swift.Bool
      public var verify: Swift.Bool
      public var _type: DynamicSwiftSDK.Components.Schemas.KycFieldType?
      public var validationRules: DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules?
      public var validationType: DynamicSwiftSDK.Components.Schemas.CustomFieldType?
      public var label: Swift.String?
      public var position: Swift.Double?
      public init(name: Swift.String, required: Swift.Bool, enabled: Swift.Bool, unique: Swift.Bool, verify: Swift.Bool, _type: DynamicSwiftSDK.Components.Schemas.KycFieldType? = nil, validationRules: DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules? = nil, validationType: DynamicSwiftSDK.Components.Schemas.CustomFieldType? = nil, label: Swift.String? = nil, position: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case required
        case enabled
        case unique
        case verify
        case _type
        case validationRules
        case validationType
        case label
        case position
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc, b: DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct IntegrationSetting : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var required: Swift.Bool?
      public var enabled: Swift.Bool
      public init(name: Swift.String, required: Swift.Bool? = nil, enabled: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case required
        case enabled
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.IntegrationSetting, b: DynamicSwiftSDK.Components.Schemas.IntegrationSetting) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct VerifyUnlinkRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var verifiedCrentialId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var primaryWalletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, verifiedCrentialId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, primaryWalletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case verifiedCrentialId
        case primaryWalletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest, b: DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PrefetchRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum
      public var publicWalletAddress: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public init(chain: DynamicSwiftSDK.Components.Schemas.ChainEnum, publicWalletAddress: DynamicSwiftSDK.Components.Schemas.WalletPublicKey)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chain
        case publicWalletAddress
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PrefetchRequest, b: DynamicSwiftSDK.Components.Schemas.PrefetchRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ConnectRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum
      public var provider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum
      public var walletName: Swift.String
      public var authMode: DynamicSwiftSDK.Components.Schemas.AuthModeEnum?
      public init(address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, chain: DynamicSwiftSDK.Components.Schemas.ChainEnum, provider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum, walletName: Swift.String, authMode: DynamicSwiftSDK.Components.Schemas.AuthModeEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case chain
        case provider
        case walletName
        case authMode
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ConnectRequest, b: DynamicSwiftSDK.Components.Schemas.ConnectRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum AuthModeEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case connectOnly
      case connectAndSign
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.AuthModeEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.AuthModeEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct FarcasterSignInRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var address: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var nonce: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var message: Swift.String
      public var signature: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var captchaToken: Swift.String?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(address: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, domain: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, nonce: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, message: Swift.String, signature: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, captchaToken: Swift.String? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case domain
        case nonce
        case message
        case signature
        case captchaToken
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest, b: DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TelegramUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: Swift.Int
      public var firstName: Swift.String?
      public var lastName: Swift.String?
      public var hash: Swift.String
      public var photoURL: Swift.String?
      public var username: Swift.String?
      public var authDate: Swift.String
      public init(id: Swift.Int, firstName: Swift.String? = nil, lastName: Swift.String? = nil, hash: Swift.String, photoURL: Swift.String? = nil, username: Swift.String? = nil, authDate: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case firstName
        case lastName
        case hash
        case photoURL
        case username
        case authDate
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TelegramUser, b: DynamicSwiftSDK.Components.Schemas.TelegramUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TelegramPostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam
      public var telegramUser: DynamicSwiftSDK.Components.Schemas.TelegramUser
      public init(state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam, telegramUser: DynamicSwiftSDK.Components.Schemas.TelegramUser)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case telegramUser
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TelegramPostRequest, b: DynamicSwiftSDK.Components.Schemas.TelegramPostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OauthRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var code: Swift.String?
      public var codeVerifier: Swift.String?
      public var state: Swift.String
      public var captchaToken: Swift.String?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(code: Swift.String? = nil, codeVerifier: Swift.String? = nil, state: Swift.String, captchaToken: Swift.String? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case code
        case codeVerifier
        case state
        case captchaToken
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthRequest, b: DynamicSwiftSDK.Components.Schemas.OauthRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OauthResultRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var state: Swift.String?
      public var telegramAuthToken: Swift.String?
      public var forceCreateUser: Swift.Bool?
      public var code: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(state: Swift.String? = nil, telegramAuthToken: Swift.String? = nil, forceCreateUser: Swift.Bool? = nil, code: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case state
        case telegramAuthToken
        case forceCreateUser
        case code
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthResultRequest, b: DynamicSwiftSDK.Components.Schemas.OauthResultRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OauthResultResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var code: DynamicSwiftSDK.Components.Schemas.OAuthCode?
      public var error: Swift.String?
      public var status: DynamicSwiftSDK.Components.Schemas.OauthResultStatus
      public init(code: DynamicSwiftSDK.Components.Schemas.OAuthCode? = nil, error: Swift.String? = nil, status: DynamicSwiftSDK.Components.Schemas.OauthResultStatus)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case code
        case error
        case status
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OauthResultResponse, b: DynamicSwiftSDK.Components.Schemas.OauthResultResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum OauthResultStatus : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case pending
      case completed
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.OauthResultStatus]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.OauthResultStatus] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct VerifyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var oauth: DynamicSwiftSDK.Components.Schemas.OauthProviderRequest?
      public var signedMessage: Swift.String
      public var messageToSign: Swift.String
      public var publicWalletAddress: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum
      public var walletName: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum
      public var skipEmptyAccountCheck: Swift.Bool?
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public var network: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var additionalWalletAddresses: [DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress]?
      public var backup: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var password: Swift.String?
      public var passwordSource: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(oauth: DynamicSwiftSDK.Components.Schemas.OauthProviderRequest? = nil, signedMessage: Swift.String, messageToSign: Swift.String, publicWalletAddress: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, chain: DynamicSwiftSDK.Components.Schemas.ChainEnum, walletName: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, walletProvider: DynamicSwiftSDK.Components.Schemas.WalletProviderEnum, skipEmptyAccountCheck: Swift.Bool? = nil, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil, network: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, additionalWalletAddresses: [DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress]? = nil, backup: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, password: Swift.String? = nil, passwordSource: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case oauth
        case signedMessage
        case messageToSign
        case publicWalletAddress
        case chain
        case walletName
        case walletProvider
        case skipEmptyAccountCheck
        case captchaToken
        case network
        case additionalWalletAddresses
        case backup
        case password
        case passwordSource
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.VerifyRequest, b: DynamicSwiftSDK.Components.Schemas.VerifyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmailVerificationCreateRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var email: Swift.String
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public init(email: Swift.String, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case email
        case captchaToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest, b: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmsVerificationCreateRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var phoneNumber: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public init(phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, phoneNumber: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case phoneCountryCode
        case phoneNumber
        case isoCountryCode
        case captchaToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest, b: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmsVerificationRetryRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var phoneNumber: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, phoneNumber: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case phoneCountryCode
        case phoneNumber
        case isoCountryCode
        case captchaToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest, b: DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmsVerificationVerifyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var verificationToken: DynamicSwiftSDK.Components.Schemas.SixDigitsVerificationToken
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, verificationToken: DynamicSwiftSDK.Components.Schemas.SixDigitsVerificationToken, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case verificationToken
        case captchaToken
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest, b: DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmailVerificationVerifyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var verificationToken: DynamicSwiftSDK.Components.Schemas.SixDigitsVerificationToken
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, verificationToken: DynamicSwiftSDK.Components.Schemas.SixDigitsVerificationToken, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case verificationToken
        case captchaToken
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest, b: DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct EmailVerificationRetryRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid
      public var email: Swift.String
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public init(verificationUUID: DynamicSwiftSDK.Components.Schemas.Uuid, email: Swift.String, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case verificationUUID
        case email
        case captchaToken
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest, b: DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias CaptchaToken = Swift.String
    public typealias Caip2 = Swift.String
    public typealias Uuid = Swift.String
    public typealias SixDigitsVerificationToken = Swift.String
    public typealias Origin = Swift.String
    public typealias DeeplinkUrl = Swift.String
    public typealias OrderBy = Swift.String
    @frozen public enum EmbeddedWalletChainEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case evm
      case sol
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum ChainEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case eth
      case evm
      case flow
      case sol
      case algo
      case stark
      case cosmos
      case btc
      case eclipse
      case sui
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ChainEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ChainEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum EnvironmentEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case sandbox
      case live
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EnvironmentEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EnvironmentEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum WalletProviderEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case browserExtension
      case custodialService
      case walletConnect
      case qrCode
      case deepLink
      case embeddedWallet
      case smartContractWallet
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.WalletProviderEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.WalletProviderEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum EmbeddedWalletProviderEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case turnkey
      case turnkeyhd
      case dynamicWaas
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum EmbeddedWalletVersionEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case v1
      case v2
      case v3
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum WaasBackupOptionsEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case googleDrive
      case icloud
      case dynamic
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct UpdateSelfResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var mfaToken: Swift.String?
      public var jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var user: DynamicSwiftSDK.Components.Schemas.SdkUser
      public var minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt?
      public var expiresAt: Swift.Double
      public var nextView: DynamicSwiftSDK.Components.Schemas.NextViewEnum
      public var emailVerification: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse?
      public var smsVerification: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse?
      public init(mfaToken: Swift.String? = nil, jwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, user: DynamicSwiftSDK.Components.Schemas.SdkUser, minifiedJwt: DynamicSwiftSDK.Components.Schemas.EncodedJwt? = nil, expiresAt: Swift.Double, nextView: DynamicSwiftSDK.Components.Schemas.NextViewEnum, emailVerification: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse? = nil, smsVerification: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case mfaToken
        case jwt
        case user
        case minifiedJwt
        case expiresAt
        case nextView
        case emailVerification
        case smsVerification
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse, b: DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum NextViewEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case done
      case verifyEmail
      case verifiedAndTransferred
      case verifySms
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.NextViewEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.NextViewEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct OAuthAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case provider
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OAuthAccount, b: DynamicSwiftSDK.Components.Schemas.OAuthAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BaseUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var projectEnvironmentId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential]?
      public var lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var sessionId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var alias: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var country: DynamicSwiftSDK.Components.Schemas.CountryCode?
      public var email: Swift.String?
      public var firstName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var lastName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var phoneNumber: Swift.String?
      public var policiesConsent: Swift.Bool?
      public var tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var team: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var username: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var firstVisit: Swift.String?
      public var lastVisit: Swift.String?
      public var newUser: Swift.Bool?
      public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
      public var mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement?
      public var btcWallet: Swift.String?
      public var kdaWallet: Swift.String?
      public var ltcWallet: Swift.String?
      public var ckbWallet: Swift.String?
      public var kasWallet: Swift.String?
      public var dogeWallet: Swift.String?
      public var emailNotification: Swift.Bool?
      public var discordNotification: Swift.Bool?
      public var newsletterNotification: Swift.Bool?
      public var lists: [Swift.String]?
      public var scope: Swift.String?
      public var missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, projectEnvironmentId: DynamicSwiftSDK.Components.Schemas.Uuid, verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential]? = nil, lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, sessionId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, alias: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, country: DynamicSwiftSDK.Components.Schemas.CountryCode? = nil, email: Swift.String? = nil, firstName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, lastName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, phoneNumber: Swift.String? = nil, policiesConsent: Swift.Bool? = nil, tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, team: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, username: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, firstVisit: Swift.String? = nil, lastVisit: Swift.String? = nil, newUser: Swift.Bool? = nil, metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil, mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement? = nil, btcWallet: Swift.String? = nil, kdaWallet: Swift.String? = nil, ltcWallet: Swift.String? = nil, ckbWallet: Swift.String? = nil, kasWallet: Swift.String? = nil, dogeWallet: Swift.String? = nil, emailNotification: Swift.Bool? = nil, discordNotification: Swift.Bool? = nil, newsletterNotification: Swift.Bool? = nil, lists: [Swift.String]? = nil, scope: Swift.String? = nil, missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case projectEnvironmentId
        case verifiedCredentials
        case lastVerifiedCredentialId
        case sessionId
        case alias
        case country
        case email
        case firstName
        case jobTitle
        case lastName
        case phoneNumber
        case policiesConsent
        case tShirtSize
        case team
        case username
        case firstVisit
        case lastVisit
        case newUser
        case metadata
        case mfaBackupCodeAcknowledgement
        case btcWallet
        case kdaWallet
        case ltcWallet
        case ckbWallet
        case kasWallet
        case dogeWallet
        case emailNotification
        case discordNotification
        case newsletterNotification
        case lists
        case scope
        case missingFields
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BaseUser, b: DynamicSwiftSDK.Components.Schemas.BaseUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SdkUser : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var projectEnvironmentId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential]
      public var lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var sessionId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var alias: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var country: DynamicSwiftSDK.Components.Schemas.CountryCode?
      public var email: Swift.String?
      public var firstName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var lastName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var phoneNumber: Swift.String?
      public var policiesConsent: Swift.Bool?
      public var tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var team: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var username: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength?
      public var firstVisit: Swift.String?
      public var lastVisit: Swift.String?
      public var newUser: Swift.Bool?
      public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
      public var mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement?
      public var btcWallet: Swift.String?
      public var kdaWallet: Swift.String?
      public var ltcWallet: Swift.String?
      public var ckbWallet: Swift.String?
      public var kasWallet: Swift.String?
      public var dogeWallet: Swift.String?
      public var emailNotification: Swift.Bool?
      public var discordNotification: Swift.Bool?
      public var newsletterNotification: Swift.Bool?
      public var lists: [Swift.String]?
      public var scope: Swift.String?
      public var missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, projectEnvironmentId: DynamicSwiftSDK.Components.Schemas.Uuid, verifiedCredentials: [DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential], lastVerifiedCredentialId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, sessionId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, alias: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, country: DynamicSwiftSDK.Components.Schemas.CountryCode? = nil, email: Swift.String? = nil, firstName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, lastName: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, phoneNumber: Swift.String? = nil, policiesConsent: Swift.Bool? = nil, tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, team: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, username: DynamicSwiftSDK.Components.Schemas.OptionalNullableNonEmptyStringWith255MaxLength? = nil, firstVisit: Swift.String? = nil, lastVisit: Swift.String? = nil, newUser: Swift.Bool? = nil, metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil, mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement? = nil, btcWallet: Swift.String? = nil, kdaWallet: Swift.String? = nil, ltcWallet: Swift.String? = nil, ckbWallet: Swift.String? = nil, kasWallet: Swift.String? = nil, dogeWallet: Swift.String? = nil, emailNotification: Swift.Bool? = nil, discordNotification: Swift.Bool? = nil, newsletterNotification: Swift.Bool? = nil, lists: [Swift.String]? = nil, scope: Swift.String? = nil, missingFields: [DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case projectEnvironmentId
        case verifiedCredentials
        case lastVerifiedCredentialId
        case sessionId
        case alias
        case country
        case email
        case firstName
        case jobTitle
        case lastName
        case phoneNumber
        case policiesConsent
        case tShirtSize
        case team
        case username
        case firstVisit
        case lastVisit
        case newUser
        case metadata
        case mfaBackupCodeAcknowledgement
        case btcWallet
        case kdaWallet
        case ltcWallet
        case ckbWallet
        case kasWallet
        case dogeWallet
        case emailNotification
        case discordNotification
        case newsletterNotification
        case lists
        case scope
        case missingFields
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkUser, b: DynamicSwiftSDK.Components.Schemas.SdkUser) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UserFields : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var email: DynamicSwiftSDK.Components.Schemas.EmailOrEmptyString?
      public var alias: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var firstName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var lastName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var phoneNumber: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var team: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength?
      public var policiesConsent: Swift.Bool?
      public var country: DynamicSwiftSDK.Components.Schemas.CountryCode?
      public var username: DynamicSwiftSDK.Components.Schemas.Username?
      public var captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken?
      public var metadata: OpenAPIRuntime.OpenAPIObjectContainer?
      public var mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement?
      public var btcWallet: DynamicSwiftSDK.Components.Schemas.BtcWalletString?
      public var kdaWallet: DynamicSwiftSDK.Components.Schemas.KdaWalletString?
      public var ltcWallet: DynamicSwiftSDK.Components.Schemas.LtcWalletString?
      public var ckbWallet: DynamicSwiftSDK.Components.Schemas.CkbWalletString?
      public var kasWallet: DynamicSwiftSDK.Components.Schemas.KasWalletString?
      public var dogeWallet: DynamicSwiftSDK.Components.Schemas.DogeWalletString?
      public var emailNotification: Swift.Bool?
      public var discordNotification: Swift.Bool?
      public var newsletterNotification: Swift.Bool?
      public init(email: DynamicSwiftSDK.Components.Schemas.EmailOrEmptyString? = nil, alias: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, firstName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, lastName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, jobTitle: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, phoneNumber: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, tShirtSize: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, team: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith255MaxLength? = nil, policiesConsent: Swift.Bool? = nil, country: DynamicSwiftSDK.Components.Schemas.CountryCode? = nil, username: DynamicSwiftSDK.Components.Schemas.Username? = nil, captchaToken: DynamicSwiftSDK.Components.Schemas.CaptchaToken? = nil, metadata: OpenAPIRuntime.OpenAPIObjectContainer? = nil, mfaBackupCodeAcknowledgement: DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement? = nil, btcWallet: DynamicSwiftSDK.Components.Schemas.BtcWalletString? = nil, kdaWallet: DynamicSwiftSDK.Components.Schemas.KdaWalletString? = nil, ltcWallet: DynamicSwiftSDK.Components.Schemas.LtcWalletString? = nil, ckbWallet: DynamicSwiftSDK.Components.Schemas.CkbWalletString? = nil, kasWallet: DynamicSwiftSDK.Components.Schemas.KasWalletString? = nil, dogeWallet: DynamicSwiftSDK.Components.Schemas.DogeWalletString? = nil, emailNotification: Swift.Bool? = nil, discordNotification: Swift.Bool? = nil, newsletterNotification: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case email
        case alias
        case firstName
        case lastName
        case jobTitle
        case phoneNumber
        case tShirtSize
        case team
        case policiesConsent
        case country
        case username
        case captchaToken
        case metadata
        case mfaBackupCodeAcknowledgement
        case btcWallet
        case kdaWallet
        case ltcWallet
        case ckbWallet
        case kasWallet
        case dogeWallet
        case emailNotification
        case discordNotification
        case newsletterNotification
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserFields, b: DynamicSwiftSDK.Components.Schemas.UserFields) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias Username = Swift.String
    public typealias CountryCode = Swift.String
    public typealias BtcWalletString = Swift.String
    public typealias LtcWalletString = Swift.String
    public typealias DogeWalletString = Swift.String
    public typealias KdaWalletString = Swift.String
    public typealias KasWalletString = Swift.String
    public typealias CkbWalletString = Swift.String
    public typealias EmailOrEmptyString = Swift.String
    public typealias PhoneNumberOrEmptyString = Swift.String
    public struct NameService : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var registry: Swift.String?
      public init(registry: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case registry
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NameService, b: DynamicSwiftSDK.Components.Schemas.NameService) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Network : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var networkId: Swift.Double
      public var chainName: Swift.String
      public var enabled: Swift.Bool
      public var rpcUrl: Swift.String?
      public var iconUrl: Swift.String?
      @frozen public enum _TypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
        case custom
        case _default
        public init?(rawValue: Swift.String)
        public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.Network._TypePayload]
        public typealias RawValue = Swift.String
        nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.Network._TypePayload] {
          get
        }
        public var rawValue: Swift.String {
          get
        }
      }
      public var _type: DynamicSwiftSDK.Components.Schemas.Network._TypePayload?
      public init(networkId: Swift.Double, chainName: Swift.String, enabled: Swift.Bool, rpcUrl: Swift.String? = nil, iconUrl: Swift.String? = nil, _type: DynamicSwiftSDK.Components.Schemas.Network._TypePayload? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case networkId
        case chainName
        case enabled
        case rpcUrl
        case iconUrl
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Network, b: DynamicSwiftSDK.Components.Schemas.Network) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NativeCurrency : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var decimals: Swift.Double
      public var name: Swift.String
      public var symbol: Swift.String
      public var denom: Swift.String?
      public var iconUrl: Swift.String?
      public var pricingProviderTokenId: Swift.String?
      public init(decimals: Swift.Double, name: Swift.String, symbol: Swift.String, denom: Swift.String? = nil, iconUrl: Swift.String? = nil, pricingProviderTokenId: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case decimals
        case name
        case symbol
        case denom
        case iconUrl
        case pricingProviderTokenId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NativeCurrency, b: DynamicSwiftSDK.Components.Schemas.NativeCurrency) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NetworkConfiguration : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var lcdUrl: Swift.String?
      public var chainName: Swift.String?
      public var key: Swift.String?
      public var name: Swift.String
      public var shortName: Swift.String
      public var isTestnet: Swift.Bool?
      public var chain: Swift.String
      public var chainId: Swift.String
      public var nameService: DynamicSwiftSDK.Components.Schemas.NameService?
      public var networkId: Swift.String
      public var iconUrls: [Swift.String]
      public var nativeCurrency: DynamicSwiftSDK.Components.Schemas.NativeCurrency
      public var rpcUrls: [Swift.String]
      public var privateCustomerRpcUrls: [Swift.String]?
      public var blockExplorerUrls: [Swift.String]
      public var vanityName: Swift.String?
      public var bech32Prefix: Swift.String?
      public var genesisHash: Swift.String?
      public var cluster: Swift.String?
      public init(lcdUrl: Swift.String? = nil, chainName: Swift.String? = nil, key: Swift.String? = nil, name: Swift.String, shortName: Swift.String, isTestnet: Swift.Bool? = nil, chain: Swift.String, chainId: Swift.String, nameService: DynamicSwiftSDK.Components.Schemas.NameService? = nil, networkId: Swift.String, iconUrls: [Swift.String], nativeCurrency: DynamicSwiftSDK.Components.Schemas.NativeCurrency, rpcUrls: [Swift.String], privateCustomerRpcUrls: [Swift.String]? = nil, blockExplorerUrls: [Swift.String], vanityName: Swift.String? = nil, bech32Prefix: Swift.String? = nil, genesisHash: Swift.String? = nil, cluster: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case lcdUrl
        case chainName
        case key
        case name
        case shortName
        case isTestnet
        case chain
        case chainId
        case nameService
        case networkId
        case iconUrls
        case nativeCurrency
        case rpcUrls
        case privateCustomerRpcUrls
        case blockExplorerUrls
        case vanityName
        case bech32Prefix
        case genesisHash
        case cluster
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NetworkConfiguration, b: DynamicSwiftSDK.Components.Schemas.NetworkConfiguration) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct NetworkConfigurationResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chainName: Swift.String?
      public var networks: [DynamicSwiftSDK.Components.Schemas.NetworkConfiguration]?
      public init(chainName: Swift.String? = nil, networks: [DynamicSwiftSDK.Components.Schemas.NetworkConfiguration]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chainName
        case networks
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse, b: DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OnrampConfiguration : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public var name: Swift.String?
      public var iconUrl: Swift.String?
      public var url: Swift.String?
      public init(provider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil, name: Swift.String? = nil, iconUrl: Swift.String? = nil, url: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case provider
        case name
        case iconUrl
        case url
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OnrampConfiguration, b: DynamicSwiftSDK.Components.Schemas.OnrampConfiguration) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PublishEvents : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public struct EventsPayloadPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var anonymousId: Swift.String
        public var event: Swift.String
        public struct PropertiesPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
          public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
          public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init())
          public init(from decoder: any Swift.Decoder) throws
          public func encode(to encoder: any Swift.Encoder) throws
          public static func == (a: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.PropertiesPayload, b: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.PropertiesPayload) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var properties: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.PropertiesPayload
        @frozen public enum _TypePayload : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
          case track
          public init?(rawValue: Swift.String)
          public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload]
          public typealias RawValue = Swift.String
          nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload] {
            get
          }
          public var rawValue: Swift.String {
            get
          }
        }
        public var _type: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload
        public init(anonymousId: Swift.String, event: Swift.String, properties: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.PropertiesPayload, _type: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case anonymousId
          case event
          case properties
          case _type
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload, b: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public typealias EventsPayload = [DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload]
      public var events: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayload
      public init(events: DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case events
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PublishEvents, b: DynamicSwiftSDK.Components.Schemas.PublishEvents) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SupportedOnrampsResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var onramps: [DynamicSwiftSDK.Components.Schemas.OnrampConfiguration]?
      public init(onramps: [DynamicSwiftSDK.Components.Schemas.OnrampConfiguration]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case onramps
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse, b: DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum SdkViewType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case login
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.SdkViewType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.SdkViewType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct SdkView : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var _type: DynamicSwiftSDK.Components.Schemas.SdkViewType
      public var sections: [DynamicSwiftSDK.Components.Schemas.SdkViewSection]?
      public init(_type: DynamicSwiftSDK.Components.Schemas.SdkViewType, sections: [DynamicSwiftSDK.Components.Schemas.SdkViewSection]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case _type
        case sections
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkView, b: DynamicSwiftSDK.Components.Schemas.SdkView) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SdkViewSection : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var _type: DynamicSwiftSDK.Components.Schemas.SdkViewSectionType
      public var label: Swift.String?
      public var numOfItemsToDisplay: Swift.Int?
      public var defaultItem: Swift.String?
      public var alignment: DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment?
      public init(_type: DynamicSwiftSDK.Components.Schemas.SdkViewSectionType, label: Swift.String? = nil, numOfItemsToDisplay: Swift.Int? = nil, defaultItem: Swift.String? = nil, alignment: DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case _type
        case label
        case numOfItemsToDisplay
        case defaultItem
        case alignment
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkViewSection, b: DynamicSwiftSDK.Components.Schemas.SdkViewSection) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum SdkViewSectionType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case email
      case emailAndPhone
      case phone
      case separator
      case social
      case text
      case wallet
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.SdkViewSectionType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.SdkViewSectionType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum SdkViewSectionAlignment : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case center
      case left
      case right
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct SdkViewUpdateRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var sections: [DynamicSwiftSDK.Components.Schemas.SdkViewSection]?
      public init(sections: [DynamicSwiftSDK.Components.Schemas.SdkViewSection]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case sections
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkViewUpdateRequest, b: DynamicSwiftSDK.Components.Schemas.SdkViewUpdateRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SdkViewsResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var sdkViews: [DynamicSwiftSDK.Components.Schemas.SdkView]?
      public init(sdkViews: [DynamicSwiftSDK.Components.Schemas.SdkView]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case sdkViews
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SdkViewsResponse, b: DynamicSwiftSDK.Components.Schemas.SdkViewsResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct WalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var value1: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties?
      public var value2: DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties?
      public var value3: DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties?
      public var value4: DynamicSwiftSDK.Components.Schemas.SmartWalletProperties?
      public var value5: DynamicSwiftSDK.Components.Schemas.WaasWalletProperties?
      public init(value1: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties? = nil, value2: DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties? = nil, value3: DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties? = nil, value4: DynamicSwiftSDK.Components.Schemas.SmartWalletProperties? = nil, value5: DynamicSwiftSDK.Components.Schemas.WaasWalletProperties? = nil)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public static func == (a: DynamicSwiftSDK.Components.Schemas.WalletProperties, b: DynamicSwiftSDK.Components.Schemas.WalletProperties) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct WalletKeyShareInfo : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var backupLocation: Swift.String
      public var passwordEncrypted: Swift.Bool
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, backupLocation: Swift.String, passwordEncrypted: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case backupLocation
        case passwordEncrypted
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo, b: DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct WalletKeyShareInfoWithEncryptedAccountCredential : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var backupLocation: Swift.String
      public var passwordEncrypted: Swift.Bool
      public var encryptedAccountCredential: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, backupLocation: Swift.String, passwordEncrypted: Swift.Bool, encryptedAccountCredential: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case backupLocation
        case passwordEncrypted
        case encryptedAccountCredential
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential, b: DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct WaasWalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo]?
      public var thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme?
      public var derivationPath: Swift.String?
      public init(keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo]? = nil, thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme? = nil, derivationPath: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case keyShares
        case thresholdSignatureScheme
        case derivationPath
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.WaasWalletProperties, b: DynamicSwiftSDK.Components.Schemas.WaasWalletProperties) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmartWalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum?
      public var kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum?
      public var ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions?
      public init(entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum? = nil, kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum? = nil, ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case entryPointVersion
        case kernelVersion
        case ecdsaProviderType
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmartWalletProperties, b: DynamicSwiftSDK.Components.Schemas.SmartWalletProperties) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CoinbaseMpcWalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var claimed: Swift.Bool?
      public var source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum?
      public init(claimed: Swift.Bool? = nil, source: DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case claimed
        case source
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties, b: DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct HardwareWalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var hardwareWallet: DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum?
      public init(hardwareWallet: DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case hardwareWallet
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties, b: DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyWalletProperties : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeySubOrganizationId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var turnkeyPrivateKeyId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var turnkeyHDWalletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var isAuthenticatorAttached: Swift.Bool?
      public var turnkeyUserId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var isSessionKeyCompatible: Swift.Bool?
      public var version: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum?
      public var ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions?
      public var entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum?
      public var kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum?
      public init(turnkeySubOrganizationId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, turnkeyPrivateKeyId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, turnkeyHDWalletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, isAuthenticatorAttached: Swift.Bool? = nil, turnkeyUserId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, isSessionKeyCompatible: Swift.Bool? = nil, version: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum? = nil, ecdsaProviderType: DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions? = nil, entryPointVersion: DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum? = nil, kernelVersion: DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeySubOrganizationId
        case turnkeyPrivateKeyId
        case turnkeyHDWalletId
        case isAuthenticatorAttached
        case turnkeyUserId
        case isSessionKeyCompatible
        case version
        case ecdsaProviderType
        case entryPointVersion
        case kernelVersion
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties, b: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum UserIdentifierTypeEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case email
      case id
      case externalUserId
      case phoneNumber
      case socialUsername
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct CreateUserEmbeddedWalletsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var identifier: Swift.String
      public var _type: DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum
      public var chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]?
      public var chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum?
      public var smsCountryCode: DynamicSwiftSDK.Components.Schemas.SmsCountryCode?
      public var socialProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum?
      public init(identifier: Swift.String, _type: DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum, chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]? = nil, chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum? = nil, smsCountryCode: DynamicSwiftSDK.Components.Schemas.SmsCountryCode? = nil, socialProvider: DynamicSwiftSDK.Components.Schemas.ProviderEnum? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case identifier
        case _type
        case chains
        case chain
        case smsCountryCode
        case socialProvider
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsRequest, b: DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CreateUserEmbeddedWalletsFromFarcasterRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var email: Swift.String
      public var fid: Swift.Double
      public var chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]
      public init(email: Swift.String, fid: Swift.Double, chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case email
        case fid
        case chains
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsFromFarcasterRequest, b: DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsFromFarcasterRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RegisterEmbeddedWalletSessionKeyResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var publicKey: Swift.String
      public var expiresAt: Swift.Double
      public init(publicKey: Swift.String, expiresAt: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case publicKey
        case expiresAt
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse, b: DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ExportEmbeddedWalletResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var exportBundle: Swift.String
      public init(exportBundle: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case exportBundle
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse, b: DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CreateEmbeddedWalletsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var embeddedWallets: [DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams]
      public init(embeddedWallets: [DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case embeddedWallets
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest, b: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CreateEmbeddedWalletParams : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]?
      public var chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum?
      public var embeddedWalletProvider: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum
      public var embeddedWalletSpecificOpts: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletSpecificOpts?
      public var isAuthenticatorAttached: Swift.Bool?
      public var passkeyAlias: Swift.String?
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(chains: [DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum]? = nil, chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum? = nil, embeddedWalletProvider: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum, embeddedWalletSpecificOpts: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletSpecificOpts? = nil, isAuthenticatorAttached: Swift.Bool? = nil, passkeyAlias: Swift.String? = nil, sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chains
        case chain
        case embeddedWalletProvider
        case embeddedWalletSpecificOpts
        case isAuthenticatorAttached
        case passkeyAlias
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams, b: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum CreateEmbeddedWalletSpecificOpts : Swift.Codable, Swift.Hashable, Swift.Sendable {
      case CreateTurnkeyEmbeddedWalletSpecificOpts(DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts)
      public init(from decoder: any Swift.Decoder) throws
      public func encode(to encoder: any Swift.Encoder) throws
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletSpecificOpts, b: DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletSpecificOpts) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct CreateTurnkeyEmbeddedWalletSpecificOpts : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential
      public var challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential, challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case attestation
        case challenge
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts, b: DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UpgradeEmbeddedWalletToV2Request : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(sessionPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case sessionPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request, b: DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PasskeyRegistrationCredential : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var attestationObject: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var clientDataJson: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var credentialId: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var transports: [DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol]
      public init(attestationObject: DynamicSwiftSDK.Components.Schemas.NonEmptyString, clientDataJson: DynamicSwiftSDK.Components.Schemas.NonEmptyString, credentialId: DynamicSwiftSDK.Components.Schemas.NonEmptyString, transports: [DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case attestationObject
        case clientDataJson
        case credentialId
        case transports
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential, b: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UserPasskey : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var alias: Swift.String?
      public var userAgent: Swift.String?
      public var origin: Swift.String?
      public var credentialId: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var createdAt: Swift.String
      public var updatedAt: Swift.String?
      public var storage: DynamicSwiftSDK.Components.Schemas.PasskeyStorage?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, alias: Swift.String? = nil, userAgent: Swift.String? = nil, origin: Swift.String? = nil, credentialId: DynamicSwiftSDK.Components.Schemas.NonEmptyString, createdAt: Swift.String, updatedAt: Swift.String? = nil, storage: DynamicSwiftSDK.Components.Schemas.PasskeyStorage? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case alias
        case userAgent
        case origin
        case credentialId
        case createdAt
        case updatedAt
        case storage
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UserPasskey, b: DynamicSwiftSDK.Components.Schemas.UserPasskey) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PasskeyStorage : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var icon: Swift.String
      public var updatedAt: Swift.String?
      public init(name: Swift.String, icon: Swift.String, updatedAt: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case icon
        case updatedAt
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PasskeyStorage, b: DynamicSwiftSDK.Components.Schemas.PasskeyStorage) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeySignedRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var body: Swift.String
      public var stamp: DynamicSwiftSDK.Components.Schemas.TurnkeyStamp
      public var url: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(body: Swift.String, stamp: DynamicSwiftSDK.Components.Schemas.TurnkeyStamp, url: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case body
        case stamp
        case url
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest, b: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyStamp : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var stampHeaderName: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var stampHeaderValue: Swift.String
      public init(stampHeaderName: DynamicSwiftSDK.Components.Schemas.NonEmptyString, stampHeaderValue: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case stampHeaderName
        case stampHeaderValue
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyStamp, b: DynamicSwiftSDK.Components.Schemas.TurnkeyStamp) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UpdateRecoveryEmailRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest
      public init(turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeySignedRequest
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest, b: DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct UpdateUserPasskeyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var alias: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, alias: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case alias
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest, b: DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum AuthenticatorTransportProtocol : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case authenticatorTransportInternal
      case authenticatorTransportUsb
      case authenticatorTransportNfc
      case authenticatorTransportBle
      case authenticatorTransportHybrid
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct InitPasskeyRecoveryRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var turnkeyRecoveryTargetPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid, turnkeyRecoveryTargetPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case turnkeyRecoveryTargetPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest, b: DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InitPasskeyRecoveryResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeyRecoveryUserId: DynamicSwiftSDK.Components.Schemas.Uuid
      public init(turnkeyRecoveryUserId: DynamicSwiftSDK.Components.Schemas.Uuid)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeyRecoveryUserId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse, b: DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CompletePasskeyRecoveryRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential
      public var challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid, attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential, challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case attestation
        case challenge
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest, b: DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InitEmailAuthRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var turnkeyEmailAuthTargetPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid, turnkeyEmailAuthTargetPublicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case turnkeyEmailAuthTargetPublicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest, b: DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InitEmailAuthResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeyUserId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var turnkeyApiKeyId: DynamicSwiftSDK.Components.Schemas.Uuid
      public init(turnkeyUserId: DynamicSwiftSDK.Components.Schemas.Uuid, turnkeyApiKeyId: DynamicSwiftSDK.Components.Schemas.Uuid)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeyUserId
        case turnkeyApiKeyId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse, b: DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RegisterSessionKeyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var publicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var prevSessionKeySignature: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(publicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString, prevSessionKeySignature: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case publicKey
        case prevSessionKeySignature
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest, b: DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct GetUserPasskeysResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var passkeys: [DynamicSwiftSDK.Components.Schemas.UserPasskey]
      public var count: Swift.Double
      public init(passkeys: [DynamicSwiftSDK.Components.Schemas.UserPasskey], count: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case passkeys
        case count
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse, b: DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum MfaBackupCodeAcknowledgement : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case pending
      case complete
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct MFASettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var enabled: Swift.Bool?
      public var required: Swift.Bool?
      public var availableMethods: [DynamicSwiftSDK.Components.Schemas.MFADeviceType]?
      public init(enabled: Swift.Bool? = nil, required: Swift.Bool? = nil, availableMethods: [DynamicSwiftSDK.Components.Schemas.MFADeviceType]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case enabled
        case required
        case availableMethods
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFASettings, b: DynamicSwiftSDK.Components.Schemas.MFASettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum MFADeviceType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case totp
      case passkey
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.MFADeviceType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.MFADeviceType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct MFADevice : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType?
      public var verified: Swift.Bool?
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var createdAt: Swift.String?
      public var verifiedAt: Swift.String?
      public var _default: Swift.Bool?
      public var alias: Swift.String?
      public init(_type: DynamicSwiftSDK.Components.Schemas.MFADeviceType? = nil, verified: Swift.Bool? = nil, id: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, createdAt: Swift.String? = nil, verifiedAt: Swift.String? = nil, _default: Swift.Bool? = nil, alias: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case _type
        case verified
        case id
        case createdAt
        case verifiedAt
        case _default
        case alias
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFADevice, b: DynamicSwiftSDK.Components.Schemas.MFADevice) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAListDevicesResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var count: Swift.Int
      public var devices: [DynamicSwiftSDK.Components.Schemas.MFADevice]
      public init(count: Swift.Int, devices: [DynamicSwiftSDK.Components.Schemas.MFADevice])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case count
        case devices
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse, b: DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias MFAGetDeviceResponse = DynamicSwiftSDK.Components.Schemas.MFADevice
    public struct MFAUpdateDeviceRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var _default: Swift.Bool
      public init(_default: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case _default
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest, b: DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFARegisterTotpDeviceGetResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType
      public var secret: Swift.String
      public var uri: Swift.String
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType, secret: Swift.String, uri: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case _type
        case secret
        case uri
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse, b: DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFARegisterTotpDevicePostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType
      public var code: Swift.String
      public init(_type: DynamicSwiftSDK.Components.Schemas.MFADeviceType, code: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case _type
        case code
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest, b: DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias MFARegisterTotpDevicePostResponse = DynamicSwiftSDK.Components.Schemas.MFADevice
    public struct MFARegisterPasskeyDeviceGetResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType
      public struct RegistrationPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var attestation: DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference?
        public var rp: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity
        public var user: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity
        public var challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString
        public var pubKeyCredParams: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters]
        public var timeout: Swift.Double?
        public var authenticatorSelection: DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria?
        public var excludeCredentials: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor]?
        public var extensions: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs?
        public init(attestation: DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference? = nil, rp: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity, user: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity, challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString, pubKeyCredParams: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters], timeout: Swift.Double? = nil, authenticatorSelection: DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria? = nil, excludeCredentials: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor]? = nil, extensions: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case attestation
          case rp
          case user
          case challenge
          case pubKeyCredParams
          case timeout
          case authenticatorSelection
          case excludeCredentials
          case extensions
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload, b: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var registration: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType, registration: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case _type
        case registration
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse, b: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFARegisterPasskeyDevicePostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, attestation: DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case attestation
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest, b: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAAuthPasskeyDeviceGetResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType
      public struct AssertionPayload : Swift.Codable, Swift.Hashable, Swift.Sendable {
        public var rpId: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
        public var challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString
        public var timeout: Swift.Double?
        public var userVerification: DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement?
        public var allowCredentials: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor]?
        public var extensions: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs?
        public init(rpId: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil, challenge: DynamicSwiftSDK.Components.Schemas.NonEmptyString, timeout: Swift.Double? = nil, userVerification: DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement? = nil, allowCredentials: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor]? = nil, extensions: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs? = nil)
        public enum CodingKeys : Swift.String, Swift.CodingKey {
          case rpId
          case challenge
          case timeout
          case userVerification
          case allowCredentials
          case extensions
          public init?(rawValue: Swift.String)
          public init?(stringValue: Swift.String)
          public init?(intValue: Swift.Int)
          public typealias RawValue = Swift.String
          public var intValue: Swift.Int? {
            get
          }
          public var rawValue: Swift.String {
            get
          }
          public var stringValue: Swift.String {
            get
          }
        }
        public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload, b: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload) -> Swift.Bool
        public func encode(to encoder: any Swift.Encoder) throws
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
        public init(from decoder: any Swift.Decoder) throws
      }
      public var assertion: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, _type: DynamicSwiftSDK.Components.Schemas.MFADeviceType, assertion: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case _type
        case assertion
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse, b: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAAuthPasskeyDevicePostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var assertion: DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, assertion: DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case assertion
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest, b: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PasskeyRegisterVerifyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var rawId: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var response: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse
      public var authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment?
      public var clientExtensionResults: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs
      public var _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType
      public init(id: DynamicSwiftSDK.Components.Schemas.NonEmptyString, rawId: DynamicSwiftSDK.Components.Schemas.NonEmptyString, response: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse, authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment? = nil, clientExtensionResults: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs, _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case rawId
        case response
        case authenticatorAttachment
        case clientExtensionResults
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest, b: DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PasskeyAuthRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var rawId: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var response: DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse
      public var authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment?
      public var clientExtensionResults: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs
      public var _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType
      public init(id: DynamicSwiftSDK.Components.Schemas.NonEmptyString, rawId: DynamicSwiftSDK.Components.Schemas.NonEmptyString, response: DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse, authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment? = nil, clientExtensionResults: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs, _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case rawId
        case response
        case authenticatorAttachment
        case clientExtensionResults
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest, b: DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AuthenticatorAttestationResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var clientDataJSON: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var attestationObject: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var authenticatorData: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public var publicKeyAlgorithm: Swift.Double?
      public var publicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(clientDataJSON: DynamicSwiftSDK.Components.Schemas.NonEmptyString, attestationObject: DynamicSwiftSDK.Components.Schemas.NonEmptyString, authenticatorData: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil, publicKeyAlgorithm: Swift.Double? = nil, publicKey: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case clientDataJSON
        case attestationObject
        case authenticatorData
        case publicKeyAlgorithm
        case publicKey
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse, b: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AuthenticatorAssertionResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var clientDataJSON: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var authenticatorData: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var signature: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var userHandle: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public init(clientDataJSON: DynamicSwiftSDK.Components.Schemas.NonEmptyString, authenticatorData: DynamicSwiftSDK.Components.Schemas.NonEmptyString, signature: DynamicSwiftSDK.Components.Schemas.NonEmptyString, userHandle: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case clientDataJSON
        case authenticatorData
        case signature
        case userHandle
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse, b: DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AuthenticationExtensionsClientInputs : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var appid: Swift.String?
      public var credProps: Swift.Bool?
      public var hmacCreateSecret: Swift.Bool?
      public init(appid: Swift.String? = nil, credProps: Swift.Bool? = nil, hmacCreateSecret: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case appid
        case credProps
        case hmacCreateSecret
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs, b: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct AuthenticationExtensionsClientOutputs : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var appid: Swift.Bool?
      public var credProps: OpenAPIRuntime.OpenAPIObjectContainer?
      public var hmacCreateSecret: Swift.Bool?
      public init(appid: Swift.Bool? = nil, credProps: OpenAPIRuntime.OpenAPIObjectContainer? = nil, hmacCreateSecret: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case appid
        case credProps
        case hmacCreateSecret
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs, b: DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PublicKeyCredentialRpEntity : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.NonEmptyString?
      public var name: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(id: DynamicSwiftSDK.Components.Schemas.NonEmptyString? = nil, name: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case name
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity, b: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PublicKeyCredentialUserEntity : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var name: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var displayName: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(id: DynamicSwiftSDK.Components.Schemas.NonEmptyString, name: DynamicSwiftSDK.Components.Schemas.NonEmptyString, displayName: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case name
        case displayName
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity, b: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PublicKeyCredentialParameters : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var alg: Swift.Double
      public var _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType
      public init(alg: Swift.Double, _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case alg
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters, b: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PublicKeyCredentialDescriptor : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: Swift.String
      public var _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType
      public init(id: Swift.String, _type: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor, b: DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum AttestationConveyancePreference : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case direct
      case enterprise
      case indirect
      case none
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum PublicKeyCredentialType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case publicKey
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct AuthenticatorSelectionCriteria : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment?
      public var requireResidentKey: Swift.Bool?
      public var residentKey: DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement?
      public var userVerification: DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement?
      public init(authenticatorAttachment: DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment? = nil, requireResidentKey: Swift.Bool? = nil, residentKey: DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement? = nil, userVerification: DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case authenticatorAttachment
        case requireResidentKey
        case residentKey
        case userVerification
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria, b: DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum AuthenticatorAttachment : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case crossPlatform
      case platform
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum ResidentKeyRequirement : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case discouraged
      case preferred
      case required
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum UserVerificationRequirement : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case discouraged
      case preferred
      case required
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct CreateMfaToken : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var singleUse: Swift.Bool
      public init(singleUse: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case singleUse
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateMfaToken, b: DynamicSwiftSDK.Components.Schemas.CreateMfaToken) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAAuthTotpDevicePostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid?
      public var createMfaToken: DynamicSwiftSDK.Components.Schemas.CreateMfaToken?
      public var code: Swift.String
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid? = nil, createMfaToken: DynamicSwiftSDK.Components.Schemas.CreateMfaToken? = nil, code: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case createMfaToken
        case code
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest, b: DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAAuthRecoveryDevicePostRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var createMfaToken: DynamicSwiftSDK.Components.Schemas.CreateMfaToken?
      public var code: Swift.String
      public init(createMfaToken: DynamicSwiftSDK.Components.Schemas.CreateMfaToken? = nil, code: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case createMfaToken
        case code
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest, b: DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFAGetRecoveryCodesResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var count: Swift.Int
      public var recoveryCodes: [Swift.String]
      public init(count: Swift.Int, recoveryCodes: [Swift.String])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case count
        case recoveryCodes
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse, b: DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct MFARegenRecoveryCodesResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var count: Swift.Int
      public var recoveryCodes: [Swift.String]
      public init(count: Swift.Int, recoveryCodes: [Swift.String])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case count
        case recoveryCodes
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse, b: DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum CurrencyType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case fiat
      case crypto
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.CurrencyType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.CurrencyType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct Currency : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var name: Swift.String
      public var symbol: Swift.String
      public var _type: DynamicSwiftSDK.Components.Schemas.CurrencyType
      public var code: Swift.String
      public var value: Swift.Double
      public init(name: Swift.String, symbol: Swift.String, _type: DynamicSwiftSDK.Components.Schemas.CurrencyType, code: Swift.String, value: Swift.Double)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case name
        case symbol
        case _type
        case code
        case value
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.Currency, b: DynamicSwiftSDK.Components.Schemas.Currency) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public typealias ExchangeRatesResponse = [DynamicSwiftSDK.Components.Schemas.Currency]
    public struct WalletAdditionalAddress : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var address: Swift.String
      public var publicKey: Swift.String?
      public var _type: DynamicSwiftSDK.Components.Schemas.WalletAddressType
      public init(address: Swift.String, publicKey: Swift.String? = nil, _type: DynamicSwiftSDK.Components.Schemas.WalletAddressType)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case address
        case publicKey
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress, b: DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum WalletAddressType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case ordinals
      case payment
      case cosmos
      case evm
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.WalletAddressType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.WalletAddressType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum KycFieldType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case standard
      case custom
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.KycFieldType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.KycFieldType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    @frozen public enum CustomFieldType : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case text
      case checkbox
      case select
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.CustomFieldType]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.CustomFieldType] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct CustomFieldValidValue : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var label: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public var key: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength?
      public init(label: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength, key: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case label
        case key
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue, b: DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CustomFieldValidationRules : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var unique: Swift.Bool?
      public var regex: Swift.String?
      public var validOptions: [DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue]?
      public var checkboxText: Swift.String?
      public init(unique: Swift.Bool? = nil, regex: Swift.String? = nil, validOptions: [DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue]? = nil, checkboxText: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case unique
        case regex
        case validOptions
        case checkboxText
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules, b: DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SmsCountryCode : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode
      public var phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength
      public init(isoCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyIsoCountryCode, phoneCountryCode: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith255MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case isoCountryCode
        case phoneCountryCode
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SmsCountryCode, b: DynamicSwiftSDK.Components.Schemas.SmsCountryCode) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum EcdsaValidatorOptions : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case zerodevSignerToEcdsa
      case zerodevMultiChain
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
    public struct TokenBalance : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var networkId: Swift.Int?
      public var address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey
      public var name: Swift.String
      public var symbol: Swift.String
      public var decimals: Swift.Int
      public var logoURI: Swift.String
      public var balance: Swift.Double
      public var rawBalance: Swift.Double
      public var price: Swift.Double?
      public var marketValue: Swift.Double?
      public init(networkId: Swift.Int? = nil, address: DynamicSwiftSDK.Components.Schemas.WalletPublicKey, name: Swift.String, symbol: Swift.String, decimals: Swift.Int, logoURI: Swift.String, balance: Swift.Double, rawBalance: Swift.Double, price: Swift.Double? = nil, marketValue: Swift.Double? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case networkId
        case address
        case name
        case symbol
        case decimals
        case logoURI
        case balance
        case rawBalance
        case price
        case marketValue
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TokenBalance, b: DynamicSwiftSDK.Components.Schemas.TokenBalance) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyDeleteEmbeddedWalletsRequestBody : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var organizationId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var parameters: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters
      public var timestampMs: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var _type: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(organizationId: DynamicSwiftSDK.Components.Schemas.Uuid, parameters: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters, timestampMs: DynamicSwiftSDK.Components.Schemas.NonEmptyString, _type: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case organizationId
        case parameters
        case timestampMs
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody, b: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyDeleteEmbeddedWalletsRequestBodyParameters : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletIds: [DynamicSwiftSDK.Components.Schemas.Uuid]
      public var deleteWithoutExport: Swift.Bool?
      public init(walletIds: [DynamicSwiftSDK.Components.Schemas.Uuid], deleteWithoutExport: Swift.Bool? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletIds
        case deleteWithoutExport
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters, b: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct DeleteEmbeddedWalletsRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest
      public init(turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeySignedRequest
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest, b: DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CreateWalletAccountRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest
      public init(turnkeySignedRequest: DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case turnkeySignedRequest
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest, b: DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyCreateWalletAccountsRequestBody : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var organizationId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var parameters: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters
      public var timestampMs: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var _type: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(organizationId: DynamicSwiftSDK.Components.Schemas.Uuid, parameters: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters, timestampMs: DynamicSwiftSDK.Components.Schemas.NonEmptyString, _type: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case organizationId
        case parameters
        case timestampMs
        case _type
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody, b: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyCreateWalletAccountsRequestBodyParameters : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var accounts: [DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount]
      public init(walletId: DynamicSwiftSDK.Components.Schemas.Uuid, accounts: [DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case walletId
        case accounts
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters, b: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct TurnkeyWalletAccount : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var curve: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var pathFormat: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public var path: Swift.String
      public var addressFormat: DynamicSwiftSDK.Components.Schemas.NonEmptyString
      public init(curve: DynamicSwiftSDK.Components.Schemas.NonEmptyString, pathFormat: DynamicSwiftSDK.Components.Schemas.NonEmptyString, path: Swift.String, addressFormat: DynamicSwiftSDK.Components.Schemas.NonEmptyString)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case curve
        case pathFormat
        case path
        case addressFormat
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount, b: DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct CreateWaasAccountRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum
      public var clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme?
      public init(chain: DynamicSwiftSDK.Components.Schemas.ChainEnum, clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chain
        case clientKeygenIds
        case thresholdSignatureScheme
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest, b: DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ImportWaasPrivateKeyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var chain: DynamicSwiftSDK.Components.Schemas.ChainEnum
      public var clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme
      public init(chain: DynamicSwiftSDK.Components.Schemas.ChainEnum, clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], thresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case chain
        case clientKeygenIds
        case thresholdSignatureScheme
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest, b: DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SignMessageWithWaasRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var message: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength
      public init(message: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case message
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest, b: DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SignTransactionWithWaasRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var transactionHash: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength
      public init(transactionHash: DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case transactionHash
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.SignTransactionWithWaasRequest, b: DynamicSwiftSDK.Components.Schemas.SignTransactionWithWaasRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ExportWaasWalletPrivateKeyRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var exportId: Swift.String
      public init(exportId: Swift.String)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case exportId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest, b: DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BackupMultipleClientKeySharesRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var encryptedAccountCredentials: [DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength]
      public var passwordEncrypted: Swift.Bool
      public init(encryptedAccountCredentials: [DynamicSwiftSDK.Components.Schemas.NonEmptyStringWith4096MaxLength], passwordEncrypted: Swift.Bool)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case encryptedAccountCredentials
        case passwordEncrypted
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest, b: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BackupMultipleClientKeySharesResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo]
      public init(keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case keyShares
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse, b: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BackupKeySharesToLocationRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var location: DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum
      public init(location: DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case location
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest, b: DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct BackupKeySharesToLocationResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var message: Swift.String
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid
      public var location: DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum
      public init(message: Swift.String, walletId: DynamicSwiftSDK.Components.Schemas.Uuid, location: DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case message
        case walletId
        case location
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse, b: DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RecoverMultipleClientKeySharesRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var keyShareIds: [DynamicSwiftSDK.Components.Schemas.Uuid]?
      public init(keyShareIds: [DynamicSwiftSDK.Components.Schemas.Uuid]? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case keyShareIds
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest, b: DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct RecoverMultipleClientKeySharesResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential]
      public init(keyShares: [DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential])
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case keyShares
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse, b: DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReshareRequest : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var oldThresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme
      public var newThresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme
      public init(clientKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], oldThresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme, newThresholdSignatureScheme: DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case clientKeygenIds
        case oldThresholdSignatureScheme
        case newThresholdSignatureScheme
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.ReshareRequest, b: DynamicSwiftSDK.Components.Schemas.ReshareRequest) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OpenRoomResponse : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var roomId: Swift.String
      public var serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]?
      public var newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]?
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public init(roomId: Swift.String, serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]? = nil, newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]? = nil, walletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case roomId
        case serverKeygenIds
        case newServerKeygenIds
        case walletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OpenRoomResponse, b: DynamicSwiftSDK.Components.Schemas.OpenRoomResponse) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OpenRoomResponseWithServerKeygenIds : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var roomId: Swift.String
      public var serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]?
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public init(roomId: Swift.String, serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]? = nil, walletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case roomId
        case serverKeygenIds
        case newServerKeygenIds
        case walletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds, b: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct OpenRoomResponseForReshare : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var roomId: Swift.String
      public var serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength]
      public var walletId: DynamicSwiftSDK.Components.Schemas.Uuid?
      public init(roomId: Swift.String, serverKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], newServerKeygenIds: [DynamicSwiftSDK.Components.Schemas.NonEmptyBase58StringWith100MaxLength], walletId: DynamicSwiftSDK.Components.Schemas.Uuid? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case roomId
        case serverKeygenIds
        case newServerKeygenIds
        case walletId
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare, b: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct GlobalWalletSettings : Swift.Codable, Swift.Hashable, Swift.Sendable {
      public var id: DynamicSwiftSDK.Components.Schemas.Uuid
      public var walletName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith50MaxLength
      public var popupPageTitle: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith50MaxLength?
      public var walletIconUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyIconUrl?
      public var customCssUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyCssUrl?
      public var termsOfServiceUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrl?
      public var privacyPolicyUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrl?
      public var termsOfServiceAndPrivacyPolicyMarkdown: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyMarkdownText?
      public var enabledAt: Swift.String?
      public init(id: DynamicSwiftSDK.Components.Schemas.Uuid, walletName: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith50MaxLength, popupPageTitle: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyStringWith50MaxLength? = nil, walletIconUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyIconUrl? = nil, customCssUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyCssUrl? = nil, termsOfServiceUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrl? = nil, privacyPolicyUrl: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyUrl? = nil, termsOfServiceAndPrivacyPolicyMarkdown: DynamicSwiftSDK.Components.Schemas.OptionalNonEmptyMarkdownText? = nil, enabledAt: Swift.String? = nil)
      public enum CodingKeys : Swift.String, Swift.CodingKey {
        case id
        case walletName
        case popupPageTitle
        case walletIconUrl
        case customCssUrl
        case termsOfServiceUrl
        case privacyPolicyUrl
        case termsOfServiceAndPrivacyPolicyMarkdown
        case enabledAt
        public init?(rawValue: Swift.String)
        public init?(stringValue: Swift.String)
        public init?(intValue: Swift.Int)
        public typealias RawValue = Swift.String
        public var intValue: Swift.Int? {
          get
        }
        public var rawValue: Swift.String {
          get
        }
        public var stringValue: Swift.String {
          get
        }
      }
      public static func == (a: DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings, b: DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings) -> Swift.Bool
      public func encode(to encoder: any Swift.Encoder) throws
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    @frozen public enum GlobalWalletAccessControlTypeEnum : Swift.String, Swift.Codable, Swift.Hashable, Swift.Sendable, Swift.CaseIterable {
      case allow
      case block
      public init?(rawValue: Swift.String)
      public typealias AllCases = [DynamicSwiftSDK.Components.Schemas.GlobalWalletAccessControlTypeEnum]
      public typealias RawValue = Swift.String
      nonisolated public static var allCases: [DynamicSwiftSDK.Components.Schemas.GlobalWalletAccessControlTypeEnum] {
        get
      }
      public var rawValue: Swift.String {
        get
      }
    }
  }
  public enum Parameters {
    public typealias ChainName = DynamicSwiftSDK.Components.Schemas.ChainEnum
    public typealias AllowlistId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias AllowlistEntryId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias EnvironmentId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias KeyShareId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias ExportId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias GateId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias ProviderId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias ProviderType = DynamicSwiftSDK.Components.Schemas.ProviderEnum
    public typealias InviteId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias MemberId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias MfaDeviceType = DynamicSwiftSDK.Components.Schemas.MFADeviceType
    public typealias OrganizationId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias OriginId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias DeeplinkUrlId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias ProjectId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias SessionId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias TokenId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias OauthAccountId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias UserId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias WalletId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias SdkViewType = DynamicSwiftSDK.Components.Schemas.SdkViewType
    public typealias ResourceType = Swift.String
    public typealias WebhookId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias MessageId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias IncludeSecret = Swift.Bool
    public typealias Cursor = Swift.String
    public typealias ActivityId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias MfaDeviceId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias NetworkId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias CustomHostnameId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias GlobalWalletAccessControlId = DynamicSwiftSDK.Components.Schemas.Uuid
    public typealias GlobalWalletAccessControlDomainId = DynamicSwiftSDK.Components.Schemas.Uuid
  }
  public enum RequestBodies {
  }
  public enum Responses {
    public struct BadRequest : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.BadRequest)
        public var json: DynamicSwiftSDK.Components.Schemas.BadRequest {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.BadRequest.Body, b: DynamicSwiftSDK.Components.Responses.BadRequest.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.BadRequest.Body
      public init(body: DynamicSwiftSDK.Components.Responses.BadRequest.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.BadRequest, b: DynamicSwiftSDK.Components.Responses.BadRequest) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Forbidden : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.Forbidden)
        public var json: DynamicSwiftSDK.Components.Schemas.Forbidden {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.Forbidden.Body, b: DynamicSwiftSDK.Components.Responses.Forbidden.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.Forbidden.Body
      public init(body: DynamicSwiftSDK.Components.Responses.Forbidden.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.Forbidden, b: DynamicSwiftSDK.Components.Responses.Forbidden) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct ForbiddenWithErrorAndPayload : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload)
        public var json: DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload.Body, b: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload.Body
      public init(body: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload, b: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct InternalServerError : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.InternalServerError)
        public var json: DynamicSwiftSDK.Components.Schemas.InternalServerError {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.InternalServerError.Body, b: DynamicSwiftSDK.Components.Responses.InternalServerError.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.InternalServerError.Body
      public init(body: DynamicSwiftSDK.Components.Responses.InternalServerError.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.InternalServerError, b: DynamicSwiftSDK.Components.Responses.InternalServerError) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct MethodNotAllowed : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MethodNotAllowed)
        public var json: DynamicSwiftSDK.Components.Schemas.MethodNotAllowed {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.MethodNotAllowed.Body, b: DynamicSwiftSDK.Components.Responses.MethodNotAllowed.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.MethodNotAllowed.Body
      public init(body: DynamicSwiftSDK.Components.Responses.MethodNotAllowed.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.MethodNotAllowed, b: DynamicSwiftSDK.Components.Responses.MethodNotAllowed) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct NotFound : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.NotFound)
        public var json: DynamicSwiftSDK.Components.Schemas.NotFound {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.NotFound.Body, b: DynamicSwiftSDK.Components.Responses.NotFound.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.NotFound.Body
      public init(body: DynamicSwiftSDK.Components.Responses.NotFound.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.NotFound, b: DynamicSwiftSDK.Components.Responses.NotFound) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct Unauthorized : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.Unauthorized)
        public var json: DynamicSwiftSDK.Components.Schemas.Unauthorized {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.Unauthorized.Body, b: DynamicSwiftSDK.Components.Responses.Unauthorized.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.Unauthorized.Body
      public init(body: DynamicSwiftSDK.Components.Responses.Unauthorized.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.Unauthorized, b: DynamicSwiftSDK.Components.Responses.Unauthorized) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct UnprocessableEntity : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UnprocessableEntity)
        public var json: DynamicSwiftSDK.Components.Schemas.UnprocessableEntity {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.UnprocessableEntity.Body, b: DynamicSwiftSDK.Components.Responses.UnprocessableEntity.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.UnprocessableEntity.Body
      public init(body: DynamicSwiftSDK.Components.Responses.UnprocessableEntity.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.UnprocessableEntity, b: DynamicSwiftSDK.Components.Responses.UnprocessableEntity) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct TooManyRequests : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.TooManyRequests)
        public var json: DynamicSwiftSDK.Components.Schemas.TooManyRequests {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.TooManyRequests.Body, b: DynamicSwiftSDK.Components.Responses.TooManyRequests.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.TooManyRequests.Body
      public init(body: DynamicSwiftSDK.Components.Responses.TooManyRequests.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.TooManyRequests, b: DynamicSwiftSDK.Components.Responses.TooManyRequests) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public struct BadGateway : Swift.Sendable, Swift.Hashable {
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.BadGateway)
        public var json: DynamicSwiftSDK.Components.Schemas.BadGateway {
          get throws
        }
        public static func == (a: DynamicSwiftSDK.Components.Responses.BadGateway.Body, b: DynamicSwiftSDK.Components.Responses.BadGateway.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Components.Responses.BadGateway.Body
      public init(body: DynamicSwiftSDK.Components.Responses.BadGateway.Body)
      public static func == (a: DynamicSwiftSDK.Components.Responses.BadGateway, b: DynamicSwiftSDK.Components.Responses.BadGateway) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum Headers {
  }
}
public enum Operations {
  public enum GetUserFieldsCheck {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Path, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var filter: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams?
        public init(filter: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Query, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserFieldsCheck.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserFieldsCheck.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Headers, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Path, query: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output, b: DynamicSwiftSDK.Operations.GetUserFieldsCheck.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetUserFieldsCheck.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetUserFieldsCheck.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetUserFieldsCheckOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input.Path
      public init(path: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input.Path)
      public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input, b: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output.NoContent {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output, b: DynamicSwiftSDK.Operations.GetUserFieldsCheckOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum InitAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Input.Path, b: DynamicSwiftSDK.Operations.InitAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.InitAuth.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Input.Headers, b: DynamicSwiftSDK.Operations.InitAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.InitAuth.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest)
        public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Input.Body, b: DynamicSwiftSDK.Operations.InitAuth.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.InitAuth.Input.Body
      public init(path: DynamicSwiftSDK.Operations.InitAuth.Input.Path, headers: DynamicSwiftSDK.Operations.InitAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitAuth.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Input, b: DynamicSwiftSDK.Operations.InitAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Output.NoContent, b: DynamicSwiftSDK.Operations.InitAuth.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.InitAuth.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.InitAuth.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.InitAuth.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.InitAuth.Output, b: DynamicSwiftSDK.Operations.InitAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.InitAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.InitAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum InitAuthOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Path, b: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitAuthOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitAuthOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Headers, b: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.InitAuthOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.InitAuthOptions.Input, b: DynamicSwiftSDK.Operations.InitAuthOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.InitAuthOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.InitAuthOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.InitAuthOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.InitAuthOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.InitAuthOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.InitAuthOptions.Output, b: DynamicSwiftSDK.Operations.InitAuthOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.InitAuthOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.InitAuthOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SessionCheck {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheck.Input.Path, b: DynamicSwiftSDK.Operations.SessionCheck.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SessionCheck.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionCheck.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionCheck.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheck.Input.Headers, b: DynamicSwiftSDK.Operations.SessionCheck.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SessionCheck.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SessionCheck.Input.Path, headers: DynamicSwiftSDK.Operations.SessionCheck.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SessionCheck.Input, b: DynamicSwiftSDK.Operations.SessionCheck.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheck.Output.NoContent, b: DynamicSwiftSDK.Operations.SessionCheck.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SessionCheck.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SessionCheck.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SessionCheck.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SessionCheck.Output, b: DynamicSwiftSDK.Operations.SessionCheck.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SessionCheck.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SessionCheck.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SessionCheckOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Path, b: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionCheckOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionCheckOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SessionCheckOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SessionCheckOptions.Input, b: DynamicSwiftSDK.Operations.SessionCheckOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SessionCheckOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SessionCheckOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SessionCheckOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SessionCheckOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SessionCheckOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SessionCheckOptions.Output, b: DynamicSwiftSDK.Operations.SessionCheckOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SessionCheckOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SessionCheckOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ScanUrl {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Input.Path, b: DynamicSwiftSDK.Operations.ScanUrl.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ScanUrl.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ScanUrl.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ScanUrl.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Input.Headers, b: DynamicSwiftSDK.Operations.ScanUrl.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ScanUrl.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Input.Body, b: DynamicSwiftSDK.Operations.ScanUrl.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ScanUrl.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ScanUrl.Input.Path, headers: DynamicSwiftSDK.Operations.ScanUrl.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ScanUrl.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Input, b: DynamicSwiftSDK.Operations.ScanUrl.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok.Body, b: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok, b: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.ScanUrl.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.ScanUrl.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ScanUrl.Output, b: DynamicSwiftSDK.Operations.ScanUrl.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ScanUrl.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ScanUrl.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ScanUrlOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Path, b: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ScanUrlOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ScanUrlOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ScanUrlOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ScanUrlOptions.Input, b: DynamicSwiftSDK.Operations.ScanUrlOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ScanUrlOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ScanUrlOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ScanUrlOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ScanUrlOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ScanUrlOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ScanUrlOptions.Output, b: DynamicSwiftSDK.Operations.ScanUrlOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ScanUrlOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ScanUrlOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateSVMTransaction {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Path, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateSVMTransaction.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateSVMTransaction.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Body, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output, b: DynamicSwiftSDK.Operations.SimulateSVMTransaction.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateSVMTransaction.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateSVMTransaction.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateSVMTransactionOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Path, b: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input, b: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output, b: DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateSVMTransactionOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateEVMTransaction {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Path, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateEVMTransaction.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateEVMTransaction.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Body, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output, b: DynamicSwiftSDK.Operations.SimulateEVMTransaction.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateEVMTransaction.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateEVMTransaction.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateEVMTransactionOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Path, b: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input, b: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output, b: DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateEVMTransactionOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateUserOp {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Path, b: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateUserOp.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateUserOp.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Body, b: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SimulateUserOp.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Input, b: DynamicSwiftSDK.Operations.SimulateUserOp.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok, b: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SimulateUserOp.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOp.Output, b: DynamicSwiftSDK.Operations.SimulateUserOp.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateUserOp.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateUserOp.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SimulateUserOpOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Path, b: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateUserOpOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SimulateUserOpOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input, b: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output, b: DynamicSwiftSDK.Operations.SimulateUserOpOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SimulateUserOpOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SimulateUserOpOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExternalAuthSignin {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Path, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthSignin.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthSignin.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Headers, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Body, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok.Body, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output, b: DynamicSwiftSDK.Operations.ExternalAuthSignin.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExternalAuthSignin.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExternalAuthSignin.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExternalAuthSigninOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Path, b: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input, b: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output, b: DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExternalAuthSigninOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OptimizeTransaction {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: Swift.String
        public init(environmentId: Swift.String)
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Path, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptimizeTransaction.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptimizeTransaction.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Headers, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest)
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Body, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Body
      public init(path: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Path, headers: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OptimizeTransaction.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Input, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OptimizeTransaction.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransaction.Output, b: DynamicSwiftSDK.Operations.OptimizeTransaction.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OptimizeTransaction.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OptimizeTransaction.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OptimizeTransactionOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Path, b: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptimizeTransactionOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptimizeTransactionOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input, b: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output, b: DynamicSwiftSDK.Operations.OptimizeTransactionOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OptimizeTransactionOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OptimizeTransactionOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExternalAuthVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Path, b: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Headers, b: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Body, b: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input, b: DynamicSwiftSDK.Operations.ExternalAuthVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      case gone(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var gone: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerify.Output, b: DynamicSwiftSDK.Operations.ExternalAuthVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExternalAuthVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExternalAuthVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExternalAuthVerifyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Path, b: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input, b: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output, b: DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExternalAuthVerifyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetAuthToken {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Input.Path, b: DynamicSwiftSDK.Operations.GetAuthToken.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetAuthToken.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var _type: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType?
        public init(_type: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Input.Query, b: DynamicSwiftSDK.Operations.GetAuthToken.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetAuthToken.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthToken.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthToken.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Input.Headers, b: DynamicSwiftSDK.Operations.GetAuthToken.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetAuthToken.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetAuthToken.Input.Path, query: DynamicSwiftSDK.Operations.GetAuthToken.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetAuthToken.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Input, b: DynamicSwiftSDK.Operations.GetAuthToken.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken)
          public var json: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok, b: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetAuthToken.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthToken.Output, b: DynamicSwiftSDK.Operations.GetAuthToken.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetAuthToken.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetAuthToken.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetAuthTokenOpts {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Path, b: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthTokenOpts.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthTokenOpts.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Headers, b: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Path, headers: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input, b: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output.NoContent, b: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output, b: DynamicSwiftSDK.Operations.GetAuthTokenOpts.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetAuthTokenOpts.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetAuthTokenOpts.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmbeddedWalletPasscode {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Path, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret)
          public var json: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.NotFound, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscode.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmbeddedWalletPasscodeOption {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Path, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output.NoContent, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmbeddedWalletPasscodeOption.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SelectUserWallet {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Path, b: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SelectUserWallet.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SelectUserWallet.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Headers, b: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Body, b: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Path, headers: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SelectUserWallet.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Input, b: DynamicSwiftSDK.Operations.SelectUserWallet.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok, b: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SelectUserWallet.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SelectUserWallet.Output, b: DynamicSwiftSDK.Operations.SelectUserWallet.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SelectUserWallet.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SelectUserWallet.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SelectUserWalletOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Path, b: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SelectUserWalletOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SelectUserWalletOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input, b: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output, b: DynamicSwiftSDK.Operations.SelectUserWalletOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SelectUserWalletOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SelectUserWalletOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ClaimEmbeddedWallet {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Path, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Headers, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Body, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Path, headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok.Body, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ClaimEmbeddedWallet.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ClaimEmbeddedWalletOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Path, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output, b: DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ClaimEmbeddedWalletOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmbeddedWalletBackups {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Path, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret)
          public var json: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.NotFound, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmbeddedWalletBackups.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmbeddedWalletBackupOption {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Path, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output.NoContent, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmbeddedWalletBackupOption.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpgradeEmbeddedWalletToV2 {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Path, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Headers, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request)
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Body, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Body
      public init(path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Path, headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created.Body, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created)
      public var created: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output.Created {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpgradeEmbeddedWalletToV2Option {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Path, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Headers, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Path, headers: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output.NoContent, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output, b: DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpgradeEmbeddedWalletToV2Option.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetHealthcheck {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Path, b: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetHealthcheck.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetHealthcheck.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Headers, b: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Path, headers: DynamicSwiftSDK.Operations.GetHealthcheck.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Input, b: DynamicSwiftSDK.Operations.GetHealthcheck.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.HealthcheckResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.HealthcheckResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok, b: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetHealthcheck.Output.Ok {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheck.Output, b: DynamicSwiftSDK.Operations.GetHealthcheck.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetHealthcheck.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetHealthcheck.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetHealthcheckOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetHealthcheckOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetHealthcheckOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Headers, b: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input, b: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output, b: DynamicSwiftSDK.Operations.GetHealthcheckOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetHealthcheckOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetHealthcheckOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RefreshAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Input.Path, b: DynamicSwiftSDK.Operations.RefreshAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RefreshAuth.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Input.Headers, b: DynamicSwiftSDK.Operations.RefreshAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RefreshAuth.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RefreshAuth.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshAuth.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Input, b: DynamicSwiftSDK.Operations.RefreshAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok, b: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RefreshAuth.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RefreshAuth.Output, b: DynamicSwiftSDK.Operations.RefreshAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RefreshAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RefreshAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RefreshOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshOptions.Input.Path, b: DynamicSwiftSDK.Operations.RefreshOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RefreshOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RefreshOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RefreshOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RefreshOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RefreshOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RefreshOptions.Input, b: DynamicSwiftSDK.Operations.RefreshOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RefreshOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RefreshOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RefreshOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RefreshOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RefreshOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RefreshOptions.Output, b: DynamicSwiftSDK.Operations.RefreshOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RefreshOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RefreshOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmailProvider {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Path, b: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var email: Swift.String
        public init(email: Swift.String)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Query, b: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmailProvider.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmailProvider.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Path, query: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Query, headers: DynamicSwiftSDK.Operations.GetEmailProvider.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Input, b: DynamicSwiftSDK.Operations.GetEmailProvider.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmailProviderResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.EmailProviderResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok, b: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetEmailProvider.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmailProvider.Output, b: DynamicSwiftSDK.Operations.GetEmailProvider.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmailProvider.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmailProvider.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EmailProviderOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Path, b: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmailProviderOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmailProviderOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Headers, b: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmailProviderOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EmailProviderOptions.Input, b: DynamicSwiftSDK.Operations.EmailProviderOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EmailProviderOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.EmailProviderOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.EmailProviderOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.EmailProviderOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.EmailProviderOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EmailProviderOptions.Output, b: DynamicSwiftSDK.Operations.EmailProviderOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EmailProviderOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EmailProviderOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthLoginUrl {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Path, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginUrl.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginUrl.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Headers, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginUrl.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Input, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl)
          public var json: DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthLoginUrl.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrl.Output, b: DynamicSwiftSDK.Operations.OauthLoginUrl.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthLoginUrl.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthLoginUrl.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthLoginUrlOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginUrlOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginUrlOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input, b: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output, b: DynamicSwiftSDK.Operations.OauthLoginUrlOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthLoginUrlOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthLoginUrlOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthLogin {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Input.Path, b: DynamicSwiftSDK.Operations.OauthLogin.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthLogin.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLogin.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLogin.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Input.Headers, b: DynamicSwiftSDK.Operations.OauthLogin.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthLogin.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthLogin.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLogin.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Input, b: DynamicSwiftSDK.Operations.OauthLogin.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Found : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var location: Swift.String?
          public init(location: Swift.String? = nil)
          public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Output.Found.Headers, b: DynamicSwiftSDK.Operations.OauthLogin.Output.Found.Headers) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: DynamicSwiftSDK.Operations.OauthLogin.Output.Found.Headers
        public init(headers: DynamicSwiftSDK.Operations.OauthLogin.Output.Found.Headers = .init())
        public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Output.Found, b: DynamicSwiftSDK.Operations.OauthLogin.Output.Found) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case found(DynamicSwiftSDK.Operations.OauthLogin.Output.Found)
      public var found: DynamicSwiftSDK.Operations.OauthLogin.Output.Found {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthLogin.Output, b: DynamicSwiftSDK.Operations.OauthLogin.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthLogin.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthLogin.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthLoginOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthLoginOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthLoginOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginOptions.Input, b: DynamicSwiftSDK.Operations.OauthLoginOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthLoginOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthLoginOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthLoginOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthLoginOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthLoginOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthLoginOptions.Output, b: DynamicSwiftSDK.Operations.OauthLoginOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthLoginOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthLoginOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthRedirectCode {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Path, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var code: DynamicSwiftSDK.Components.Schemas.OAuthCode?
        public var scope: Swift.String?
        public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var authuser: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var prompt: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var error: DynamicSwiftSDK.Components.Schemas.OAuthError?
        public init(code: DynamicSwiftSDK.Components.Schemas.OAuthCode? = nil, scope: Swift.String? = nil, state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, authuser: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, prompt: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, error: DynamicSwiftSDK.Components.Schemas.OAuthError? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Query, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectCode.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectCode.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Path, query: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.OauthRedirectCode.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Input, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case html(OpenAPIRuntime.HTTPBody)
          public var html: OpenAPIRuntime.HTTPBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Ok {
        get throws
      }
      public struct Found : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var location: Swift.String?
          public init(location: Swift.String? = nil)
          public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found.Headers) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found.Headers
        public init(headers: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found.Headers = .init())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case found(DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found)
      public var found: DynamicSwiftSDK.Operations.OauthRedirectCode.Output.Found {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectCode.Output, b: DynamicSwiftSDK.Operations.OauthRedirectCode.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case html
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthRedirectCode.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthRedirectCode.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthRedirectOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input, b: DynamicSwiftSDK.Operations.OauthRedirectOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthRedirectOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output, b: DynamicSwiftSDK.Operations.OauthRedirectOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthRedirectOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthRedirectOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CbOauthRedirect {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Path, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var code: DynamicSwiftSDK.Components.Schemas.OAuthCode?
        public var scope: Swift.String?
        public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var authuser: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var prompt: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var error: DynamicSwiftSDK.Components.Schemas.OAuthError?
        public init(code: DynamicSwiftSDK.Components.Schemas.OAuthCode? = nil, scope: Swift.String? = nil, state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, authuser: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, prompt: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, error: DynamicSwiftSDK.Components.Schemas.OAuthError? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Query, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CbOauthRedirect.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CbOauthRedirect.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Headers, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Path, query: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.CbOauthRedirect.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Input, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case html(OpenAPIRuntime.HTTPBody)
          public var html: OpenAPIRuntime.HTTPBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok.Body, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Ok {
        get throws
      }
      public struct Found : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var location: Swift.String?
          public init(location: Swift.String? = nil)
          public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found.Headers, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found.Headers) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found.Headers
        public init(headers: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found.Headers = .init())
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case found(DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found)
      public var found: DynamicSwiftSDK.Operations.CbOauthRedirect.Output.Found {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirect.Output, b: DynamicSwiftSDK.Operations.CbOauthRedirect.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case html
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CbOauthRedirect.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CbOauthRedirect.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CbOauthRedirectOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Path, b: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CbOauthRedirectOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CbOauthRedirectOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input, b: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output, b: DynamicSwiftSDK.Operations.CbOauthRedirectOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CbOauthRedirectOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CbOauthRedirectOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthRedirectApple {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Path, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectApple.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectApple.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case urlEncodedForm(DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Body, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Body
      public init(path: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthRedirectApple.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Input, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case html(OpenAPIRuntime.HTTPBody)
          public var html: OpenAPIRuntime.HTTPBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Ok {
        get throws
      }
      public struct Found : Swift.Sendable, Swift.Hashable {
        public struct Headers : Swift.Sendable, Swift.Hashable {
          public var location: Swift.String?
          public init(location: Swift.String? = nil)
          public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found.Headers) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var headers: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found.Headers
        public init(headers: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found.Headers = .init())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case found(DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found)
      public var found: DynamicSwiftSDK.Operations.OauthRedirectApple.Output.Found {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectApple.Output, b: DynamicSwiftSDK.Operations.OauthRedirectApple.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case html
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthRedirectApple.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthRedirectApple.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthRedirectAppleOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input, b: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output, b: DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthRedirectAppleOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthAuthorizeHtml {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Path, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var scope: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var redirectUri: DynamicSwiftSDK.Components.Schemas.OauthRedirectUri?
        public init(scope: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, redirectUri: DynamicSwiftSDK.Components.Schemas.OauthRedirectUri? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Query, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthAuthorizeHtml.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthAuthorizeHtml.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Headers, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Path, query: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case html(OpenAPIRuntime.HTTPBody)
          public var html: OpenAPIRuntime.HTTPBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.NotFound, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtml.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case html
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthAuthorizeHtml.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthAuthorizeHtml.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthAuthorizeHtmlOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output, b: DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthAuthorizeHtmlOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Input.Path, b: DynamicSwiftSDK.Operations.OauthVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Input.Headers, b: DynamicSwiftSDK.Operations.OauthVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthRequest)
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Input.Body, b: DynamicSwiftSDK.Operations.OauthVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.OauthVerify.Input.Body
      public init(path: DynamicSwiftSDK.Operations.OauthVerify.Input.Path, headers: DynamicSwiftSDK.Operations.OauthVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthVerify.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Input, b: DynamicSwiftSDK.Operations.OauthVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok, b: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthVerify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthVerify.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthVerify.Output, b: DynamicSwiftSDK.Operations.OauthVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthVerifyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthVerifyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthVerifyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input, b: DynamicSwiftSDK.Operations.OauthVerifyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthVerifyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output, b: DynamicSwiftSDK.Operations.OauthVerifyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthVerifyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthVerifyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum FarcasterSignIn {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Path, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterSignIn.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterSignIn.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Headers, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Body, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.FarcasterSignIn.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Input, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok.Body, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.FarcasterSignIn.Output.Ok {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignIn.Output, b: DynamicSwiftSDK.Operations.FarcasterSignIn.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.FarcasterSignIn.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.FarcasterSignIn.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum FarcasterSignInOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Path, b: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterSignInOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterSignInOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Headers, b: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input, b: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output, b: DynamicSwiftSDK.Operations.FarcasterSignInOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.FarcasterSignInOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.FarcasterSignInOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum FarcasterVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Path, b: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Headers, b: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Body, b: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.FarcasterVerify.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Input, b: DynamicSwiftSDK.Operations.FarcasterVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok, b: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.FarcasterVerify.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerify.Output, b: DynamicSwiftSDK.Operations.FarcasterVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.FarcasterVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.FarcasterVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum FarcasterVerifyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Path, b: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterVerifyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.FarcasterVerifyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input, b: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output, b: DynamicSwiftSDK.Operations.FarcasterVerifyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.FarcasterVerifyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.FarcasterVerifyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthSignIn {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Input.Path, b: DynamicSwiftSDK.Operations.OauthSignIn.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthSignIn.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthSignIn.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthSignIn.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Input.Headers, b: DynamicSwiftSDK.Operations.OauthSignIn.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthSignIn.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthRequest)
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Input.Body, b: DynamicSwiftSDK.Operations.OauthSignIn.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.OauthSignIn.Input.Body
      public init(path: DynamicSwiftSDK.Operations.OauthSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.OauthSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthSignIn.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Input, b: DynamicSwiftSDK.Operations.OauthSignIn.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok, b: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthSignIn.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthSignIn.Output, b: DynamicSwiftSDK.Operations.OauthSignIn.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthSignIn.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthSignIn.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthSignInOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthSignInOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthSignInOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthSignInOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthSignInOptions.Input, b: DynamicSwiftSDK.Operations.OauthSignInOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthSignInOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthSignInOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthSignInOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthSignInOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthSignInOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthSignInOptions.Output, b: DynamicSwiftSDK.Operations.OauthSignInOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthSignInOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthSignInOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthResult {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Input.Path, b: DynamicSwiftSDK.Operations.OauthResult.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthResult.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthResult.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthResult.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Input.Headers, b: DynamicSwiftSDK.Operations.OauthResult.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthResult.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthResultRequest)
        public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Input.Body, b: DynamicSwiftSDK.Operations.OauthResult.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.OauthResult.Input.Body
      public init(path: DynamicSwiftSDK.Operations.OauthResult.Input.Path, headers: DynamicSwiftSDK.Operations.OauthResult.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.OauthResult.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Input, b: DynamicSwiftSDK.Operations.OauthResult.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OauthResultResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.OauthResultResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Output.Ok.Body, b: DynamicSwiftSDK.Operations.OauthResult.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.OauthResult.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.OauthResult.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Output.Ok, b: DynamicSwiftSDK.Operations.OauthResult.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.OauthResult.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.OauthResult.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthResult.Output, b: DynamicSwiftSDK.Operations.OauthResult.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthResult.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthResult.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OauthResultOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var providerType: DynamicSwiftSDK.Components.Parameters.ProviderType
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, providerType: DynamicSwiftSDK.Components.Parameters.ProviderType)
        public static func == (a: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Path, b: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthResultOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OauthResultOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OauthResultOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OauthResultOptions.Input, b: DynamicSwiftSDK.Operations.OauthResultOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OauthResultOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OauthResultOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OauthResultOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OauthResultOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OauthResultOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OauthResultOptions.Output, b: DynamicSwiftSDK.Operations.OauthResultOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OauthResultOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OauthResultOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetNonce {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Input.Path, b: DynamicSwiftSDK.Operations.GetNonce.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetNonce.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetNonce.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetNonce.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Input.Headers, b: DynamicSwiftSDK.Operations.GetNonce.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetNonce.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetNonce.Input.Path, headers: DynamicSwiftSDK.Operations.GetNonce.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Input, b: DynamicSwiftSDK.Operations.GetNonce.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.NonceResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.NonceResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetNonce.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetNonce.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetNonce.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Output.Ok, b: DynamicSwiftSDK.Operations.GetNonce.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetNonce.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetNonce.Output.Ok {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Output.InternalServerError, b: DynamicSwiftSDK.Operations.GetNonce.Output.InternalServerError) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(DynamicSwiftSDK.Operations.GetNonce.Output.InternalServerError)
      public static var internalServerError: DynamicSwiftSDK.Operations.GetNonce.Output {
        get
      }
      public var internalServerError: DynamicSwiftSDK.Operations.GetNonce.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetNonce.Output, b: DynamicSwiftSDK.Operations.GetNonce.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetNonce.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetNonce.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum NonceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.NonceOptions.Input.Path, b: DynamicSwiftSDK.Operations.NonceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.NonceOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.NonceOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.NonceOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.NonceOptions.Input.Headers, b: DynamicSwiftSDK.Operations.NonceOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.NonceOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.NonceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.NonceOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.NonceOptions.Input, b: DynamicSwiftSDK.Operations.NonceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.NonceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.NonceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.NonceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.NonceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.NonceOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.NonceOptions.Output, b: DynamicSwiftSDK.Operations.NonceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.NonceOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.NonceOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PublishEvent {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Input.Path, b: DynamicSwiftSDK.Operations.PublishEvent.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.PublishEvent.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PublishEvent.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PublishEvent.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Input.Headers, b: DynamicSwiftSDK.Operations.PublishEvent.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.PublishEvent.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.PublishEvents)
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Input.Body, b: DynamicSwiftSDK.Operations.PublishEvent.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.PublishEvent.Input.Body
      public init(path: DynamicSwiftSDK.Operations.PublishEvent.Input.Path, headers: DynamicSwiftSDK.Operations.PublishEvent.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.PublishEvent.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Input, b: DynamicSwiftSDK.Operations.PublishEvent.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Output.NoContent, b: DynamicSwiftSDK.Operations.PublishEvent.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.PublishEvent.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.PublishEvent.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.PublishEvent.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Output.NotFound, b: DynamicSwiftSDK.Operations.PublishEvent.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.PublishEvent.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.PublishEvent.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.PublishEvent.Output.NotFound {
        get throws
      }
      public struct InternalServerError : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Output.InternalServerError, b: DynamicSwiftSDK.Operations.PublishEvent.Output.InternalServerError) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case internalServerError(DynamicSwiftSDK.Operations.PublishEvent.Output.InternalServerError)
      public static var internalServerError: DynamicSwiftSDK.Operations.PublishEvent.Output {
        get
      }
      public var internalServerError: DynamicSwiftSDK.Operations.PublishEvent.Output.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.PublishEvent.Output, b: DynamicSwiftSDK.Operations.PublishEvent.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.PublishEvent.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.PublishEvent.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EventsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.EventsOptions.Input.Path, b: DynamicSwiftSDK.Operations.EventsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EventsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EventsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EventsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EventsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.EventsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EventsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EventsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EventsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EventsOptions.Input, b: DynamicSwiftSDK.Operations.EventsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EventsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.EventsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.EventsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.EventsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.EventsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EventsOptions.Output, b: DynamicSwiftSDK.Operations.EventsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EventsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EventsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEnvironmentSettings {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Path, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var sdkVersion: Swift.String?
        public init(sdkVersion: Swift.String? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Query, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEnvironmentSettings.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEnvironmentSettings.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Headers, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Path, query: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Query = .init(), headers: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.ProjectSettings)
          public var json: DynamicSwiftSDK.Components.Schemas.ProjectSettings {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.Ok {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.NotFound, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output, b: DynamicSwiftSDK.Operations.GetEnvironmentSettings.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEnvironmentSettings.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEnvironmentSettings.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SettingsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SettingsOptions.Input.Path, b: DynamicSwiftSDK.Operations.SettingsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SettingsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SettingsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SettingsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SettingsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SettingsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SettingsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SettingsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SettingsOptions.Input, b: DynamicSwiftSDK.Operations.SettingsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SettingsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SettingsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SettingsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SettingsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SettingsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SettingsOptions.Output, b: DynamicSwiftSDK.Operations.SettingsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SettingsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SettingsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum LogDynamicSdkSettings {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Path, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.LogDynamicSdkSettings.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.LogDynamicSdkSettings.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Headers, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest)
        public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Body, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Body
      public init(path: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Path, headers: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output.NoContent, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output.NoContent {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output, b: DynamicSwiftSDK.Operations.LogDynamicSdkSettings.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.LogDynamicSdkSettings.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.LogDynamicSdkSettings.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SdkSettingsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Path, b: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SdkSettingsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SdkSettingsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input, b: DynamicSwiftSDK.Operations.SdkSettingsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SdkSettingsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output, b: DynamicSwiftSDK.Operations.SdkSettingsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SdkSettingsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SdkSettingsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyLink {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Input.Path, b: DynamicSwiftSDK.Operations.VerifyLink.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyLink.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyLink.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyLink.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyLink.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyLink.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.VerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Input.Body, b: DynamicSwiftSDK.Operations.VerifyLink.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifyLink.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifyLink.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyLink.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyLink.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Input, b: DynamicSwiftSDK.Operations.VerifyLink.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok, b: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifyLink.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifyLink.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyLink.Output, b: DynamicSwiftSDK.Operations.VerifyLink.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyLink.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyLink.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyLinkOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyLinkOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyLinkOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input, b: DynamicSwiftSDK.Operations.VerifyLinkOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyLinkOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output, b: DynamicSwiftSDK.Operations.VerifyLinkOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyLinkOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyLinkOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyMergeUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Path, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyMergeUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyMergeUsers.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Body, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output, b: DynamicSwiftSDK.Operations.VerifyMergeUsers.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyMergeUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyMergeUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyMergeUsersOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input, b: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output, b: DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyMergeUsersOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyTransfer {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Path, b: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyTransfer.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyTransfer.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.VerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Body, b: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyTransfer.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Input, b: DynamicSwiftSDK.Operations.VerifyTransfer.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok, b: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifyTransfer.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyTransfer.Output, b: DynamicSwiftSDK.Operations.VerifyTransfer.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyTransfer.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyTransfer.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyTransferOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyTransferOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyTransferOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input, b: DynamicSwiftSDK.Operations.VerifyTransferOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyTransferOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output, b: DynamicSwiftSDK.Operations.VerifyTransferOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyTransferOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyTransferOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RevokeSession {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSession.Input.Path, b: DynamicSwiftSDK.Operations.RevokeSession.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RevokeSession.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RevokeSession.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RevokeSession.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSession.Input.Headers, b: DynamicSwiftSDK.Operations.RevokeSession.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RevokeSession.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RevokeSession.Input.Path, headers: DynamicSwiftSDK.Operations.RevokeSession.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RevokeSession.Input, b: DynamicSwiftSDK.Operations.RevokeSession.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSession.Output.NoContent, b: DynamicSwiftSDK.Operations.RevokeSession.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RevokeSession.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RevokeSession.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RevokeSession.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RevokeSession.Output, b: DynamicSwiftSDK.Operations.RevokeSession.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RevokeSession.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RevokeSession.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RevokeSessionOption {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Path, b: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RevokeSessionOption.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RevokeSessionOption.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Headers, b: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Path, headers: DynamicSwiftSDK.Operations.RevokeSessionOption.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RevokeSessionOption.Input, b: DynamicSwiftSDK.Operations.RevokeSessionOption.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RevokeSessionOption.Output.NoContent, b: DynamicSwiftSDK.Operations.RevokeSessionOption.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RevokeSessionOption.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RevokeSessionOption.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RevokeSessionOption.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RevokeSessionOption.Output, b: DynamicSwiftSDK.Operations.RevokeSessionOption.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RevokeSessionOption.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RevokeSessionOption.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyUnlink {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Path, b: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyUnlink.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyUnlink.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Body, b: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyUnlink.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Input, b: DynamicSwiftSDK.Operations.VerifyUnlink.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok, b: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifyUnlink.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlink.Output, b: DynamicSwiftSDK.Operations.VerifyUnlink.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyUnlink.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyUnlink.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyUnlinkOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyUnlinkOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyUnlinkOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input, b: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output, b: DynamicSwiftSDK.Operations.VerifyUnlinkOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyUnlinkOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyUnlinkOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum Prefetch {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Input.Path, b: DynamicSwiftSDK.Operations.Prefetch.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.Prefetch.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Prefetch.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Prefetch.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Input.Headers, b: DynamicSwiftSDK.Operations.Prefetch.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.Prefetch.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.PrefetchRequest)
        public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Input.Body, b: DynamicSwiftSDK.Operations.Prefetch.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.Prefetch.Input.Body
      public init(path: DynamicSwiftSDK.Operations.Prefetch.Input.Path, headers: DynamicSwiftSDK.Operations.Prefetch.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Prefetch.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Input, b: DynamicSwiftSDK.Operations.Prefetch.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Accepted : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Output.Accepted, b: DynamicSwiftSDK.Operations.Prefetch.Output.Accepted) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case accepted(DynamicSwiftSDK.Operations.Prefetch.Output.Accepted)
      public static var accepted: DynamicSwiftSDK.Operations.Prefetch.Output {
        get
      }
      public var accepted: DynamicSwiftSDK.Operations.Prefetch.Output.Accepted {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Output.NotFound, b: DynamicSwiftSDK.Operations.Prefetch.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.Prefetch.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.Prefetch.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.Prefetch.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.Prefetch.Output, b: DynamicSwiftSDK.Operations.Prefetch.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.Prefetch.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.Prefetch.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyPrefetch {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Path, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyPrefetch.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyPrefetch.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyPrefetch.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Input, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyPrefetch.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NotFound, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.VerifyPrefetch.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.VerifyPrefetch.Output.NotFound {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyPrefetch.Output, b: DynamicSwiftSDK.Operations.VerifyPrefetch.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyPrefetch.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyPrefetch.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateVisit {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Input.Path, b: DynamicSwiftSDK.Operations.CreateVisit.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateVisit.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateVisit.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateVisit.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Input.Headers, b: DynamicSwiftSDK.Operations.CreateVisit.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateVisit.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ConnectRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Input.Body, b: DynamicSwiftSDK.Operations.CreateVisit.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateVisit.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateVisit.Input.Path, headers: DynamicSwiftSDK.Operations.CreateVisit.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateVisit.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Input, b: DynamicSwiftSDK.Operations.CreateVisit.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Accepted : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Output.Accepted, b: DynamicSwiftSDK.Operations.CreateVisit.Output.Accepted) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case accepted(DynamicSwiftSDK.Operations.CreateVisit.Output.Accepted)
      public static var accepted: DynamicSwiftSDK.Operations.CreateVisit.Output {
        get
      }
      public var accepted: DynamicSwiftSDK.Operations.CreateVisit.Output.Accepted {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Output.NotFound, b: DynamicSwiftSDK.Operations.CreateVisit.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.CreateVisit.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.CreateVisit.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.CreateVisit.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateVisit.Output, b: DynamicSwiftSDK.Operations.CreateVisit.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateVisit.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateVisit.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OptionsConnect {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Input.Path, b: DynamicSwiftSDK.Operations.OptionsConnect.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OptionsConnect.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptionsConnect.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OptionsConnect.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Input.Headers, b: DynamicSwiftSDK.Operations.OptionsConnect.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OptionsConnect.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OptionsConnect.Input.Path, headers: DynamicSwiftSDK.Operations.OptionsConnect.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Input, b: DynamicSwiftSDK.Operations.OptionsConnect.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Output.NoContent, b: DynamicSwiftSDK.Operations.OptionsConnect.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OptionsConnect.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OptionsConnect.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OptionsConnect.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Output.NotFound, b: DynamicSwiftSDK.Operations.OptionsConnect.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.OptionsConnect.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.OptionsConnect.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.OptionsConnect.Output.NotFound {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OptionsConnect.Output, b: DynamicSwiftSDK.Operations.OptionsConnect.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OptionsConnect.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OptionsConnect.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum Verify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.Verify.Input.Path, b: DynamicSwiftSDK.Operations.Verify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.Verify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Verify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Verify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.Verify.Input.Headers, b: DynamicSwiftSDK.Operations.Verify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.Verify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.VerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.Verify.Input.Body, b: DynamicSwiftSDK.Operations.Verify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.Verify.Input.Body
      public init(path: DynamicSwiftSDK.Operations.Verify.Input.Path, headers: DynamicSwiftSDK.Operations.Verify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Verify.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.Verify.Input, b: DynamicSwiftSDK.Operations.Verify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.Verify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.Verify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.Verify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.Verify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.Verify.Output.Ok, b: DynamicSwiftSDK.Operations.Verify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.Verify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.Verify.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.TooManyRequests)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.TooManyRequests {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.Verify.Output, b: DynamicSwiftSDK.Operations.Verify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.Verify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.Verify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyOptions.Input, b: DynamicSwiftSDK.Operations.VerifyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyOptions.Output, b: DynamicSwiftSDK.Operations.VerifyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetAuthenticatedUser {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Path, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthenticatedUser.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAuthenticatedUser.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Headers, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Path, headers: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SdkUser)
          public var json: DynamicSwiftSDK.Components.Schemas.SdkUser {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output, b: DynamicSwiftSDK.Operations.GetAuthenticatedUser.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetAuthenticatedUser.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetAuthenticatedUser.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpdateSelf {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Input.Path, b: DynamicSwiftSDK.Operations.UpdateSelf.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpdateSelf.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateSelf.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateSelf.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Input.Headers, b: DynamicSwiftSDK.Operations.UpdateSelf.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpdateSelf.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UserFields)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Input.Body, b: DynamicSwiftSDK.Operations.UpdateSelf.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.UpdateSelf.Input.Body
      public init(path: DynamicSwiftSDK.Operations.UpdateSelf.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateSelf.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateSelf.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Input, b: DynamicSwiftSDK.Operations.UpdateSelf.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok.Body, b: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok, b: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.UpdateSelf.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateSelf.Output, b: DynamicSwiftSDK.Operations.UpdateSelf.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpdateSelf.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpdateSelf.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum HardDeleteUser {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Path, b: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.HardDeleteUser.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.HardDeleteUser.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Headers, b: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Path, headers: DynamicSwiftSDK.Operations.HardDeleteUser.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.HardDeleteUser.Input, b: DynamicSwiftSDK.Operations.HardDeleteUser.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.HardDeleteUser.Output.NoContent, b: DynamicSwiftSDK.Operations.HardDeleteUser.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.HardDeleteUser.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.HardDeleteUser.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.HardDeleteUser.Output.NoContent {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.HardDeleteUser.Output, b: DynamicSwiftSDK.Operations.HardDeleteUser.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.HardDeleteUser.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.HardDeleteUser.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UsersOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UsersOptions.Input.Path, b: DynamicSwiftSDK.Operations.UsersOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UsersOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UsersOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UsersOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UsersOptions.Input.Headers, b: DynamicSwiftSDK.Operations.UsersOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UsersOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.UsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.UsersOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.UsersOptions.Input, b: DynamicSwiftSDK.Operations.UsersOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UsersOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.UsersOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.UsersOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.UsersOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.UsersOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UsersOptions.Output, b: DynamicSwiftSDK.Operations.UsersOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UsersOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UsersOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpdateEmbeddedWalletRecoveryEmail {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Path, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Headers, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Body, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Body
      public init(path: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NoContent, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NoContent {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NotFound, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output, b: DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpdateEmbeddedWalletRecoveryEmail.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RecoveryEmailOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Path, b: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoveryEmailOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoveryEmailOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input, b: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output, b: DynamicSwiftSDK.Operations.RecoveryEmailOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RecoveryEmailOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RecoveryEmailOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetUserPasskeys {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Path, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserPasskeys.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserPasskeys.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Headers, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Path, headers: DynamicSwiftSDK.Operations.GetUserPasskeys.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Input, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetUserPasskeys.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetUserPasskeys.Output, b: DynamicSwiftSDK.Operations.GetUserPasskeys.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetUserPasskeys.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetUserPasskeys.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpdatePasskey {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Path, b: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdatePasskey.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdatePasskey.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Headers, b: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Body, b: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Body
      public init(path: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Path, headers: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdatePasskey.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Input, b: DynamicSwiftSDK.Operations.UpdatePasskey.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.UserPasskey)
          public var json: DynamicSwiftSDK.Components.Schemas.UserPasskey {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok.Body, b: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok, b: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.UpdatePasskey.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Output.NotFound, b: DynamicSwiftSDK.Operations.UpdatePasskey.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.UpdatePasskey.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.UpdatePasskey.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.UpdatePasskey.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpdatePasskey.Output, b: DynamicSwiftSDK.Operations.UpdatePasskey.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpdatePasskey.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpdatePasskey.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UserPasskeysOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Path, b: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UserPasskeysOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UserPasskeysOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Headers, b: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Path, headers: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input, b: DynamicSwiftSDK.Operations.UserPasskeysOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.UserPasskeysOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output, b: DynamicSwiftSDK.Operations.UserPasskeysOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UserPasskeysOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UserPasskeysOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetUserMfaDevices {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Path, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserMfaDevices.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetUserMfaDevices.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Headers, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Path, headers: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output, b: DynamicSwiftSDK.Operations.GetUserMfaDevices.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetUserMfaDevices.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetUserMfaDevices.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ListMfaDevicesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input.Path, b: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input.Path
      public init(path: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input.Path)
      public static func == (a: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input, b: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output.NoContent {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output, b: DynamicSwiftSDK.Operations.ListMfaDevicesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum GetMfaDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId)
        public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Path, b: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetMfaDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetMfaDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Headers, b: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.GetMfaDevice.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Input, b: DynamicSwiftSDK.Operations.GetMfaDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFADevice)
          public var json: DynamicSwiftSDK.Components.Schemas.MFADevice {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok, b: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetMfaDevice.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetMfaDevice.Output, b: DynamicSwiftSDK.Operations.GetMfaDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetMfaDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetMfaDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum UpdateUserMfaDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Path, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateUserMfaDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.UpdateUserMfaDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Headers, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest)
        public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Body, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output.NoContent, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output, b: DynamicSwiftSDK.Operations.UpdateUserMfaDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.UpdateUserMfaDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.UpdateUserMfaDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteMfaDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId)
        public static func == (a: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Path, b: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var xMfaAuthToken: Swift.String
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.DeleteMfaDevice.AcceptableContentType>]
        public init(xMfaAuthToken: Swift.String, accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.DeleteMfaDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Headers, b: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input.Headers)
      public static func == (a: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input, b: DynamicSwiftSDK.Operations.DeleteMfaDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output.NoContent, b: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.DeleteMfaDevice.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output, b: DynamicSwiftSDK.Operations.DeleteMfaDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.DeleteMfaDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.DeleteMfaDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetMfaDeviceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, mfaDeviceId: DynamicSwiftSDK.Components.Parameters.MfaDeviceId)
        public static func == (a: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input.Path
      public init(path: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input.Path)
      public static func == (a: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input, b: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output.NoContent {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output, b: DynamicSwiftSDK.Operations.GetMfaDeviceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum RegisterTotpMfaDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Path, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterTotpMfaDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterTotpMfaDeviceVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Path, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Body, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Body
      public init(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFADevice)
          public var json: DynamicSwiftSDK.Components.Schemas.MFADevice {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterTotpMfaDeviceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Path, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output, b: DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterTotpMfaDeviceOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaTotpDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaTotpDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaTotpDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Body, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Body
      public init(path: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok.Body, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output, b: DynamicSwiftSDK.Operations.AuthMfaTotpDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaTotpDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaTotpDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaTotpDeviceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input, b: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output, b: DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaTotpDeviceOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterPasskeyMfaDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Path, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterPasskeyMfaDeviceVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Path, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Body, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Body
      public init(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterPasskeyMfaDeviceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Path, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output, b: DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterPasskeyMfaDeviceOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaPasskeyDeviceChallenge {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok.Body, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceChallenge.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaPasskeyDevice {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Body, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Body
      public init(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok.Body, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaPasskeyDevice.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaPasskeyDeviceOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output, b: DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaPasskeyDeviceOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaRecovery {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaRecovery.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaRecovery.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Body, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Body
      public init(path: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok.Body, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output, b: DynamicSwiftSDK.Operations.AuthMfaRecovery.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaRecovery.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaRecovery.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum AuthMfaRecoveryOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Path, b: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Headers, b: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Path, headers: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input, b: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output, b: DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.AuthMfaRecoveryOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetRecoveryCodes {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Path, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetRecoveryCodes.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetRecoveryCodes.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Headers, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Path, headers: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output, b: DynamicSwiftSDK.Operations.GetRecoveryCodes.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetRecoveryCodes.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetRecoveryCodes.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateNewRecoveryCodes {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Path, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Headers, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Path, headers: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok.Body, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.NotFound, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output, b: DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateNewRecoveryCodes.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RecoveryCodesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Path, b: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoveryCodesOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoveryCodesOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input, b: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output, b: DynamicSwiftSDK.Operations.RecoveryCodesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RecoveryCodesOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RecoveryCodesOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum MergeUsers {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Input.Path, b: DynamicSwiftSDK.Operations.MergeUsers.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.MergeUsers.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.MergeUsers.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.MergeUsers.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Input.Headers, b: DynamicSwiftSDK.Operations.MergeUsers.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.MergeUsers.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.MergeUsers.Input.Path, headers: DynamicSwiftSDK.Operations.MergeUsers.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Input, b: DynamicSwiftSDK.Operations.MergeUsers.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok.Body, b: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok, b: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.MergeUsers.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.MergeUsers.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.MergeUsers.Output, b: DynamicSwiftSDK.Operations.MergeUsers.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.MergeUsers.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.MergeUsers.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum MergeUsersOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Path, b: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.MergeUsersOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.MergeUsersOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Headers, b: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Path, headers: DynamicSwiftSDK.Operations.MergeUsersOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.MergeUsersOptions.Input, b: DynamicSwiftSDK.Operations.MergeUsersOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.MergeUsersOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.MergeUsersOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.MergeUsersOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.MergeUsersOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.MergeUsersOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.MergeUsersOptions.Output, b: DynamicSwiftSDK.Operations.MergeUsersOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.MergeUsersOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.MergeUsersOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateEmbeddedWallets {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Path, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmbeddedWallets.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmbeddedWallets.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Headers, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Body, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created.Body, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created)
      public var created: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output, b: DynamicSwiftSDK.Operations.CreateEmbeddedWallets.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateEmbeddedWallets.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateEmbeddedWallets.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum DeleteEmbeddedWallets {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Path, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Headers, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest)
        public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Body, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Path, headers: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NoContent, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NotFound, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output, b: DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.DeleteEmbeddedWallets.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateEmbeddedWalletsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Path, b: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input, b: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output, b: DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateEmbeddedWalletsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEmbeddedWalletsDeleteRequest {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Path, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Headers, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Path, headers: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody)
          public var json: DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.NotFound, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output, b: DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEmbeddedWalletsDeleteRequest.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EmbeddedWalletDeleteRequestOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Path, b: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Headers, b: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input, b: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output, b: DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EmbeddedWalletDeleteRequestOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateWalletAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Path, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWalletAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWalletAccount.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Headers, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Body, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateWalletAccount.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Input, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created.Body, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created)
      public var created: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.NotFound, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.CreateWalletAccount.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.CreateWalletAccount.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.CreateWalletAccount.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateWalletAccount.Output, b: DynamicSwiftSDK.Operations.CreateWalletAccount.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateWalletAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateWalletAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum WalletAccountOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Path, b: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.WalletAccountOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.WalletAccountOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Headers, b: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Path, headers: DynamicSwiftSDK.Operations.WalletAccountOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.WalletAccountOptions.Input, b: DynamicSwiftSDK.Operations.WalletAccountOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.WalletAccountOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.WalletAccountOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.WalletAccountOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.WalletAccountOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.WalletAccountOptions.Output, b: DynamicSwiftSDK.Operations.WalletAccountOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.WalletAccountOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.WalletAccountOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetCreateWalletAccountRequest {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Path, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum
        public init(chain: DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum)
        public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Query, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Headers, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Path, query: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Query, headers: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody)
          public var json: DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.NotFound, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output, b: DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetCreateWalletAccountRequest.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum WalletAccountRequestOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Path, b: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.WalletAccountRequestOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.WalletAccountRequestOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Headers, b: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Path, headers: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input, b: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output, b: DynamicSwiftSDK.Operations.WalletAccountRequestOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.WalletAccountRequestOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.WalletAccountRequestOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum InitEmailAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Path, b: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitEmailAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitEmailAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Headers, b: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest)
        public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Body, b: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Body
      public init(path: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Path, headers: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitEmailAuth.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Input, b: DynamicSwiftSDK.Operations.InitEmailAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok.Body, b: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok, b: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.InitEmailAuth.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Output.NotFound, b: DynamicSwiftSDK.Operations.InitEmailAuth.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.InitEmailAuth.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.InitEmailAuth.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.InitEmailAuth.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.InitEmailAuth.Output, b: DynamicSwiftSDK.Operations.InitEmailAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.InitEmailAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.InitEmailAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EmailAuthOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Path, b: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmailAuthOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmailAuthOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Headers, b: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmailAuthOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EmailAuthOptions.Input, b: DynamicSwiftSDK.Operations.EmailAuthOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EmailAuthOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.EmailAuthOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.EmailAuthOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.EmailAuthOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.EmailAuthOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EmailAuthOptions.Output, b: DynamicSwiftSDK.Operations.EmailAuthOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EmailAuthOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EmailAuthOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum InitPasskeyRecovery {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Path, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitPasskeyRecovery.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.InitPasskeyRecovery.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Headers, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest)
        public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Body, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Body
      public init(path: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created.Body, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created)
      public var created: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.NotFound, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output, b: DynamicSwiftSDK.Operations.InitPasskeyRecovery.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.InitPasskeyRecovery.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.InitPasskeyRecovery.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CompletePasskeyRecovery {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Path, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CompletePasskeyRecovery.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CompletePasskeyRecovery.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Headers, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Body, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Path, headers: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created.Body, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created)
      public var created: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.NotFound, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output, b: DynamicSwiftSDK.Operations.CompletePasskeyRecovery.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CompletePasskeyRecovery.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CompletePasskeyRecovery.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PasskeyRecoveryOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Path, b: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Headers, b: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Path, headers: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input, b: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output, b: DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.PasskeyRecoveryOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RegisterSessionKey {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Path, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterSessionKey.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RegisterSessionKey.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Headers, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Body, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Body
      public init(path: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Path, headers: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RegisterSessionKey.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Input, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RegisterSessionKey.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RegisterSessionKey.Output, b: DynamicSwiftSDK.Operations.RegisterSessionKey.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RegisterSessionKey.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RegisterSessionKey.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SessionKeyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Path, b: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionKeyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SessionKeyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SessionKeyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SessionKeyOptions.Input, b: DynamicSwiftSDK.Operations.SessionKeyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SessionKeyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SessionKeyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SessionKeyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SessionKeyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SessionKeyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SessionKeyOptions.Output, b: DynamicSwiftSDK.Operations.SessionKeyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SessionKeyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SessionKeyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EmbeddedWalletExport {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public var activityId: DynamicSwiftSDK.Components.Parameters.ActivityId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId, activityId: DynamicSwiftSDK.Components.Parameters.ActivityId)
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Path, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletExport.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletExport.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Headers, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok.Body, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.NotFound, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output, b: DynamicSwiftSDK.Operations.EmbeddedWalletExport.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EmbeddedWalletExport.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EmbeddedWalletExport.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum EmbeddedWalletExportOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public var activityId: DynamicSwiftSDK.Components.Parameters.ActivityId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId, activityId: DynamicSwiftSDK.Components.Parameters.ActivityId)
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Path, b: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Headers, b: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Path, headers: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input, b: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output, b: DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.EmbeddedWalletExportOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetNetworksConfigurationByEnvId {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Path, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Headers, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Path, headers: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse])
          public var json: [DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse] {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.Ok {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.NotFound, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output, b: DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetNetworksConfigurationByEnvId.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum NetworksOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.NetworksOptions.Input.Path, b: DynamicSwiftSDK.Operations.NetworksOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.NetworksOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.NetworksOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.NetworksOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.NetworksOptions.Input.Headers, b: DynamicSwiftSDK.Operations.NetworksOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.NetworksOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.NetworksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.NetworksOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.NetworksOptions.Input, b: DynamicSwiftSDK.Operations.NetworksOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.NetworksOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.NetworksOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.NetworksOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.NetworksOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.NetworksOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.NetworksOptions.Output, b: DynamicSwiftSDK.Operations.NetworksOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.NetworksOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.NetworksOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetSupportedOnramps {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Path, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var walletAddress: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam
        public var chain: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam
        public var networkId: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public var token: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam?
        public init(walletAddress: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam, chain: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam, networkId: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil, token: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Query, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetSupportedOnramps.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetSupportedOnramps.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Headers, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Path, query: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Query, headers: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.NotFound, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output, b: DynamicSwiftSDK.Operations.GetSupportedOnramps.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetSupportedOnramps.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetSupportedOnramps.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum OnrampsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Path, b: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OnrampsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.OnrampsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.OnrampsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.OnrampsOptions.Input, b: DynamicSwiftSDK.Operations.OnrampsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.OnrampsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.OnrampsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.OnrampsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.OnrampsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.OnrampsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.OnrampsOptions.Output, b: DynamicSwiftSDK.Operations.OnrampsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.OnrampsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.OnrampsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetCoinbaseSupportedNetworks {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Path, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Headers, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Path, headers: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([Swift.String])
          public var json: [Swift.String] {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.Ok {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.NotFound, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output, b: DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetCoinbaseSupportedNetworks.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CoinbaseNetworksOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Path, b: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input, b: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output, b: DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CoinbaseNetworksOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateEmailVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Path, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmailVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmailVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Headers, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Body, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateEmailVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Input, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created.Body, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created)
      public var created: DynamicSwiftSDK.Operations.CreateEmailVerification.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerification.Output, b: DynamicSwiftSDK.Operations.CreateEmailVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateEmailVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateEmailVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateEmailVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input, b: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output, b: DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateEmailVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateSmsVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Path, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateSmsVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateSmsVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Headers, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Body, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateSmsVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Input, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created.Body, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created)
      public var created: DynamicSwiftSDK.Operations.CreateSmsVerification.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerification.Output, b: DynamicSwiftSDK.Operations.CreateSmsVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateSmsVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateSmsVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateSmsVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input, b: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output, b: DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateSmsVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RetrySmsVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Path, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetrySmsVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetrySmsVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Headers, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Body, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RetrySmsVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Input, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created.Body, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created)
      public var created: DynamicSwiftSDK.Operations.RetrySmsVerification.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerification.Output, b: DynamicSwiftSDK.Operations.RetrySmsVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RetrySmsVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RetrySmsVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RetrySmsVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input, b: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output, b: DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RetrySmsVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifySmsVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Path, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifySmsVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifySmsVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Headers, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Body, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifySmsVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Input, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifySmsVerification.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerification.Output, b: DynamicSwiftSDK.Operations.VerifySmsVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifySmsVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifySmsVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifySmsVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input, b: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output, b: DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifySmsVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignInWithSmsVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Path, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithSmsVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithSmsVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Headers, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Body, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output, b: DynamicSwiftSDK.Operations.SignInWithSmsVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignInWithSmsVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignInWithSmsVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignInWithSmsVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input, b: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output, b: DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignInWithSmsVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyEmailVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Path, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyEmailVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyEmailVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Body, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok.Body, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output, b: DynamicSwiftSDK.Operations.VerifyEmailVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyEmailVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyEmailVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum VerifyEmailVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input, b: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output, b: DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.VerifyEmailVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignInWithEmailVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Path, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithEmailVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithEmailVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Headers, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Body, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output, b: DynamicSwiftSDK.Operations.SignInWithEmailVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignInWithEmailVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignInWithEmailVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignInWithEmailVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input, b: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output, b: DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignInWithEmailVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RetryEmailVerification {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Path, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetryEmailVerification.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetryEmailVerification.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Headers, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Body, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Body
      public init(path: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Path, headers: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RetryEmailVerification.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Input, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created.Body, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created)
      public var created: DynamicSwiftSDK.Operations.RetryEmailVerification.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerification.Output, b: DynamicSwiftSDK.Operations.RetryEmailVerification.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RetryEmailVerification.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RetryEmailVerification.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RetryEmailVerificationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Path, b: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input, b: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output, b: DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RetryEmailVerificationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetJwksByEnvironmentId {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Path, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Headers, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Path, headers: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.JwksResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.JwksResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.Ok {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.NotFound, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output, b: DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetJwksByEnvironmentId.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum JwksOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.JwksOptions.Input.Path, b: DynamicSwiftSDK.Operations.JwksOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.JwksOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.JwksOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.JwksOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.JwksOptions.Input.Headers, b: DynamicSwiftSDK.Operations.JwksOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.JwksOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.JwksOptions.Input.Path, headers: DynamicSwiftSDK.Operations.JwksOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.JwksOptions.Input, b: DynamicSwiftSDK.Operations.JwksOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.JwksOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.JwksOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.JwksOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.JwksOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.JwksOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.JwksOptions.Output, b: DynamicSwiftSDK.Operations.JwksOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.JwksOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.JwksOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetCurrencyExchangeRates {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Path, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Headers, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Path, headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.ExchangeRatesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.ExchangeRatesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output.Ok {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetCurrencyExchangeRates.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetCurrencyExchangeRatesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Headers, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output.Ok, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output.Ok)
      public static var ok: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output {
        get
      }
      public var ok: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output, b: DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetCurrencyExchangeRatesOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetAccountBalances {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var chainName: DynamicSwiftSDK.Components.Schemas.ChainEnum
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, chainName: DynamicSwiftSDK.Components.Schemas.ChainEnum)
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Path, b: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var networkId: Swift.Double?
        public var accountAddress: DynamicSwiftSDK.Components.Schemas.EthSolBtcSuiFlowCosmosWalletAddress
        public var includePrices: Swift.Bool?
        public var includeNative: Swift.Bool?
        public init(networkId: Swift.Double? = nil, accountAddress: DynamicSwiftSDK.Components.Schemas.EthSolBtcSuiFlowCosmosWalletAddress, includePrices: Swift.Bool? = nil, includeNative: Swift.Bool? = nil)
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Query, b: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAccountBalances.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAccountBalances.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Headers, b: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Path, query: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Query, headers: DynamicSwiftSDK.Operations.GetAccountBalances.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Input, b: DynamicSwiftSDK.Operations.GetAccountBalances.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json([DynamicSwiftSDK.Components.Schemas.TokenBalance])
          public var json: [DynamicSwiftSDK.Components.Schemas.TokenBalance] {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok, b: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetAccountBalances.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.TooManyRequests)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.TooManyRequests {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalances.Output, b: DynamicSwiftSDK.Operations.GetAccountBalances.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetAccountBalances.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetAccountBalances.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetAccountBalancesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var chainName: DynamicSwiftSDK.Components.Schemas.ChainEnum
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, chainName: DynamicSwiftSDK.Components.Schemas.ChainEnum)
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var networkId: Swift.Double
        public var accountAddress: DynamicSwiftSDK.Components.Schemas.EthSolBtcSuiFlowCosmosWalletAddress
        public init(networkId: Swift.Double, accountAddress: DynamicSwiftSDK.Components.Schemas.EthSolBtcSuiFlowCosmosWalletAddress)
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Query, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAccountBalancesOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetAccountBalancesOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Headers, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Path, query: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Query, headers: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output, b: DynamicSwiftSDK.Operations.GetAccountBalancesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetAccountBalancesOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetAccountBalancesOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetTelegramAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Path, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Path
      public struct Query : Swift.Sendable, Swift.Hashable {
        public var state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam
        public init(state: DynamicSwiftSDK.Components.Schemas.ValidStringQueryParam)
        public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Query, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Query) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var query: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Query
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetTelegramAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetTelegramAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Headers, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Path, query: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Query, headers: DynamicSwiftSDK.Operations.GetTelegramAuth.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Input, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case html(OpenAPIRuntime.HTTPBody)
          public var html: OpenAPIRuntime.HTTPBody {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetTelegramAuth.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetTelegramAuth.Output, b: DynamicSwiftSDK.Operations.GetTelegramAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case html
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetTelegramAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetTelegramAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum PostTelegramAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Path, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PostTelegramAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.PostTelegramAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Headers, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.TelegramPostRequest)
        public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Body, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Body
      public init(path: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Path, headers: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.PostTelegramAuth.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Input, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Accepted : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Output.Accepted, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Output.Accepted) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case accepted(DynamicSwiftSDK.Operations.PostTelegramAuth.Output.Accepted)
      public static var accepted: DynamicSwiftSDK.Operations.PostTelegramAuth.Output {
        get
      }
      public var accepted: DynamicSwiftSDK.Operations.PostTelegramAuth.Output.Accepted {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.PostTelegramAuth.Output, b: DynamicSwiftSDK.Operations.PostTelegramAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.PostTelegramAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.PostTelegramAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramAuthOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Path, b: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramAuthOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramAuthOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input, b: DynamicSwiftSDK.Operations.TelegramAuthOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.TelegramAuthOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output, b: DynamicSwiftSDK.Operations.TelegramAuthOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramAuthOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramAuthOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramSignIn {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Path, b: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramSignIn.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramSignIn.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthResultRequest)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Body, b: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramSignIn.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Input, b: DynamicSwiftSDK.Operations.TelegramSignIn.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok.Body, b: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok, b: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.TelegramSignIn.Output.Ok {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case tooManyRequests(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var tooManyRequests: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramSignIn.Output, b: DynamicSwiftSDK.Operations.TelegramSignIn.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramSignIn.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramSignIn.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramSignInOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Path, b: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramSignInOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramSignInOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input, b: DynamicSwiftSDK.Operations.TelegramSignInOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.TelegramSignInOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output, b: DynamicSwiftSDK.Operations.TelegramSignInOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramSignInOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramSignInOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramCheckAuth {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Path, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramCheckAuth.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramCheckAuth.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthResultRequest)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Body, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NoContent, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NoContent {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload)
      public var forbidden: DynamicSwiftSDK.Components.Responses.ForbiddenWithErrorAndPayload {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NotFound, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output.NotFound {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output, b: DynamicSwiftSDK.Operations.TelegramCheckAuth.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramCheckAuth.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramCheckAuth.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramCheckAuthOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Path, b: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input, b: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output.NoContent {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output, b: DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramCheckAuthOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramVerify {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Input.Path, b: DynamicSwiftSDK.Operations.TelegramVerify.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramVerify.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramVerify.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramVerify.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramVerify.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramVerify.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.OauthResultRequest)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Input.Body, b: DynamicSwiftSDK.Operations.TelegramVerify.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.TelegramVerify.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.TelegramVerify.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramVerify.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.TelegramVerify.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Input, b: DynamicSwiftSDK.Operations.TelegramVerify.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.VerifyResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.VerifyResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok.Body, b: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok, b: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.TelegramVerify.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramVerify.Output, b: DynamicSwiftSDK.Operations.TelegramVerify.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramVerify.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramVerify.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum TelegramVerifyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Path, b: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramVerifyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.TelegramVerifyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input, b: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output, b: DynamicSwiftSDK.Operations.TelegramVerifyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.TelegramVerifyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.TelegramVerifyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateWaasAccount {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Path, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWaasAccount.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWaasAccount.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Headers, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Body, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Body
      public init(path: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.CreateWaasAccount.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Input, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok.Body, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.CreateWaasAccount.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccount.Output, b: DynamicSwiftSDK.Operations.CreateWaasAccount.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateWaasAccount.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateWaasAccount.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum CreateWaasAccountOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Path, b: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWaasAccountOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.CreateWaasAccountOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Headers, b: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Path, headers: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input, b: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output, b: DynamicSwiftSDK.Operations.CreateWaasAccountOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.CreateWaasAccountOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.CreateWaasAccountOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RefreshKeyShares {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Path, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshKeyShares.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RefreshKeyShares.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Headers, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.RefreshKeyShares.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Input, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RefreshKeyShares.Output.Ok {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RefreshKeyShares.Output, b: DynamicSwiftSDK.Operations.RefreshKeyShares.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RefreshKeyShares.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RefreshKeyShares.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RefreshKeySharesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input.Path, b: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input.Path
      public init(path: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input.Path)
      public static func == (a: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input, b: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output.NoContent {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output, b: DynamicSwiftSDK.Operations.RefreshKeySharesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public enum ImportPrivateKey {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Path, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ImportPrivateKey.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ImportPrivateKey.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Headers, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Body, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Path, headers: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ImportPrivateKey.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Input, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok.Body, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.ImportPrivateKey.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKey.Output, b: DynamicSwiftSDK.Operations.ImportPrivateKey.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ImportPrivateKey.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ImportPrivateKey.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ImportPrivateKeyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Path, b: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input, b: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output, b: DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ImportPrivateKeyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExportPrivateKey {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Path, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExportPrivateKey.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExportPrivateKey.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Headers, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest)
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Body, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Body
      public init(path: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Path, headers: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.ExportPrivateKey.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Input, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok.Body, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.ExportPrivateKey.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKey.Output, b: DynamicSwiftSDK.Operations.ExportPrivateKey.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExportPrivateKey.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExportPrivateKey.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ExportPrivateKeyOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Path, b: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input, b: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output, b: DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ExportPrivateKeyOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignMessage {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Input.Path, b: DynamicSwiftSDK.Operations.SignMessage.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignMessage.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignMessage.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignMessage.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Input.Headers, b: DynamicSwiftSDK.Operations.SignMessage.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignMessage.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest)
        public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Input.Body, b: DynamicSwiftSDK.Operations.SignMessage.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.SignMessage.Input.Body
      public init(path: DynamicSwiftSDK.Operations.SignMessage.Input.Path, headers: DynamicSwiftSDK.Operations.SignMessage.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.SignMessage.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Input, b: DynamicSwiftSDK.Operations.SignMessage.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Output.Ok.Body, b: DynamicSwiftSDK.Operations.SignMessage.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.SignMessage.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.SignMessage.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Output.Ok, b: DynamicSwiftSDK.Operations.SignMessage.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.SignMessage.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.SignMessage.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignMessage.Output, b: DynamicSwiftSDK.Operations.SignMessage.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignMessage.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignMessage.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum SignMessageOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Path, b: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignMessageOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.SignMessageOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Headers, b: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Path, headers: DynamicSwiftSDK.Operations.SignMessageOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.SignMessageOptions.Input, b: DynamicSwiftSDK.Operations.SignMessageOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.SignMessageOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.SignMessageOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.SignMessageOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.SignMessageOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.SignMessageOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.SignMessageOptions.Output, b: DynamicSwiftSDK.Operations.SignMessageOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.SignMessageOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.SignMessageOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeyShares {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeyShares.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeyShares.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Body, b: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Body
      public init(path: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.BackupKeyShares.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Input, b: DynamicSwiftSDK.Operations.BackupKeyShares.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created.Body, b: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created, b: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created)
      public var created: DynamicSwiftSDK.Operations.BackupKeyShares.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeyShares.Output, b: DynamicSwiftSDK.Operations.BackupKeyShares.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeyShares.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeyShares.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeySharesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input, b: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output, b: DynamicSwiftSDK.Operations.BackupKeySharesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeySharesOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeySharesOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeySharesToGoogleDrive {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created.Body, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created)
      public var created: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDrive.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeySharesToGoogleDriveOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output, b: DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeySharesToGoogleDriveOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeySharesToLocation {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToLocation.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToLocation.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Body, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Body
      public init(path: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Created : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created.Body, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created.Body
        public init(body: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created.Body)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case created(DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created)
      public var created: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output.Created {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case notFound(DynamicSwiftSDK.Components.Responses.NotFound)
      public var notFound: DynamicSwiftSDK.Components.Responses.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocation.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeySharesToLocation.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeySharesToLocation.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum BackupKeySharesToLocationOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Path, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Headers, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Path, headers: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unprocessableContent(DynamicSwiftSDK.Components.Responses.UnprocessableEntity)
      public var unprocessableContent: DynamicSwiftSDK.Components.Responses.UnprocessableEntity {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output, b: DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.BackupKeySharesToLocationOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RecoverKeyShares {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Path, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoverKeyShares.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoverKeyShares.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Headers, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest)
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Body, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Body?
      public init(path: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Path, headers: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.RecoverKeyShares.Input.Body? = nil)
      public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Input, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse)
          public var json: DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok.Body, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.RecoverKeyShares.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RecoverKeyShares.Output, b: DynamicSwiftSDK.Operations.RecoverKeyShares.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RecoverKeyShares.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RecoverKeyShares.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum RecoverKeySharesOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Path, b: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoverKeySharesOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.RecoverKeySharesOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Headers, b: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Path, headers: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input, b: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output, b: DynamicSwiftSDK.Operations.RecoverKeySharesOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.RecoverKeySharesOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.RecoverKeySharesOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum Reshare {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.Reshare.Input.Path, b: DynamicSwiftSDK.Operations.Reshare.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.Reshare.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Reshare.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.Reshare.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.Reshare.Input.Headers, b: DynamicSwiftSDK.Operations.Reshare.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.Reshare.Input.Headers
      @frozen public enum Body : Swift.Sendable, Swift.Hashable {
        case json(DynamicSwiftSDK.Components.Schemas.ReshareRequest)
        public static func == (a: DynamicSwiftSDK.Operations.Reshare.Input.Body, b: DynamicSwiftSDK.Operations.Reshare.Input.Body) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var body: DynamicSwiftSDK.Operations.Reshare.Input.Body
      public init(path: DynamicSwiftSDK.Operations.Reshare.Input.Path, headers: DynamicSwiftSDK.Operations.Reshare.Input.Headers = .init(), body: DynamicSwiftSDK.Operations.Reshare.Input.Body)
      public static func == (a: DynamicSwiftSDK.Operations.Reshare.Input, b: DynamicSwiftSDK.Operations.Reshare.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare)
          public var json: DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.Reshare.Output.Ok.Body, b: DynamicSwiftSDK.Operations.Reshare.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.Reshare.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.Reshare.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.Reshare.Output.Ok, b: DynamicSwiftSDK.Operations.Reshare.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.Reshare.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.Reshare.Output.Ok {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.Reshare.Output, b: DynamicSwiftSDK.Operations.Reshare.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.Reshare.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.Reshare.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum ReshareOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var walletId: DynamicSwiftSDK.Components.Parameters.WalletId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, walletId: DynamicSwiftSDK.Components.Parameters.WalletId)
        public static func == (a: DynamicSwiftSDK.Operations.ReshareOptions.Input.Path, b: DynamicSwiftSDK.Operations.ReshareOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.ReshareOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ReshareOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.ReshareOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.ReshareOptions.Input.Headers, b: DynamicSwiftSDK.Operations.ReshareOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.ReshareOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.ReshareOptions.Input.Path, headers: DynamicSwiftSDK.Operations.ReshareOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.ReshareOptions.Input, b: DynamicSwiftSDK.Operations.ReshareOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.ReshareOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.ReshareOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.ReshareOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.ReshareOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.ReshareOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.ReshareOptions.Output, b: DynamicSwiftSDK.Operations.ReshareOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.ReshareOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.ReshareOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetGlobalWalletsSettings {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Path, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Headers, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Path, headers: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        @frozen public enum Body : Swift.Sendable, Swift.Hashable {
          case json(DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings)
          public var json: DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings {
            get throws
          }
          public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok.Body, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok.Body) -> Swift.Bool
          public func hash(into hasher: inout Swift.Hasher)
          public var hashValue: Swift.Int {
            get
          }
        }
        public var body: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok.Body
        public init(body: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok.Body)
        public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok)
      public var ok: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.Ok {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.NotFound, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output, b: DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetGlobalWalletsSettings.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GlobalWalletsSettingsOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId)
        public static func == (a: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Path, b: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Headers, b: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Path, headers: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input, b: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output.NoContent {
        get throws
      }
      case badRequest(DynamicSwiftSDK.Components.Responses.BadRequest)
      public var badRequest: DynamicSwiftSDK.Components.Responses.BadRequest {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output, b: DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GlobalWalletsSettingsOptions.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEndUserOauthAccessToken {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var oauthAccountId: DynamicSwiftSDK.Components.Parameters.OauthAccountId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, oauthAccountId: DynamicSwiftSDK.Components.Parameters.OauthAccountId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Path, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Path
      public struct Headers : Swift.Sendable, Swift.Hashable {
        public var accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.AcceptableContentType>]
        public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.AcceptableContentType>] = .defaultValues())
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Headers, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Headers) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var headers: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Headers
      public init(path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Path, headers: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input.Headers = .init())
      public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct Ok : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.Ok, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.Ok) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case ok(DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.Ok)
      public static var ok: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output {
        get
      }
      public var ok: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.Ok {
        get throws
      }
      case unauthorized(DynamicSwiftSDK.Components.Responses.Unauthorized)
      public var unauthorized: DynamicSwiftSDK.Components.Responses.Unauthorized {
        get throws
      }
      case forbidden(DynamicSwiftSDK.Components.Responses.Forbidden)
      public var forbidden: DynamicSwiftSDK.Components.Responses.Forbidden {
        get throws
      }
      public struct NotFound : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.NotFound, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.NotFound) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case notFound(DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.NotFound)
      public static var notFound: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output {
        get
      }
      public var notFound: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output.NotFound {
        get throws
      }
      case internalServerError(DynamicSwiftSDK.Components.Responses.InternalServerError)
      public var internalServerError: DynamicSwiftSDK.Components.Responses.InternalServerError {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum AcceptableContentType : OpenAPIRuntime.AcceptableProtocol {
      case json
      case other(Swift.String)
      public init?(rawValue: Swift.String)
      public var rawValue: Swift.String {
        get
      }
      public static var allCases: [DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.AcceptableContentType] {
        get
      }
      public typealias AllCases = [DynamicSwiftSDK.Operations.GetEndUserOauthAccessToken.AcceptableContentType]
      public typealias RawValue = Swift.String
    }
  }
  public enum GetEndUserOauthAccessTokenOptions {
    public static let id: Swift.String
    public struct Input : Swift.Sendable, Swift.Hashable {
      public struct Path : Swift.Sendable, Swift.Hashable {
        public var environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId
        public var oauthAccountId: DynamicSwiftSDK.Components.Parameters.OauthAccountId
        public init(environmentId: DynamicSwiftSDK.Components.Parameters.EnvironmentId, oauthAccountId: DynamicSwiftSDK.Components.Parameters.OauthAccountId)
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input.Path, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input.Path) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input.Path
      public init(path: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input.Path)
      public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Input) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    @frozen public enum Output : Swift.Sendable, Swift.Hashable {
      public struct NoContent : Swift.Sendable, Swift.Hashable {
        public init()
        public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output.NoContent, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output.NoContent) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noContent(DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output.NoContent)
      public static var noContent: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output {
        get
      }
      public var noContent: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output.NoContent {
        get throws
      }
      case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
      public static func == (a: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output, b: DynamicSwiftSDK.Operations.GetEndUserOauthAccessTokenOptions.Output) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
}
extension DynamicSwiftSDK.DynamicCoreState.InitStatus : Swift.Equatable {}
extension DynamicSwiftSDK.DynamicCoreState.InitStatus : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumConnectorError : Swift.Equatable {}
extension DynamicSwiftSDK.EthereumConnectorError : Swift.Hashable {}
extension DynamicSwiftSDK.WalletError : Swift.Equatable {}
extension DynamicSwiftSDK.WalletError : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumAccountError : Swift.Equatable {}
extension DynamicSwiftSDK.EthereumAccountError : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumKeyStorageError : Swift.Equatable {}
extension DynamicSwiftSDK.EthereumKeyStorageError : Swift.Hashable {}
extension DynamicSwiftSDK.KeyUtilError : Swift.Equatable {}
extension DynamicSwiftSDK.KeyUtilError : Swift.Hashable {}
extension DynamicSwiftSDK.ABIError : Swift.Equatable {}
extension DynamicSwiftSDK.ABIError : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumTransactionReceiptStatus : Swift.Equatable {}
extension DynamicSwiftSDK.EthereumTransactionReceiptStatus : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumTransactionReceiptStatus : Swift.RawRepresentable {}
extension DynamicSwiftSDK.SupportedEthereumNetwork : Swift.Hashable {}
extension DynamicSwiftSDK.EthereumWallet : DynamicSwiftSDK.MPCWallet {}
extension DynamicSwiftSDK.ChainName : Swift.RawRepresentable {}
extension DynamicSwiftSDK.ThresholdSignatureScheme : Swift.RawRepresentable {}
extension DynamicSwiftSDK.VerifiedCredentialName : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckParams.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserFieldsCheckResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthInitAuthRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuthSigninRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateSVMTransactionRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.V6UserOp.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.V6UserOp.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.V6UserOp.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.V7UserOp.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.V7UserOp.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.V7UserOp.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateUserOpRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateEVMTransactionRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SimulateTransactionResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.SpenderToInfoPayload.AdditionalPropertiesPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AssetExposure.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload.Case1Payload : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.ResultPayload.Case1Payload : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BlockaidValidation.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PriceData.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PriceData.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PriceData.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Asset.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Asset.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Asset.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AssetTransfer.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AssetTransfer.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AssetTransfer.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AssetDiff.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AssetDiff.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AssetDiff.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ScanWebsiteUrlResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SolanaTransactionOptimizationResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserWalletSelectionRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserOauthAccessTokenResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserOauthAccessTokenResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserOauthAccessTokenResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasswordSourceTypeEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecret.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletPasscodeClaimRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecretWithUpdatedJwt.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecretWithUpdatedJwt.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecretWithUpdatedJwt.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthToken.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletAuthType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.HealthcheckResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.HealthcheckResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.HealthcheckResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.HealthcheckStatus : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.HealthcheckStatus : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRedirectRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderLoginUrl.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmailProviderResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmailProviderResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmailProviderResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthProviderRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SocialSignInProvider.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SocialSignInProvider.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SocialSignInProvider.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SocialSignInProviderEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.SignInProviderEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SignInProviderEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ThresholdSignatureScheme : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialHashes.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MinifiedDynamicJwt.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MinifiedDynamicJwt.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MinifiedDynamicJwt.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.DynamicJwt.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.DynamicJwt.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.DynamicJwt.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwtPayloadDeprecatedInfo.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredentialFormatEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwtVerifiedCredential.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwtBlockchainAccount.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceData.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceData.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceData.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwksResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwksResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwksResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.JwksKey.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.JwksKey.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.JwksKey.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NonceResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NonceResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NonceResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BadRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BadRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BadRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Unauthorized.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Unauthorized.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Unauthorized.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Forbidden.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Forbidden.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Forbidden.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntity.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntity.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntity.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TooManyRequests.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TooManyRequests.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TooManyRequests.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NotFound.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NotFound.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NotFound.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MergeConflicts.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MergeConflicts.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MergeConflicts.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflict.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflict.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflict.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUser.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUser.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUser.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolutions.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MergeUserConflictResolution.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UnprocessableEntityErrorCode : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenWithErrorAndPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ForbiddenErrorPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ErrorMessageWithCode.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MethodNotAllowed.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MethodNotAllowed.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MethodNotAllowed.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.InternalServerError.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.InternalServerError.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.InternalServerError.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BadGateway.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BadGateway.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BadGateway.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.MultichainAccountAbstractionProvidersPayloadPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Provider.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderEntryPointVersionEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderKernelVersionEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderAgreement.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderAgreement.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderAgreement.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProviderEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.HardwareWalletEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSecurity.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MobileSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MobileSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MobileSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuth.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuth.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalAuth.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthStorageEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthStorageEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.HCaptchaSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.HCaptchaSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.HCaptchaSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Duration.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Duration.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Duration.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TimeUnitEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TimeUnitEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsPrivacy.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.MinAmountPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.DefaultSettingsPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.ExternalWalletsPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Funding.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.TokenPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingTokenRule : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultChain : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExternalWalletFundingDefaultChain : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.OnrampProviders : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OnrampProviders : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsGeneral.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.FeatureFlags.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.FeatureFlags.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.FeatureFlags.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.EvmPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NameServiceSdkSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmailSignInPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.SocialSignInPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.EmbeddedWalletsPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.OnSignUpPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WaasPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.WalletConnectPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.AccountAbstractionPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsSdk.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletSecurityMethod : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ChainConfiguration.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ChainConfiguration.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ChainConfiguration.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethods.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedSecurityMethod.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkSettingsRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.FrameworkSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.FrameworkSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.FrameworkSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ReactSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ReactSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ReactSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NextJsSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NextJsSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NextJsSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesign.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignModal.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignButton.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsDesignWidget.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsChains.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ProjectSettingsKyc.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.IntegrationSetting.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.IntegrationSetting.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.IntegrationSetting.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyUnlinkRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PrefetchRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PrefetchRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PrefetchRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ConnectRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ConnectRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ConnectRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthModeEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthModeEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.FarcasterSignInRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramUser.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramUser.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramUser.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramPostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramPostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TelegramPostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultStatus : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OauthResultStatus : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.VerifyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationCreateRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationCreateRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationRetryRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmsVerificationVerifyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationVerifyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.EmailVerificationRetryRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletChainEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ChainEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ChainEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.EnvironmentEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EnvironmentEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.WalletProviderEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletProviderEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletProviderEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EmbeddedWalletVersionEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WaasBackupOptionsEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateSelfResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NextViewEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NextViewEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.OAuthAccount.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OAuthAccount.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OAuthAccount.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BaseUser.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BaseUser.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BaseUser.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkUser.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkUser.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkUser.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserFields.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserFields.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserFields.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NameService.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NameService.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NameService.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Network._TypePayload : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.Network._TypePayload : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.Network.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Network.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Network.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NativeCurrency.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NativeCurrency.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NativeCurrency.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfiguration.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfiguration.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfiguration.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.NetworkConfigurationResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OnrampConfiguration.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OnrampConfiguration.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OnrampConfiguration.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload._TypePayload : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.EventsPayloadPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublishEvents.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SupportedOnrampsResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.SdkView.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkView.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkView.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSection.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSection.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSection.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSectionType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSectionType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewSectionAlignment : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewUpdateRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewUpdateRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewUpdateRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewsResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewsResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SdkViewsResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfo.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.WalletKeyShareInfoWithEncryptedAccountCredential.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WaasWalletProperties.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.WaasWalletProperties.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.WaasWalletProperties.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmartWalletProperties.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmartWalletProperties.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmartWalletProperties.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CoinbaseMpcWalletProperties.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.HardwareWalletProperties.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletProperties.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserIdentifierTypeEnum : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsFromFarcasterRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsFromFarcasterRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateUserEmbeddedWalletsFromFarcasterRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterEmbeddedWalletSessionKeyResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExportEmbeddedWalletResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletsRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateEmbeddedWalletParams.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateTurnkeyEmbeddedWalletSpecificOpts.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UpgradeEmbeddedWalletToV2Request.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegistrationCredential.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserPasskey.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UserPasskey.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UserPasskey.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyStorage.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyStorage.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyStorage.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeySignedRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyStamp.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyStamp.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyStamp.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateRecoveryEmailRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.UpdateUserPasskeyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorTransportProtocol : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.InitPasskeyRecoveryResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CompletePasskeyRecoveryRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.InitEmailAuthResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.RegisterSessionKeyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.GetUserPasskeysResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MfaBackupCodeAcknowledgement : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.MFASettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFASettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFASettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFADeviceType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFADeviceType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.MFADevice.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFADevice.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFADevice.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAListDevicesResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAUpdateDeviceRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDeviceGetResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterTotpDevicePostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.RegistrationPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDeviceGetResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegisterPasskeyDevicePostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.AssertionPayload.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDeviceGetResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthPasskeyDevicePostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyRegisterVerifyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PasskeyAuthRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAttestationResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAssertionResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientInputs.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticationExtensionsClientOutputs.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialRpEntity.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialUserEntity.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialParameters.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialDescriptor.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AttestationConveyancePreference : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.PublicKeyCredentialType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorSelectionCriteria.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.AuthenticatorAttachment : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ResidentKeyRequirement : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.UserVerificationRequirement : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.CreateMfaToken.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateMfaToken.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateMfaToken.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthTotpDevicePostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAAuthRecoveryDevicePostRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFAGetRecoveryCodesResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.MFARegenRecoveryCodesResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CurrencyType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CurrencyType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.Currency.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.Currency.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.Currency.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.WalletAdditionalAddress.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletAddressType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.WalletAddressType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.KycFieldType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.KycFieldType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldType : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldType : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidValue.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CustomFieldValidationRules.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SmsCountryCode.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SmsCountryCode.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SmsCountryCode.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.EcdsaValidatorOptions : Swift.BitwiseCopyable {}
extension DynamicSwiftSDK.Components.Schemas.TokenBalance.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TokenBalance.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TokenBalance.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBody.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyDeleteEmbeddedWalletsRequestBodyParameters.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.DeleteEmbeddedWalletsRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWalletAccountRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBody.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyCreateWalletAccountsRequestBodyParameters.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.TurnkeyWalletAccount.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.CreateWaasAccountRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ImportWaasPrivateKeyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SignMessageWithWaasRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.SignTransactionWithWaasRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.SignTransactionWithWaasRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.SignTransactionWithWaasRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ExportWaasWalletPrivateKeyRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BackupMultipleClientKeySharesResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.BackupKeySharesToLocationResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.RecoverMultipleClientKeySharesResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.ReshareRequest.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.ReshareRequest.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.ReshareRequest.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponse.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponse.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponse.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseWithServerKeygenIds.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.OpenRoomResponseForReshare.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings.CodingKeys : Swift.Equatable {}
extension DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings.CodingKeys : Swift.Hashable {}
extension DynamicSwiftSDK.Components.Schemas.GlobalWalletSettings.CodingKeys : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.GlobalWalletAccessControlTypeEnum : Swift.RawRepresentable {}
extension DynamicSwiftSDK.Components.Schemas.GlobalWalletAccessControlTypeEnum : Swift.BitwiseCopyable {}
